
Cornerstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002174  08003784  08003784  00004784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f8  080058f8  0000709c  2**0
                  CONTENTS
  4 .ARM          00000008  080058f8  080058f8  000068f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005900  08005900  0000709c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005900  08005900  00006900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005904  08005904  00006904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08005908  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  2000009c  080059a4  0000709c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  080059a4  0000767c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008870  00000000  00000000  000070cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a61  00000000  00000000  0000f93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  000113a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000068e  00000000  00000000  00011c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162d3  00000000  00000000  000122d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c351  00000000  00000000  000285a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e40  00000000  00000000  000348fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb73a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c4  00000000  00000000  000bb780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000bdf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800376c 	.word	0x0800376c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	0800376c 	.word	0x0800376c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <getTimeFromMS>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getTimeFromMS(unsigned int *ms, int **clock) {
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	int days = *ms /86400000;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a2c      	ldr	r2, [pc, #176]	@ (8000630 <getTimeFromMS+0xc0>)
 8000580:	fba2 2303 	umull	r2, r3, r2, r3
 8000584:	0e1b      	lsrs	r3, r3, #24
 8000586:	617b      	str	r3, [r7, #20]
	int hours = *ms / 3600000;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a29      	ldr	r2, [pc, #164]	@ (8000634 <getTimeFromMS+0xc4>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	0d5b      	lsrs	r3, r3, #21
 8000594:	613b      	str	r3, [r7, #16]
	int minutes = (*ms % 3600000) / 60000;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <getTimeFromMS+0xc4>)
 800059c:	fba3 1302 	umull	r1, r3, r3, r2
 80005a0:	0d5b      	lsrs	r3, r3, #21
 80005a2:	4925      	ldr	r1, [pc, #148]	@ (8000638 <getTimeFromMS+0xc8>)
 80005a4:	fb01 f303 	mul.w	r3, r1, r3
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	4a24      	ldr	r2, [pc, #144]	@ (800063c <getTimeFromMS+0xcc>)
 80005ac:	fba2 2303 	umull	r2, r3, r2, r3
 80005b0:	0b9b      	lsrs	r3, r3, #14
 80005b2:	60fb      	str	r3, [r7, #12]
	int seconds = ((*ms % 3600000) % 60000) / 1000;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <getTimeFromMS+0xc4>)
 80005ba:	fba3 1302 	umull	r1, r3, r3, r2
 80005be:	0d5b      	lsrs	r3, r3, #21
 80005c0:	491d      	ldr	r1, [pc, #116]	@ (8000638 <getTimeFromMS+0xc8>)
 80005c2:	fb01 f303 	mul.w	r3, r1, r3
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	4a1c      	ldr	r2, [pc, #112]	@ (800063c <getTimeFromMS+0xcc>)
 80005ca:	fba2 1203 	umull	r1, r2, r2, r3
 80005ce:	0b92      	lsrs	r2, r2, #14
 80005d0:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80005d4:	fb01 f202 	mul.w	r2, r1, r2
 80005d8:	1a9a      	subs	r2, r3, r2
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <getTimeFromMS+0xd0>)
 80005dc:	fba3 2302 	umull	r2, r3, r3, r2
 80005e0:	099b      	lsrs	r3, r3, #6
 80005e2:	60bb      	str	r3, [r7, #8]
	if(hours > 96) {
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	2b60      	cmp	r3, #96	@ 0x60
 80005e8:	dd07      	ble.n	80005fa <getTimeFromMS+0x8a>
		clock[0] = days;
 80005ea:	697a      	ldr	r2, [r7, #20]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	601a      	str	r2, [r3, #0]
		clock[1] = hours;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	3304      	adds	r3, #4
 80005f4:	693a      	ldr	r2, [r7, #16]
 80005f6:	601a      	str	r2, [r3, #0]
	}
	else if(hours == 0) {
		clock[0] = minutes;
		clock[1] = seconds;
	}
}
 80005f8:	e014      	b.n	8000624 <getTimeFromMS+0xb4>
	else if(hours > 0) {
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dd07      	ble.n	8000610 <getTimeFromMS+0xa0>
		clock[0] = hours;
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	601a      	str	r2, [r3, #0]
		clock[1] = minutes;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	3304      	adds	r3, #4
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	e009      	b.n	8000624 <getTimeFromMS+0xb4>
	else if(hours == 0) {
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d106      	bne.n	8000624 <getTimeFromMS+0xb4>
		clock[0] = minutes;
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	601a      	str	r2, [r3, #0]
		clock[1] = seconds;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	3304      	adds	r3, #4
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	371c      	adds	r7, #28
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	31b5d43b 	.word	0x31b5d43b
 8000634:	95217cb1 	.word	0x95217cb1
 8000638:	0036ee80 	.word	0x0036ee80
 800063c:	45e7b273 	.word	0x45e7b273
 8000640:	10624dd3 	.word	0x10624dd3

08000644 <ApplyNewInterval>:

void ApplyNewInterval() {
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	Interval = NewInterval;
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <ApplyNewInterval+0x18>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <ApplyNewInterval+0x1c>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000024 	.word	0x20000024
 8000660:	20000020 	.word	0x20000020

08000664 <ApplyNewDuration>:

void ApplyNewDuration() {
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	Duration = NewDuration;
 8000668:	4b04      	ldr	r3, [pc, #16]	@ (800067c <ApplyNewDuration+0x18>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <ApplyNewDuration+0x1c>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000030 	.word	0x20000030
 8000680:	2000002c 	.word	0x2000002c

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f000 ffc6 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 fa68 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 faf2 	bl	8000c78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000694:	f000 fac2 	bl	8000c1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000698:	f000 fb48 	bl	8000d2c <ssd1306_Init>
  while (1)
  {
	/* USER CODE BEGIN WHILE */

	  // UP - BEGIN
	  HAL_Delay(100);
 800069c:	2064      	movs	r0, #100	@ 0x64
 800069e:	f001 f82d 	bl	80016fc <HAL_Delay>
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET)
 80006a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a6:	4890      	ldr	r0, [pc, #576]	@ (80008e8 <main+0x264>)
 80006a8:	f001 fab6 	bl	8001c18 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d103      	bne.n	80006ba <main+0x36>
      {
		  pressedUpButton = true;
 80006b2:	4b8e      	ldr	r3, [pc, #568]	@ (80008ec <main+0x268>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
		  continue;
 80006b8:	e23d      	b.n	8000b36 <main+0x4b2>
      }
	  else if (pressedUpButton == true)
 80006ba:	4b8c      	ldr	r3, [pc, #560]	@ (80008ec <main+0x268>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d077      	beq.n	80007b2 <main+0x12e>
	  {
		  pressedUpButton = false;
 80006c2:	4b8a      	ldr	r3, [pc, #552]	@ (80008ec <main+0x268>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]

		  if(setting_option == MENU) {
 80006c8:	4b89      	ldr	r3, [pc, #548]	@ (80008f0 <main+0x26c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d11b      	bne.n	8000708 <main+0x84>
			  if(menu_option > 0) {
 80006d0:	4b88      	ldr	r3, [pc, #544]	@ (80008f4 <main+0x270>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	f000 8227 	beq.w	8000b28 <main+0x4a4>
				  menu_option --;
 80006da:	4b86      	ldr	r3, [pc, #536]	@ (80008f4 <main+0x270>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	4a84      	ldr	r2, [pc, #528]	@ (80008f4 <main+0x270>)
 80006e2:	6013      	str	r3, [r2, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 80006e4:	4b83      	ldr	r3, [pc, #524]	@ (80008f4 <main+0x270>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b83      	ldr	r3, [pc, #524]	@ (80008f8 <main+0x274>)
 80006ec:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80006f0:	4b80      	ldr	r3, [pc, #512]	@ (80008f4 <main+0x270>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a80      	ldr	r2, [pc, #512]	@ (80008f8 <main+0x274>)
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	4413      	add	r3, r2
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	4a7d      	ldr	r2, [pc, #500]	@ (80008f4 <main+0x270>)
 80006fe:	6812      	ldr	r2, [r2, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f000 fdb9 	bl	8001278 <ssd1306_TestMenu>
			  }
			  getTimeFromMS(&Duration, timeBar);
			  ssd1306_TestDurationSetting(timeBar, &Duration);
		  }

		  continue;
 8000706:	e20f      	b.n	8000b28 <main+0x4a4>
		  else if(setting_option == INTERVAL_SETTING) {
 8000708:	4b79      	ldr	r3, [pc, #484]	@ (80008f0 <main+0x26c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d133      	bne.n	8000778 <main+0xf4>
			  if(intervalSection == HOURS) {
 8000710:	4b7a      	ldr	r3, [pc, #488]	@ (80008fc <main+0x278>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d112      	bne.n	800073e <main+0xba>
				  if(Interval + 3600000 <= MaxInterval) {
 8000718:	4b79      	ldr	r3, [pc, #484]	@ (8000900 <main+0x27c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f503 135b 	add.w	r3, r3, #3588096	@ 0x36c000
 8000720:	f503 533a 	add.w	r3, r3, #11904	@ 0x2e80
 8000724:	4a77      	ldr	r2, [pc, #476]	@ (8000904 <main+0x280>)
 8000726:	6812      	ldr	r2, [r2, #0]
 8000728:	4293      	cmp	r3, r2
 800072a:	d81c      	bhi.n	8000766 <main+0xe2>
					  Interval += 3600000;
 800072c:	4b74      	ldr	r3, [pc, #464]	@ (8000900 <main+0x27c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f503 135b 	add.w	r3, r3, #3588096	@ 0x36c000
 8000734:	f503 533a 	add.w	r3, r3, #11904	@ 0x2e80
 8000738:	4a71      	ldr	r2, [pc, #452]	@ (8000900 <main+0x27c>)
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	e013      	b.n	8000766 <main+0xe2>
			  else if(intervalSection == MINUTES) {
 800073e:	4b6f      	ldr	r3, [pc, #444]	@ (80008fc <main+0x278>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d10f      	bne.n	8000766 <main+0xe2>
				  if(Interval + 60000 <= MaxInterval) {
 8000746:	4b6e      	ldr	r3, [pc, #440]	@ (8000900 <main+0x27c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 800074e:	3360      	adds	r3, #96	@ 0x60
 8000750:	4a6c      	ldr	r2, [pc, #432]	@ (8000904 <main+0x280>)
 8000752:	6812      	ldr	r2, [r2, #0]
 8000754:	4293      	cmp	r3, r2
 8000756:	d806      	bhi.n	8000766 <main+0xe2>
					  Interval += 60000;
 8000758:	4b69      	ldr	r3, [pc, #420]	@ (8000900 <main+0x27c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8000760:	3360      	adds	r3, #96	@ 0x60
 8000762:	4a67      	ldr	r2, [pc, #412]	@ (8000900 <main+0x27c>)
 8000764:	6013      	str	r3, [r2, #0]
			  getTimeFromMS(&Interval, timeBar);
 8000766:	4968      	ldr	r1, [pc, #416]	@ (8000908 <main+0x284>)
 8000768:	4865      	ldr	r0, [pc, #404]	@ (8000900 <main+0x27c>)
 800076a:	f7ff ff01 	bl	8000570 <getTimeFromMS>
			  ssd1306_TestIntervalSetting(timeBar, &Interval);
 800076e:	4964      	ldr	r1, [pc, #400]	@ (8000900 <main+0x27c>)
 8000770:	4865      	ldr	r0, [pc, #404]	@ (8000908 <main+0x284>)
 8000772:	f000 fdc7 	bl	8001304 <ssd1306_TestIntervalSetting>
		  continue;
 8000776:	e1d7      	b.n	8000b28 <main+0x4a4>
		  else if(setting_option == DURATION_SETTING) {
 8000778:	4b5d      	ldr	r3, [pc, #372]	@ (80008f0 <main+0x26c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b02      	cmp	r3, #2
 800077e:	f040 81d3 	bne.w	8000b28 <main+0x4a4>
			  if(durationSection == SECONDS) {
 8000782:	4b62      	ldr	r3, [pc, #392]	@ (800090c <main+0x288>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d10a      	bne.n	80007a0 <main+0x11c>
				  if(Duration <= MaxDuration) {
 800078a:	4b61      	ldr	r3, [pc, #388]	@ (8000910 <main+0x28c>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b61      	ldr	r3, [pc, #388]	@ (8000914 <main+0x290>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	d804      	bhi.n	80007a0 <main+0x11c>
					  Duration ++;
 8000796:	4b5e      	ldr	r3, [pc, #376]	@ (8000910 <main+0x28c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	4a5c      	ldr	r2, [pc, #368]	@ (8000910 <main+0x28c>)
 800079e:	6013      	str	r3, [r2, #0]
			  getTimeFromMS(&Duration, timeBar);
 80007a0:	4959      	ldr	r1, [pc, #356]	@ (8000908 <main+0x284>)
 80007a2:	485b      	ldr	r0, [pc, #364]	@ (8000910 <main+0x28c>)
 80007a4:	f7ff fee4 	bl	8000570 <getTimeFromMS>
			  ssd1306_TestDurationSetting(timeBar, &Duration);
 80007a8:	4959      	ldr	r1, [pc, #356]	@ (8000910 <main+0x28c>)
 80007aa:	4857      	ldr	r0, [pc, #348]	@ (8000908 <main+0x284>)
 80007ac:	f000 fe0e 	bl	80013cc <ssd1306_TestDurationSetting>
		  continue;
 80007b0:	e1ba      	b.n	8000b28 <main+0x4a4>
	  }
	  // UP - END

	  // DOWN - BEGIN
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 80007b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b6:	484c      	ldr	r0, [pc, #304]	@ (80008e8 <main+0x264>)
 80007b8:	f001 fa2e 	bl	8001c18 <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d103      	bne.n	80007ca <main+0x146>
      {
		  pressedDownButton = true;
 80007c2:	4b55      	ldr	r3, [pc, #340]	@ (8000918 <main+0x294>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
		  continue;
 80007c8:	e1b5      	b.n	8000b36 <main+0x4b2>
      }
	  else if (pressedDownButton == true)
 80007ca:	4b53      	ldr	r3, [pc, #332]	@ (8000918 <main+0x294>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d05f      	beq.n	8000892 <main+0x20e>
	  {
		  pressedDownButton = false;
 80007d2:	4b51      	ldr	r3, [pc, #324]	@ (8000918 <main+0x294>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]

		  if(setting_option == MENU) {
 80007d8:	4b45      	ldr	r3, [pc, #276]	@ (80008f0 <main+0x26c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d11c      	bne.n	800081a <main+0x196>
			  if(menu_option < MENU_COUNT) {
 80007e0:	4b44      	ldr	r3, [pc, #272]	@ (80008f4 <main+0x270>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2203      	movs	r2, #3
 80007e6:	4293      	cmp	r3, r2
 80007e8:	f080 81a0 	bcs.w	8000b2c <main+0x4a8>
				  menu_option ++;
 80007ec:	4b41      	ldr	r3, [pc, #260]	@ (80008f4 <main+0x270>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a40      	ldr	r2, [pc, #256]	@ (80008f4 <main+0x270>)
 80007f4:	6013      	str	r3, [r2, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 80007f6:	4b3f      	ldr	r3, [pc, #252]	@ (80008f4 <main+0x270>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b3e      	ldr	r3, [pc, #248]	@ (80008f8 <main+0x274>)
 80007fe:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000802:	4b3c      	ldr	r3, [pc, #240]	@ (80008f4 <main+0x270>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a3c      	ldr	r2, [pc, #240]	@ (80008f8 <main+0x274>)
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	4413      	add	r3, r2
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	4a39      	ldr	r2, [pc, #228]	@ (80008f4 <main+0x270>)
 8000810:	6812      	ldr	r2, [r2, #0]
 8000812:	4619      	mov	r1, r3
 8000814:	f000 fd30 	bl	8001278 <ssd1306_TestMenu>
			  }
			  getTimeFromMS(&Duration, timeBar);
			  ssd1306_TestDurationSetting(timeBar, &Duration);
		  }

		  continue;
 8000818:	e188      	b.n	8000b2c <main+0x4a8>
		  else if(setting_option == INTERVAL_SETTING) {
 800081a:	4b35      	ldr	r3, [pc, #212]	@ (80008f0 <main+0x26c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d120      	bne.n	8000864 <main+0x1e0>
			  if(intervalSection == HOURS) {
 8000822:	4b36      	ldr	r3, [pc, #216]	@ (80008fc <main+0x278>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d108      	bne.n	800083c <main+0x1b8>
					  Interval -= 3600000;
 800082a:	4b35      	ldr	r3, [pc, #212]	@ (8000900 <main+0x27c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f5a3 135b 	sub.w	r3, r3, #3588096	@ 0x36c000
 8000832:	f5a3 533a 	sub.w	r3, r3, #11904	@ 0x2e80
 8000836:	4a32      	ldr	r2, [pc, #200]	@ (8000900 <main+0x27c>)
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	e00a      	b.n	8000852 <main+0x1ce>
			  else if(intervalSection == MINUTES) {
 800083c:	4b2f      	ldr	r3, [pc, #188]	@ (80008fc <main+0x278>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d106      	bne.n	8000852 <main+0x1ce>
					  Interval -= 60000;
 8000844:	4b2e      	ldr	r3, [pc, #184]	@ (8000900 <main+0x27c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 800084c:	3b60      	subs	r3, #96	@ 0x60
 800084e:	4a2c      	ldr	r2, [pc, #176]	@ (8000900 <main+0x27c>)
 8000850:	6013      	str	r3, [r2, #0]
			  getTimeFromMS(&Interval, timeBar);
 8000852:	492d      	ldr	r1, [pc, #180]	@ (8000908 <main+0x284>)
 8000854:	482a      	ldr	r0, [pc, #168]	@ (8000900 <main+0x27c>)
 8000856:	f7ff fe8b 	bl	8000570 <getTimeFromMS>
			  ssd1306_TestIntervalSetting(timeBar, &Interval);
 800085a:	4929      	ldr	r1, [pc, #164]	@ (8000900 <main+0x27c>)
 800085c:	482a      	ldr	r0, [pc, #168]	@ (8000908 <main+0x284>)
 800085e:	f000 fd51 	bl	8001304 <ssd1306_TestIntervalSetting>
		  continue;
 8000862:	e163      	b.n	8000b2c <main+0x4a8>
		  else if(setting_option == DURATION_SETTING) {
 8000864:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <main+0x26c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b02      	cmp	r3, #2
 800086a:	f040 815f 	bne.w	8000b2c <main+0x4a8>
			  if(durationSection == SECONDS) {
 800086e:	4b27      	ldr	r3, [pc, #156]	@ (800090c <main+0x288>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d104      	bne.n	8000880 <main+0x1fc>
					  Duration --;
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <main+0x28c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	4a24      	ldr	r2, [pc, #144]	@ (8000910 <main+0x28c>)
 800087e:	6013      	str	r3, [r2, #0]
			  getTimeFromMS(&Duration, timeBar);
 8000880:	4921      	ldr	r1, [pc, #132]	@ (8000908 <main+0x284>)
 8000882:	4823      	ldr	r0, [pc, #140]	@ (8000910 <main+0x28c>)
 8000884:	f7ff fe74 	bl	8000570 <getTimeFromMS>
			  ssd1306_TestDurationSetting(timeBar, &Duration);
 8000888:	4921      	ldr	r1, [pc, #132]	@ (8000910 <main+0x28c>)
 800088a:	481f      	ldr	r0, [pc, #124]	@ (8000908 <main+0x284>)
 800088c:	f000 fd9e 	bl	80013cc <ssd1306_TestDurationSetting>
		  continue;
 8000890:	e14c      	b.n	8000b2c <main+0x4a8>
	  }
	  // DOWN - END

	  // LEFT (BACK) - BEGIN
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000892:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000896:	4814      	ldr	r0, [pc, #80]	@ (80008e8 <main+0x264>)
 8000898:	f001 f9be 	bl	8001c18 <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d103      	bne.n	80008aa <main+0x226>
      {
		  pressedLeftButton = true;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <main+0x298>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
		  continue;
 80008a8:	e145      	b.n	8000b36 <main+0x4b2>
      }
	  else if (pressedLeftButton == true)
 80008aa:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <main+0x298>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d07d      	beq.n	80009ae <main+0x32a>
	  {
		  pressedLeftButton = false;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <main+0x298>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]

		  if(setting_option == MENU) {
 80008b8:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <main+0x26c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f000 8137 	beq.w	8000b30 <main+0x4ac>
			  // nothing
		  }
		  else if(setting_option == INTERVAL_SETTING) {
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <main+0x26c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d144      	bne.n	8000954 <main+0x2d0>
			  if(intervalSection > 0) {
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <main+0x278>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d026      	beq.n	8000920 <main+0x29c>
				  *intervalSection--;
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <main+0x278>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <main+0x278>)
 80008da:	6013      	str	r3, [r2, #0]
				  ssd1306_TestIntervalSetting(timeBar, &Interval);
 80008dc:	4908      	ldr	r1, [pc, #32]	@ (8000900 <main+0x27c>)
 80008de:	480a      	ldr	r0, [pc, #40]	@ (8000908 <main+0x284>)
 80008e0:	f000 fd10 	bl	8001304 <ssd1306_TestIntervalSetting>
				  *setting_option = MENU;
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
			  }
		  }

		  continue;
 80008e4:	e124      	b.n	8000b30 <main+0x4ac>
 80008e6:	bf00      	nop
 80008e8:	40020400 	.word	0x40020400
 80008ec:	20000114 	.word	0x20000114
 80008f0:	20000110 	.word	0x20000110
 80008f4:	2000010c 	.word	0x2000010c
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000524 	.word	0x20000524
 8000900:	20000020 	.word	0x20000020
 8000904:	20000028 	.word	0x20000028
 8000908:	20000038 	.word	0x20000038
 800090c:	20000528 	.word	0x20000528
 8000910:	2000002c 	.word	0x2000002c
 8000914:	20000034 	.word	0x20000034
 8000918:	20000115 	.word	0x20000115
 800091c:	20000116 	.word	0x20000116
				  *intervalSection = HOURS;
 8000920:	4b85      	ldr	r3, [pc, #532]	@ (8000b38 <main+0x4b4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
				  *setting_option = MENU;
 8000928:	4b84      	ldr	r3, [pc, #528]	@ (8000b3c <main+0x4b8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000930:	4b83      	ldr	r3, [pc, #524]	@ (8000b40 <main+0x4bc>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b83      	ldr	r3, [pc, #524]	@ (8000b44 <main+0x4c0>)
 8000938:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800093c:	4b80      	ldr	r3, [pc, #512]	@ (8000b40 <main+0x4bc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a80      	ldr	r2, [pc, #512]	@ (8000b44 <main+0x4c0>)
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	4413      	add	r3, r2
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4a7d      	ldr	r2, [pc, #500]	@ (8000b40 <main+0x4bc>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f000 fc93 	bl	8001278 <ssd1306_TestMenu>
		  continue;
 8000952:	e0ed      	b.n	8000b30 <main+0x4ac>
		  else if(setting_option == DURATION_SETTING) {
 8000954:	4b79      	ldr	r3, [pc, #484]	@ (8000b3c <main+0x4b8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b02      	cmp	r3, #2
 800095a:	f040 80e9 	bne.w	8000b30 <main+0x4ac>
			  if(durationSection > 0) {
 800095e:	4b7a      	ldr	r3, [pc, #488]	@ (8000b48 <main+0x4c4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d009      	beq.n	800097a <main+0x2f6>
				  *durationSection--;
 8000966:	4b78      	ldr	r3, [pc, #480]	@ (8000b48 <main+0x4c4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3b01      	subs	r3, #1
 800096c:	4a76      	ldr	r2, [pc, #472]	@ (8000b48 <main+0x4c4>)
 800096e:	6013      	str	r3, [r2, #0]
				  ssd1306_TestIntervalSetting(timeBar, &Interval);
 8000970:	4976      	ldr	r1, [pc, #472]	@ (8000b4c <main+0x4c8>)
 8000972:	4877      	ldr	r0, [pc, #476]	@ (8000b50 <main+0x4cc>)
 8000974:	f000 fcc6 	bl	8001304 <ssd1306_TestIntervalSetting>
		  continue;
 8000978:	e0da      	b.n	8000b30 <main+0x4ac>
				  *durationSection = SECONDS;
 800097a:	4b73      	ldr	r3, [pc, #460]	@ (8000b48 <main+0x4c4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
				  *setting_option = MENU;
 8000982:	4b6e      	ldr	r3, [pc, #440]	@ (8000b3c <main+0x4b8>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 800098a:	4b6d      	ldr	r3, [pc, #436]	@ (8000b40 <main+0x4bc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	4b6c      	ldr	r3, [pc, #432]	@ (8000b44 <main+0x4c0>)
 8000992:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000996:	4b6a      	ldr	r3, [pc, #424]	@ (8000b40 <main+0x4bc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a6a      	ldr	r2, [pc, #424]	@ (8000b44 <main+0x4c0>)
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	4413      	add	r3, r2
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	4a67      	ldr	r2, [pc, #412]	@ (8000b40 <main+0x4bc>)
 80009a4:	6812      	ldr	r2, [r2, #0]
 80009a6:	4619      	mov	r1, r3
 80009a8:	f000 fc66 	bl	8001278 <ssd1306_TestMenu>
		  continue;
 80009ac:	e0c0      	b.n	8000b30 <main+0x4ac>
	  }
	  // LEFT (BACK) - END

	  // RIGHT (OKAY) - BEGIN
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET)
 80009ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009b2:	4868      	ldr	r0, [pc, #416]	@ (8000b54 <main+0x4d0>)
 80009b4:	f001 f930 	bl	8001c18 <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <main+0x342>
      {
		  pressedRightButton = true;
 80009be:	4b66      	ldr	r3, [pc, #408]	@ (8000b58 <main+0x4d4>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
		  continue;
 80009c4:	e0b7      	b.n	8000b36 <main+0x4b2>
      }
	  else if (pressedRightButton == true)
 80009c6:	4b64      	ldr	r3, [pc, #400]	@ (8000b58 <main+0x4d4>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 809b 	beq.w	8000b06 <main+0x482>
	  {
		  pressedRightButton = false;
 80009d0:	4b61      	ldr	r3, [pc, #388]	@ (8000b58 <main+0x4d4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]

		  if(setting_option == MENU) {
 80009d6:	4b59      	ldr	r3, [pc, #356]	@ (8000b3c <main+0x4b8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d137      	bne.n	8000a4e <main+0x3ca>

			  if(menu_option == OFF) {
 80009de:	4b58      	ldr	r3, [pc, #352]	@ (8000b40 <main+0x4bc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e6:	d115      	bne.n	8000a14 <main+0x390>
				  *menu_option = READY;
 80009e8:	4b55      	ldr	r3, [pc, #340]	@ (8000b40 <main+0x4bc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 80009f0:	4b53      	ldr	r3, [pc, #332]	@ (8000b40 <main+0x4bc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b53      	ldr	r3, [pc, #332]	@ (8000b44 <main+0x4c0>)
 80009f8:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80009fc:	4b50      	ldr	r3, [pc, #320]	@ (8000b40 <main+0x4bc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a50      	ldr	r2, [pc, #320]	@ (8000b44 <main+0x4c0>)
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	4413      	add	r3, r2
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4a4d      	ldr	r2, [pc, #308]	@ (8000b40 <main+0x4bc>)
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f000 fc33 	bl	8001278 <ssd1306_TestMenu>
				  *setting_option = MENU;
				  ApplyNewDuration();
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
			  }
		  }
		  continue;
 8000a12:	e08f      	b.n	8000b34 <main+0x4b0>
			  else if(menu_option == READY) {
 8000a14:	4b4a      	ldr	r3, [pc, #296]	@ (8000b40 <main+0x4bc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d106      	bne.n	8000a2a <main+0x3a6>
				  *menu_option = OFF;
 8000a1c:	4b48      	ldr	r3, [pc, #288]	@ (8000b40 <main+0x4bc>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	22ff      	movs	r2, #255	@ 0xff
 8000a22:	701a      	strb	r2, [r3, #0]
				  ssd1306_TurnOff();
 8000a24:	f000 fcdd 	bl	80013e2 <ssd1306_TurnOff>
		  continue;
 8000a28:	e084      	b.n	8000b34 <main+0x4b0>
			  else if(menu_option == INTERVAL) {
 8000a2a:	4b45      	ldr	r3, [pc, #276]	@ (8000b40 <main+0x4bc>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d104      	bne.n	8000a3c <main+0x3b8>
				  *setting_option = INTERVAL_SETTING;
 8000a32:	4b42      	ldr	r3, [pc, #264]	@ (8000b3c <main+0x4b8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
		  continue;
 8000a3a:	e07b      	b.n	8000b34 <main+0x4b0>
			  else if(menu_option == DURATION) {
 8000a3c:	4b40      	ldr	r3, [pc, #256]	@ (8000b40 <main+0x4bc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d177      	bne.n	8000b34 <main+0x4b0>
				  *setting_option = DURATION_SETTING;
 8000a44:	4b3d      	ldr	r3, [pc, #244]	@ (8000b3c <main+0x4b8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2202      	movs	r2, #2
 8000a4a:	701a      	strb	r2, [r3, #0]
		  continue;
 8000a4c:	e072      	b.n	8000b34 <main+0x4b0>
		  else if(setting_option == INTERVAL_SETTING) {
 8000a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b3c <main+0x4b8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d129      	bne.n	8000aaa <main+0x426>
			  if(intervalSection < 2) {
 8000a56:	4b38      	ldr	r3, [pc, #224]	@ (8000b38 <main+0x4b4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d809      	bhi.n	8000a72 <main+0x3ee>
				  *intervalSection++;
 8000a5e:	4b36      	ldr	r3, [pc, #216]	@ (8000b38 <main+0x4b4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	4a34      	ldr	r2, [pc, #208]	@ (8000b38 <main+0x4b4>)
 8000a66:	6013      	str	r3, [r2, #0]
				  ssd1306_TestIntervalSetting(timeBar, &Interval);
 8000a68:	4938      	ldr	r1, [pc, #224]	@ (8000b4c <main+0x4c8>)
 8000a6a:	4839      	ldr	r0, [pc, #228]	@ (8000b50 <main+0x4cc>)
 8000a6c:	f000 fc4a 	bl	8001304 <ssd1306_TestIntervalSetting>
		  continue;
 8000a70:	e060      	b.n	8000b34 <main+0x4b0>
				  *intervalSection = HOURS;
 8000a72:	4b31      	ldr	r3, [pc, #196]	@ (8000b38 <main+0x4b4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
				  *setting_option = MENU;
 8000a7a:	4b30      	ldr	r3, [pc, #192]	@ (8000b3c <main+0x4b8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
				  ApplyNewInterval();
 8000a82:	f7ff fddf 	bl	8000644 <ApplyNewInterval>
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000a86:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <main+0x4bc>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <main+0x4c0>)
 8000a8e:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000a92:	4b2b      	ldr	r3, [pc, #172]	@ (8000b40 <main+0x4bc>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a2b      	ldr	r2, [pc, #172]	@ (8000b44 <main+0x4c0>)
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	4413      	add	r3, r2
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	4a28      	ldr	r2, [pc, #160]	@ (8000b40 <main+0x4bc>)
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f000 fbe8 	bl	8001278 <ssd1306_TestMenu>
		  continue;
 8000aa8:	e044      	b.n	8000b34 <main+0x4b0>
		  else if(setting_option == DURATION_SETTING) {
 8000aaa:	4b24      	ldr	r3, [pc, #144]	@ (8000b3c <main+0x4b8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d140      	bne.n	8000b34 <main+0x4b0>
			  if(durationSection < 1) {
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <main+0x4c4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d109      	bne.n	8000ace <main+0x44a>
				  *durationSection++;
 8000aba:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <main+0x4c4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a21      	ldr	r2, [pc, #132]	@ (8000b48 <main+0x4c4>)
 8000ac2:	6013      	str	r3, [r2, #0]
				  ssd1306_TestIntervalSetting(timeBar, &Interval);
 8000ac4:	4921      	ldr	r1, [pc, #132]	@ (8000b4c <main+0x4c8>)
 8000ac6:	4822      	ldr	r0, [pc, #136]	@ (8000b50 <main+0x4cc>)
 8000ac8:	f000 fc1c 	bl	8001304 <ssd1306_TestIntervalSetting>
		  continue;
 8000acc:	e032      	b.n	8000b34 <main+0x4b0>
				  *durationSection = SECONDS;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <main+0x4c4>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
				  *setting_option = MENU;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <main+0x4b8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
				  ApplyNewDuration();
 8000ade:	f7ff fdc1 	bl	8000664 <ApplyNewDuration>
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <main+0x4bc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <main+0x4c0>)
 8000aea:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <main+0x4bc>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <main+0x4c0>)
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	4413      	add	r3, r2
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	4a11      	ldr	r2, [pc, #68]	@ (8000b40 <main+0x4bc>)
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	f000 fbba 	bl	8001278 <ssd1306_TestMenu>
		  continue;
 8000b04:	e016      	b.n	8000b34 <main+0x4b0>
	  }
	  // RIGHT (OKAY) - END

	  if(DisplayShutDownTime == 199) {
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <main+0x4d8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8000b0c:	d101      	bne.n	8000b12 <main+0x48e>
		  ssd1306_TurnOff();
 8000b0e:	f000 fc68 	bl	80013e2 <ssd1306_TurnOff>
	  }
	  if(DisplayShutDownTime < 200) {
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <main+0x4d8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2bc7      	cmp	r3, #199	@ 0xc7
 8000b18:	f73f adc0 	bgt.w	800069c <main+0x18>
		  DisplayShutDownTime++;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <main+0x4d8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <main+0x4d8>)
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e5b9      	b.n	800069c <main+0x18>
		  continue;
 8000b28:	bf00      	nop
 8000b2a:	e5b7      	b.n	800069c <main+0x18>
		  continue;
 8000b2c:	bf00      	nop
 8000b2e:	e5b5      	b.n	800069c <main+0x18>
		  continue;
 8000b30:	bf00      	nop
 8000b32:	e5b3      	b.n	800069c <main+0x18>
		  continue;
 8000b34:	bf00      	nop
	  HAL_Delay(100);
 8000b36:	e5b1      	b.n	800069c <main+0x18>
 8000b38:	20000524 	.word	0x20000524
 8000b3c:	20000110 	.word	0x20000110
 8000b40:	2000010c 	.word	0x2000010c
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000528 	.word	0x20000528
 8000b4c:	20000020 	.word	0x20000020
 8000b50:	20000038 	.word	0x20000038
 8000b54:	40020400 	.word	0x40020400
 8000b58:	20000117 	.word	0x20000117
 8000b5c:	20000118 	.word	0x20000118

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b094      	sub	sp, #80	@ 0x50
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	2230      	movs	r2, #48	@ 0x30
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 f996 	bl	8002ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <SystemClock_Config+0xb4>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <SystemClock_Config+0xb4>)
 8000b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <SystemClock_Config+0xb4>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <SystemClock_Config+0xb8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c18 <SystemClock_Config+0xb8>)
 8000baa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <SystemClock_Config+0xb8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fce7 	bl	80025a4 <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000bdc:	f000 f866 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 ff4a 	bl	8002a94 <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c06:	f000 f851 	bl	8000cac <Error_Handler>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3750      	adds	r7, #80	@ 0x50
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40007000 	.word	0x40007000

08000c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c22:	4a13      	ldr	r2, [pc, #76]	@ (8000c70 <MX_I2C1_Init+0x54>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c28:	4a12      	ldr	r2, [pc, #72]	@ (8000c74 <MX_I2C1_Init+0x58>)
 8000c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c5a:	f000 fff5 	bl	8001c48 <HAL_I2C_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c64:	f000 f822 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000b8 	.word	0x200000b8
 8000c70:	40005400 	.word	0x40005400
 8000c74:	00061a80 	.word	0x00061a80

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_GPIO_Init+0x30>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a08      	ldr	r2, [pc, #32]	@ (8000ca8 <MX_GPIO_Init+0x30>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MX_GPIO_Init+0x30>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af04      	add	r7, sp, #16
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2178      	movs	r1, #120	@ 0x78
 8000ce6:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <ssd1306_WriteCommand+0x2c>)
 8000ce8:	f001 f8f2 	bl	8001ed0 <HAL_I2C_Mem_Write>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200000b8 	.word	0x200000b8

08000cf8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af04      	add	r7, sp, #16
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0a:	9202      	str	r2, [sp, #8]
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2301      	movs	r3, #1
 8000d14:	2240      	movs	r2, #64	@ 0x40
 8000d16:	2178      	movs	r1, #120	@ 0x78
 8000d18:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <ssd1306_WriteData+0x30>)
 8000d1a:	f001 f8d9 	bl	8001ed0 <HAL_I2C_Mem_Write>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000b8 	.word	0x200000b8

08000d2c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000d30:	f7ff ffc2 	bl	8000cb8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000d34:	2064      	movs	r0, #100	@ 0x64
 8000d36:	f000 fce1 	bl	80016fc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 fa7e 	bl	800123c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000d40:	2020      	movs	r0, #32
 8000d42:	f7ff ffc1 	bl	8000cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff ffbe 	bl	8000cc8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d4c:	20b0      	movs	r0, #176	@ 0xb0
 8000d4e:	f7ff ffbb 	bl	8000cc8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000d52:	20c8      	movs	r0, #200	@ 0xc8
 8000d54:	f7ff ffb8 	bl	8000cc8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff ffb5 	bl	8000cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000d5e:	2010      	movs	r0, #16
 8000d60:	f7ff ffb2 	bl	8000cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000d64:	2040      	movs	r0, #64	@ 0x40
 8000d66:	f7ff ffaf 	bl	8000cc8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000d6a:	20ff      	movs	r0, #255	@ 0xff
 8000d6c:	f000 fa53 	bl	8001216 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000d70:	20a1      	movs	r0, #161	@ 0xa1
 8000d72:	f7ff ffa9 	bl	8000cc8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000d76:	20a6      	movs	r0, #166	@ 0xa6
 8000d78:	f7ff ffa6 	bl	8000cc8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000d7c:	20a8      	movs	r0, #168	@ 0xa8
 8000d7e:	f7ff ffa3 	bl	8000cc8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000d82:	203f      	movs	r0, #63	@ 0x3f
 8000d84:	f7ff ffa0 	bl	8000cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d88:	20a4      	movs	r0, #164	@ 0xa4
 8000d8a:	f7ff ff9d 	bl	8000cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000d8e:	20d3      	movs	r0, #211	@ 0xd3
 8000d90:	f7ff ff9a 	bl	8000cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff ff97 	bl	8000cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d9a:	20d5      	movs	r0, #213	@ 0xd5
 8000d9c:	f7ff ff94 	bl	8000cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000da0:	20f0      	movs	r0, #240	@ 0xf0
 8000da2:	f7ff ff91 	bl	8000cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000da6:	20d9      	movs	r0, #217	@ 0xd9
 8000da8:	f7ff ff8e 	bl	8000cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000dac:	2022      	movs	r0, #34	@ 0x22
 8000dae:	f7ff ff8b 	bl	8000cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000db2:	20da      	movs	r0, #218	@ 0xda
 8000db4:	f7ff ff88 	bl	8000cc8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000db8:	2012      	movs	r0, #18
 8000dba:	f7ff ff85 	bl	8000cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000dbe:	20db      	movs	r0, #219	@ 0xdb
 8000dc0:	f7ff ff82 	bl	8000cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000dc4:	2020      	movs	r0, #32
 8000dc6:	f7ff ff7f 	bl	8000cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000dca:	208d      	movs	r0, #141	@ 0x8d
 8000dcc:	f7ff ff7c 	bl	8000cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000dd0:	2014      	movs	r0, #20
 8000dd2:	f7ff ff79 	bl	8000cc8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f000 fa30 	bl	800123c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f80f 	bl	8000e00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000de2:	f000 f825 	bl	8000e30 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <ssd1306_Init+0xd0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <ssd1306_Init+0xd0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000df2:	4b02      	ldr	r3, [pc, #8]	@ (8000dfc <ssd1306_Init+0xd0>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	711a      	strb	r2, [r3, #4]
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2000051c 	.word	0x2000051c

08000e00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <ssd1306_Fill+0x14>
 8000e10:	2300      	movs	r3, #0
 8000e12:	e000      	b.n	8000e16 <ssd1306_Fill+0x16>
 8000e14:	23ff      	movs	r3, #255	@ 0xff
 8000e16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4803      	ldr	r0, [pc, #12]	@ (8000e2c <ssd1306_Fill+0x2c>)
 8000e1e:	f002 f83f 	bl	8002ea0 <memset>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000011c 	.word	0x2000011c

08000e30 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	e016      	b.n	8000e6a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	3b50      	subs	r3, #80	@ 0x50
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff40 	bl	8000cc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff ff3d 	bl	8000cc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000e4e:	2010      	movs	r0, #16
 8000e50:	f7ff ff3a 	bl	8000cc8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	01db      	lsls	r3, r3, #7
 8000e58:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <ssd1306_UpdateScreen+0x4c>)
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2180      	movs	r1, #128	@ 0x80
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff4a 	bl	8000cf8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3301      	adds	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b07      	cmp	r3, #7
 8000e6e:	d9e5      	bls.n	8000e3c <ssd1306_UpdateScreen+0xc>
    }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000011c 	.word	0x2000011c

08000e80 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	71bb      	strb	r3, [r7, #6]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db3d      	blt.n	8000f16 <ssd1306_DrawPixel+0x96>
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e9e:	d83a      	bhi.n	8000f16 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000ea0:	797b      	ldrb	r3, [r7, #5]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d11a      	bne.n	8000edc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ea6:	79fa      	ldrb	r2, [r7, #7]
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	b2d8      	uxtb	r0, r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	01db      	lsls	r3, r3, #7
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f24 <ssd1306_DrawPixel+0xa4>)
 8000eb6:	5cd3      	ldrb	r3, [r2, r3]
 8000eb8:	b25a      	sxtb	r2, r3
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b259      	sxtb	r1, r3
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	4603      	mov	r3, r0
 8000ed0:	01db      	lsls	r3, r3, #7
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b2c9      	uxtb	r1, r1
 8000ed6:	4a13      	ldr	r2, [pc, #76]	@ (8000f24 <ssd1306_DrawPixel+0xa4>)
 8000ed8:	54d1      	strb	r1, [r2, r3]
 8000eda:	e01d      	b.n	8000f18 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000edc:	79fa      	ldrb	r2, [r7, #7]
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	b2d8      	uxtb	r0, r3
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	01db      	lsls	r3, r3, #7
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <ssd1306_DrawPixel+0xa4>)
 8000eec:	5cd3      	ldrb	r3, [r2, r3]
 8000eee:	b25a      	sxtb	r2, r3
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	4013      	ands	r3, r2
 8000f04:	b259      	sxtb	r1, r3
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	4603      	mov	r3, r0
 8000f0a:	01db      	lsls	r3, r3, #7
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b2c9      	uxtb	r1, r1
 8000f10:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <ssd1306_DrawPixel+0xa4>)
 8000f12:	54d1      	strb	r1, [r2, r3]
 8000f14:	e000      	b.n	8000f18 <ssd1306_DrawPixel+0x98>
        return;
 8000f16:	bf00      	nop
    }
}
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2000011c 	.word	0x2000011c

08000f28 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4638      	mov	r0, r7
 8000f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f36:	4623      	mov	r3, r4
 8000f38:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	2b1f      	cmp	r3, #31
 8000f3e:	d902      	bls.n	8000f46 <ssd1306_WriteChar+0x1e>
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f44:	d901      	bls.n	8000f4a <ssd1306_WriteChar+0x22>
        return 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e077      	b.n	800103a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001044 <ssd1306_WriteChar+0x11c>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	783b      	ldrb	r3, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	2b80      	cmp	r3, #128	@ 0x80
 8000f56:	dc06      	bgt.n	8000f66 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000f58:	4b3a      	ldr	r3, [pc, #232]	@ (8001044 <ssd1306_WriteChar+0x11c>)
 8000f5a:	885b      	ldrh	r3, [r3, #2]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	787b      	ldrb	r3, [r7, #1]
 8000f60:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000f62:	2b40      	cmp	r3, #64	@ 0x40
 8000f64:	dd01      	ble.n	8000f6a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e067      	b.n	800103a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e04e      	b.n	800100e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	3b20      	subs	r3, #32
 8000f76:	7879      	ldrb	r1, [r7, #1]
 8000f78:	fb01 f303 	mul.w	r3, r1, r3
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	440b      	add	r3, r1
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	e036      	b.n	8000ffe <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000fa0:	4b28      	ldr	r3, [pc, #160]	@ (8001044 <ssd1306_WriteChar+0x11c>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4413      	add	r3, r2
 8000fac:	b2d8      	uxtb	r0, r3
 8000fae:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <ssd1306_WriteChar+0x11c>)
 8000fb0:	885b      	ldrh	r3, [r3, #2]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <ssd1306_DrawPixel>
 8000fc6:	e017      	b.n	8000ff8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <ssd1306_WriteChar+0x11c>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b2d8      	uxtb	r0, r3
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <ssd1306_WriteChar+0x11c>)
 8000fd8:	885b      	ldrh	r3, [r3, #2]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2d9      	uxtb	r1, r3
 8000fe4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf0c      	ite	eq
 8000fec:	2301      	moveq	r3, #1
 8000fee:	2300      	movne	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f7ff ff44 	bl	8000e80 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	783b      	ldrb	r3, [r7, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4293      	cmp	r3, r2
 8001006:	d3c3      	bcc.n	8000f90 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	3301      	adds	r3, #1
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	787b      	ldrb	r3, [r7, #1]
 8001010:	461a      	mov	r2, r3
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	4293      	cmp	r3, r2
 8001016:	d3ab      	bcc.n	8000f70 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <ssd1306_WriteChar+0x11c>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	2a00      	cmp	r2, #0
 8001020:	d005      	beq.n	800102e <ssd1306_WriteChar+0x106>
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	3a20      	subs	r2, #32
 8001028:	440a      	add	r2, r1
 800102a:	7812      	ldrb	r2, [r2, #0]
 800102c:	e000      	b.n	8001030 <ssd1306_WriteChar+0x108>
 800102e:	783a      	ldrb	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <ssd1306_WriteChar+0x11c>)
 8001036:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	@ 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}
 8001042:	bf00      	nop
 8001044:	2000051c 	.word	0x2000051c

08001048 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	4638      	mov	r0, r7
 8001052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001056:	e013      	b.n	8001080 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	7818      	ldrb	r0, [r3, #0]
 800105c:	7e3b      	ldrb	r3, [r7, #24]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	463b      	mov	r3, r7
 8001062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001064:	f7ff ff60 	bl	8000f28 <ssd1306_WriteChar>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d002      	beq.n	800107a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	e008      	b.n	800108c <ssd1306_WriteString+0x44>
        }
        str++;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1e7      	bne.n	8001058 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	781b      	ldrb	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	460a      	mov	r2, r1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <ssd1306_SetCursor+0x2c>)
 80010aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <ssd1306_SetCursor+0x2c>)
 80010b2:	805a      	strh	r2, [r3, #2]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	2000051c 	.word	0x2000051c

080010c4 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4604      	mov	r4, r0
 80010cc:	4608      	mov	r0, r1
 80010ce:	4611      	mov	r1, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	4623      	mov	r3, r4
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	4603      	mov	r3, r0
 80010d8:	71bb      	strb	r3, [r7, #6]
 80010da:	460b      	mov	r3, r1
 80010dc:	717b      	strb	r3, [r7, #5]
 80010de:	4613      	mov	r3, r2
 80010e0:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80010e2:	79fa      	ldrb	r2, [r7, #7]
 80010e4:	797b      	ldrb	r3, [r7, #5]
 80010e6:	4293      	cmp	r3, r2
 80010e8:	bf28      	it	cs
 80010ea:	4613      	movcs	r3, r2
 80010ec:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80010ee:	797a      	ldrb	r2, [r7, #5]
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	4293      	cmp	r3, r2
 80010f4:	bf38      	it	cc
 80010f6:	4613      	movcc	r3, r2
 80010f8:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80010fa:	79ba      	ldrb	r2, [r7, #6]
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	4293      	cmp	r3, r2
 8001100:	bf28      	it	cs
 8001102:	4613      	movcs	r3, r2
 8001104:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001106:	793a      	ldrb	r2, [r7, #4]
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	4293      	cmp	r3, r2
 800110c:	bf38      	it	cc
 800110e:	4613      	movcc	r3, r2
 8001110:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e017      	b.n	8001148 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001118:	7b7b      	ldrb	r3, [r7, #13]
 800111a:	73bb      	strb	r3, [r7, #14]
 800111c:	e009      	b.n	8001132 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 800111e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001122:	7bf9      	ldrb	r1, [r7, #15]
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff feaa 	bl	8000e80 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	3301      	adds	r3, #1
 8001130:	73bb      	strb	r3, [r7, #14]
 8001132:	7bba      	ldrb	r2, [r7, #14]
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	429a      	cmp	r2, r3
 8001138:	d803      	bhi.n	8001142 <ssd1306_FillRectangle+0x7e>
 800113a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800113e:	2b00      	cmp	r3, #0
 8001140:	daed      	bge.n	800111e <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	3301      	adds	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	7abb      	ldrb	r3, [r7, #10]
 800114c:	429a      	cmp	r2, r3
 800114e:	d803      	bhi.n	8001158 <ssd1306_FillRectangle+0x94>
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b3f      	cmp	r3, #63	@ 0x3f
 8001154:	d9e0      	bls.n	8001118 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001156:	bf00      	nop
 8001158:	bf00      	nop
}
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}

08001160 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	603a      	str	r2, [r7, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	460b      	mov	r3, r1
 8001170:	71bb      	strb	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001176:	797b      	ldrb	r3, [r7, #5]
 8001178:	3307      	adds	r3, #7
 800117a:	2b00      	cmp	r3, #0
 800117c:	da00      	bge.n	8001180 <ssd1306_DrawBitmap+0x20>
 800117e:	3307      	adds	r3, #7
 8001180:	10db      	asrs	r3, r3, #3
 8001182:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db3e      	blt.n	800120e <ssd1306_DrawBitmap+0xae>
 8001190:	79bb      	ldrb	r3, [r7, #6]
 8001192:	2b3f      	cmp	r3, #63	@ 0x3f
 8001194:	d83b      	bhi.n	800120e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001196:	2300      	movs	r3, #0
 8001198:	73bb      	strb	r3, [r7, #14]
 800119a:	e033      	b.n	8001204 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800119c:	2300      	movs	r3, #0
 800119e:	737b      	strb	r3, [r7, #13]
 80011a0:	e026      	b.n	80011f0 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80011a2:	7b7b      	ldrb	r3, [r7, #13]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	e00d      	b.n	80011d0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80011b4:	7bbb      	ldrb	r3, [r7, #14]
 80011b6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	7b7a      	ldrb	r2, [r7, #13]
 80011c0:	08d2      	lsrs	r2, r2, #3
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	4413      	add	r3, r2
 80011c6:	461a      	mov	r2, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80011d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	da08      	bge.n	80011ea <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	7b7b      	ldrb	r3, [r7, #13]
 80011dc:	4413      	add	r3, r2
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	7f3a      	ldrb	r2, [r7, #28]
 80011e2:	79b9      	ldrb	r1, [r7, #6]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fe4b 	bl	8000e80 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80011ea:	7b7b      	ldrb	r3, [r7, #13]
 80011ec:	3301      	adds	r3, #1
 80011ee:	737b      	strb	r3, [r7, #13]
 80011f0:	7b7a      	ldrb	r2, [r7, #13]
 80011f2:	797b      	ldrb	r3, [r7, #5]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3d4      	bcc.n	80011a2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
 80011fa:	3301      	adds	r3, #1
 80011fc:	73bb      	strb	r3, [r7, #14]
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	3301      	adds	r3, #1
 8001202:	71bb      	strb	r3, [r7, #6]
 8001204:	7bba      	ldrb	r2, [r7, #14]
 8001206:	7e3b      	ldrb	r3, [r7, #24]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3c7      	bcc.n	800119c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800120c:	e000      	b.n	8001210 <ssd1306_DrawBitmap+0xb0>
        return;
 800120e:	bf00      	nop
}
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001220:	2381      	movs	r3, #129	@ 0x81
 8001222:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fd4e 	bl	8000cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fd4a 	bl	8000cc8 <ssd1306_WriteCommand>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800124c:	23af      	movs	r3, #175	@ 0xaf
 800124e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <ssd1306_SetDisplayOn+0x38>)
 8001252:	2201      	movs	r2, #1
 8001254:	715a      	strb	r2, [r3, #5]
 8001256:	e004      	b.n	8001262 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001258:	23ae      	movs	r3, #174	@ 0xae
 800125a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <ssd1306_SetDisplayOn+0x38>)
 800125e:	2200      	movs	r2, #0
 8001260:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fd2f 	bl	8000cc8 <ssd1306_WriteCommand>
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000051c 	.word	0x2000051c

08001278 <ssd1306_TestMenu>:

//////////////////////////////
///////////////////


void ssd1306_TestMenu(char *first_row, char *second_row, Menu_Option *current_option) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
#ifdef SSD1306_INCLUDE_FONT_11x18

    ssd1306_Fill(Black);
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff fdbb 	bl	8000e00 <ssd1306_Fill>
    if(current_option != 0) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d009      	beq.n	80012a4 <ssd1306_TestMenu+0x2c>
    	ssd1306_DrawBitmap(32,0,bitmap_arrow_up_64x14,64,14,White);
 8001290:	2301      	movs	r3, #1
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	230e      	movs	r3, #14
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2340      	movs	r3, #64	@ 0x40
 800129a:	4a17      	ldr	r2, [pc, #92]	@ (80012f8 <ssd1306_TestMenu+0x80>)
 800129c:	2100      	movs	r1, #0
 800129e:	2020      	movs	r0, #32
 80012a0:	f7ff ff5e 	bl	8001160 <ssd1306_DrawBitmap>
    }
    //ssd1306_UpdateScreen();
    ssd1306_SetCursor(0, 14);
 80012a4:	210e      	movs	r1, #14
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff fef4 	bl	8001094 <ssd1306_SetCursor>
    ssd1306_WriteString(first_row, Font_11x18, White);
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <ssd1306_TestMenu+0x84>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f7ff fec7 	bl	8001048 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 14+18);
 80012ba:	2120      	movs	r1, #32
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fee9 	bl	8001094 <ssd1306_SetCursor>
    ssd1306_WriteString(second_row, Font_11x18, White);
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <ssd1306_TestMenu+0x84>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	9200      	str	r2, [sp, #0]
 80012c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ca:	68b8      	ldr	r0, [r7, #8]
 80012cc:	f7ff febc 	bl	8001048 <ssd1306_WriteString>
    if(current_option <= 2) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d809      	bhi.n	80012ea <ssd1306_TestMenu+0x72>
    	ssd1306_DrawBitmap(32,50,bitmap_arrow_down_64x14,64,14,White);
 80012d6:	2301      	movs	r3, #1
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	230e      	movs	r3, #14
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2340      	movs	r3, #64	@ 0x40
 80012e0:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <ssd1306_TestMenu+0x88>)
 80012e2:	2132      	movs	r1, #50	@ 0x32
 80012e4:	2020      	movs	r0, #32
 80012e6:	f7ff ff3b 	bl	8001160 <ssd1306_DrawBitmap>
    }
    ssd1306_UpdateScreen();
 80012ea:	f7ff fda1 	bl	8000e30 <ssd1306_UpdateScreen>
#endif
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	0800583c 	.word	0x0800583c
 80012fc:	080057b4 	.word	0x080057b4
 8001300:	080057cc 	.word	0x080057cc

08001304 <ssd1306_TestIntervalSetting>:


void ssd1306_TestIntervalSetting(int **timeBar, unsigned int *timeInterval) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af02      	add	r7, sp, #8
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]

	ssd1306_Fill(Black);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fd76 	bl	8000e00 <ssd1306_Fill>

	ssd1306_FillRectangle(4, 20, 36, 44, White);
 8001314:	2301      	movs	r3, #1
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	232c      	movs	r3, #44	@ 0x2c
 800131a:	2224      	movs	r2, #36	@ 0x24
 800131c:	2114      	movs	r1, #20
 800131e:	2004      	movs	r0, #4
 8001320:	f7ff fed0 	bl	80010c4 <ssd1306_FillRectangle>

	ssd1306_FillRectangle(53, 20, 84, 44, White);
 8001324:	2301      	movs	r3, #1
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	232c      	movs	r3, #44	@ 0x2c
 800132a:	2254      	movs	r2, #84	@ 0x54
 800132c:	2114      	movs	r1, #20
 800132e:	2035      	movs	r0, #53	@ 0x35
 8001330:	f7ff fec8 	bl	80010c4 <ssd1306_FillRectangle>

	ssd1306_FillRectangle(93, 20, 124, 44, White);
 8001334:	2301      	movs	r3, #1
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	232c      	movs	r3, #44	@ 0x2c
 800133a:	227c      	movs	r2, #124	@ 0x7c
 800133c:	2114      	movs	r1, #20
 800133e:	205d      	movs	r0, #93	@ 0x5d
 8001340:	f7ff fec0 	bl	80010c4 <ssd1306_FillRectangle>

	char str[2] = "";
 8001344:	2300      	movs	r3, #0
 8001346:	81bb      	strh	r3, [r7, #12]

	ssd1306_SetCursor(4, 20);
 8001348:	2114      	movs	r1, #20
 800134a:	2004      	movs	r0, #4
 800134c:	f7ff fea2 	bl	8001094 <ssd1306_SetCursor>
	sprintf(str, "%d", timeBar[0]);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4918      	ldr	r1, [pc, #96]	@ (80013bc <ssd1306_TestIntervalSetting+0xb8>)
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fd66 	bl	8002e2c <siprintf>
	ssd1306_WriteString(str, Font_16x24, Black);
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <ssd1306_TestIntervalSetting+0xbc>)
 8001362:	f107 000c 	add.w	r0, r7, #12
 8001366:	2200      	movs	r2, #0
 8001368:	9200      	str	r2, [sp, #0]
 800136a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800136c:	f7ff fe6c 	bl	8001048 <ssd1306_WriteString>

	ssd1306_WriteString(":", Font_16x24, Black);
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <ssd1306_TestIntervalSetting+0xbc>)
 8001372:	2200      	movs	r2, #0
 8001374:	9200      	str	r2, [sp, #0]
 8001376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001378:	4812      	ldr	r0, [pc, #72]	@ (80013c4 <ssd1306_TestIntervalSetting+0xc0>)
 800137a:	f7ff fe65 	bl	8001048 <ssd1306_WriteString>

	sprintf(str, "%d", timeBar[1]);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3304      	adds	r3, #4
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	490c      	ldr	r1, [pc, #48]	@ (80013bc <ssd1306_TestIntervalSetting+0xb8>)
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fd4e 	bl	8002e2c <siprintf>
	ssd1306_WriteString(str, Font_16x24, Black);
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <ssd1306_TestIntervalSetting+0xbc>)
 8001392:	f107 000c 	add.w	r0, r7, #12
 8001396:	2200      	movs	r2, #0
 8001398:	9200      	str	r2, [sp, #0]
 800139a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800139c:	f7ff fe54 	bl	8001048 <ssd1306_WriteString>

	ssd1306_WriteString("OK", Font_16x24, Black);
 80013a0:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <ssd1306_TestIntervalSetting+0xbc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	9200      	str	r2, [sp, #0]
 80013a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a8:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <ssd1306_TestIntervalSetting+0xc4>)
 80013aa:	f7ff fe4d 	bl	8001048 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80013ae:	f7ff fd3f 	bl	8000e30 <ssd1306_UpdateScreen>
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	0800382c 	.word	0x0800382c
 80013c0:	080057c0 	.word	0x080057c0
 80013c4:	08003830 	.word	0x08003830
 80013c8:	08003834 	.word	0x08003834

080013cc <ssd1306_TestDurationSetting>:


void ssd1306_TestDurationSetting(int **timeBar, unsigned int *timeDuration) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]

}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <ssd1306_TurnOff>:


void ssd1306_TurnOff() {
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff fd0a 	bl	8000e00 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80013ec:	f7ff fd20 	bl	8000e30 <ssd1306_UpdateScreen>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <HAL_MspInit+0x4c>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001408:	6453      	str	r3, [r2, #68]	@ 0x44
 800140a:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <HAL_MspInit+0x4c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	@ 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	@ (80014c8 <HAL_I2C_MspInit+0x84>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12b      	bne.n	80014be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a17      	ldr	r2, [pc, #92]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001482:	23c0      	movs	r3, #192	@ 0xc0
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001486:	2312      	movs	r3, #18
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001492:	2304      	movs	r3, #4
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <HAL_I2C_MspInit+0x8c>)
 800149e:	f000 fa37 	bl	8001910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	@ 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40005400 	.word	0x40005400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <NMI_Handler+0x4>

080014dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <MemManage_Handler+0x4>

080014ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152a:	f000 f8c7 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	@ (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f001 fca4 	bl	8002eb0 <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	220c      	movs	r2, #12
 800156c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20020000 	.word	0x20020000
 8001594:	00000400 	.word	0x00000400
 8001598:	2000052c 	.word	0x2000052c
 800159c:	20000680 	.word	0x20000680

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c8:	f7ff ffea 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	@ (8001600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	@ (8001604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f2:	f001 fc63 	bl	8002ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff f845 	bl	8000684 <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001608:	08005908 	.word	0x08005908
  ldr r2, =_sbss
 800160c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001610:	2000067c 	.word	0x2000067c

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <HAL_Init+0x40>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <HAL_Init+0x40>)
 800162e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	@ (8001658 <HAL_Init+0x40>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f931 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	200f      	movs	r0, #15
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fed2 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f93b 	bl	80018f6 <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f911 	bl	80018be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000040 	.word	0x20000040
 80016b4:	20000048 	.word	0x20000048
 80016b8:	20000044 	.word	0x20000044

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000048 	.word	0x20000048
 80016e0:	20000530 	.word	0x20000530

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000530 	.word	0x20000530

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000048 	.word	0x20000048

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	@ (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	@ (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	@ 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	@ 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f7ff ff8e 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff47 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff5c 	bl	800178c <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff8e 	bl	80017fc <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5d 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffb0 	bl	8001864 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	e159      	b.n	8001be0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 8148 	bne.w	8001bda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d005      	beq.n	8001962 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195e:	2b02      	cmp	r3, #2
 8001960:	d130      	bne.n	80019c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 0201 	and.w	r2, r3, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d017      	beq.n	8001a00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d123      	bne.n	8001a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80a2 	beq.w	8001bda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b57      	ldr	r3, [pc, #348]	@ (8001bf8 <HAL_GPIO_Init+0x2e8>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	4a56      	ldr	r2, [pc, #344]	@ (8001bf8 <HAL_GPIO_Init+0x2e8>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa6:	4b54      	ldr	r3, [pc, #336]	@ (8001bf8 <HAL_GPIO_Init+0x2e8>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab2:	4a52      	ldr	r2, [pc, #328]	@ (8001bfc <HAL_GPIO_Init+0x2ec>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a49      	ldr	r2, [pc, #292]	@ (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x202>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a48      	ldr	r2, [pc, #288]	@ (8001c04 <HAL_GPIO_Init+0x2f4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x1fe>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a47      	ldr	r2, [pc, #284]	@ (8001c08 <HAL_GPIO_Init+0x2f8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x1fa>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a46      	ldr	r2, [pc, #280]	@ (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x1f6>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a45      	ldr	r2, [pc, #276]	@ (8001c10 <HAL_GPIO_Init+0x300>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x1f2>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e008      	b.n	8001b14 <HAL_GPIO_Init+0x204>
 8001b02:	2307      	movs	r3, #7
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x204>
 8001b06:	2303      	movs	r3, #3
 8001b08:	e004      	b.n	8001b14 <HAL_GPIO_Init+0x204>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e002      	b.n	8001b14 <HAL_GPIO_Init+0x204>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_GPIO_Init+0x204>
 8001b12:	2300      	movs	r3, #0
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	f002 0203 	and.w	r2, r2, #3
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	4093      	lsls	r3, r2
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b24:	4935      	ldr	r1, [pc, #212]	@ (8001bfc <HAL_GPIO_Init+0x2ec>)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b32:	4b38      	ldr	r3, [pc, #224]	@ (8001c14 <HAL_GPIO_Init+0x304>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b56:	4a2f      	ldr	r2, [pc, #188]	@ (8001c14 <HAL_GPIO_Init+0x304>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c14 <HAL_GPIO_Init+0x304>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b80:	4a24      	ldr	r2, [pc, #144]	@ (8001c14 <HAL_GPIO_Init+0x304>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b86:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <HAL_GPIO_Init+0x304>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001baa:	4a1a      	ldr	r2, [pc, #104]	@ (8001c14 <HAL_GPIO_Init+0x304>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb0:	4b18      	ldr	r3, [pc, #96]	@ (8001c14 <HAL_GPIO_Init+0x304>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c14 <HAL_GPIO_Init+0x304>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b0f      	cmp	r3, #15
 8001be4:	f67f aea2 	bls.w	800192c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3724      	adds	r7, #36	@ 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40013800 	.word	0x40013800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	40020c00 	.word	0x40020c00
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40013c00 	.word	0x40013c00

08001c18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	e001      	b.n	8001c3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e12b      	b.n	8001eb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fbe8 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2224      	movs	r2, #36	@ 0x24
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cac:	f001 f8aa 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4a81      	ldr	r2, [pc, #516]	@ (8001ebc <HAL_I2C_Init+0x274>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d807      	bhi.n	8001ccc <HAL_I2C_Init+0x84>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a80      	ldr	r2, [pc, #512]	@ (8001ec0 <HAL_I2C_Init+0x278>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	bf94      	ite	ls
 8001cc4:	2301      	movls	r3, #1
 8001cc6:	2300      	movhi	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	e006      	b.n	8001cda <HAL_I2C_Init+0x92>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4a7d      	ldr	r2, [pc, #500]	@ (8001ec4 <HAL_I2C_Init+0x27c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	bf94      	ite	ls
 8001cd4:	2301      	movls	r3, #1
 8001cd6:	2300      	movhi	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0e7      	b.n	8001eb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a78      	ldr	r2, [pc, #480]	@ (8001ec8 <HAL_I2C_Init+0x280>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0c9b      	lsrs	r3, r3, #18
 8001cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a6a      	ldr	r2, [pc, #424]	@ (8001ebc <HAL_I2C_Init+0x274>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d802      	bhi.n	8001d1c <HAL_I2C_Init+0xd4>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	e009      	b.n	8001d30 <HAL_I2C_Init+0xe8>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	4a69      	ldr	r2, [pc, #420]	@ (8001ecc <HAL_I2C_Init+0x284>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	3301      	adds	r3, #1
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	495c      	ldr	r1, [pc, #368]	@ (8001ebc <HAL_I2C_Init+0x274>)
 8001d4c:	428b      	cmp	r3, r1
 8001d4e:	d819      	bhi.n	8001d84 <HAL_I2C_Init+0x13c>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e59      	subs	r1, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d64:	400b      	ands	r3, r1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00a      	beq.n	8001d80 <HAL_I2C_Init+0x138>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e59      	subs	r1, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7e:	e051      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e04f      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d111      	bne.n	8001db0 <HAL_I2C_Init+0x168>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	440b      	add	r3, r1
 8001d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e012      	b.n	8001dd6 <HAL_I2C_Init+0x18e>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1e58      	subs	r0, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	0099      	lsls	r1, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Init+0x196>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e022      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10e      	bne.n	8001e04 <HAL_I2C_Init+0x1bc>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1e58      	subs	r0, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	440b      	add	r3, r1
 8001df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e02:	e00f      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	0099      	lsls	r1, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	6809      	ldr	r1, [r1, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6911      	ldr	r1, [r2, #16]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68d2      	ldr	r2, [r2, #12]
 8001e5e:	4311      	orrs	r1, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	000186a0 	.word	0x000186a0
 8001ec0:	001e847f 	.word	0x001e847f
 8001ec4:	003d08ff 	.word	0x003d08ff
 8001ec8:	431bde83 	.word	0x431bde83
 8001ecc:	10624dd3 	.word	0x10624dd3

08001ed0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	817b      	strh	r3, [r7, #10]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	813b      	strh	r3, [r7, #8]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eea:	f7ff fbfb 	bl	80016e4 <HAL_GetTick>
 8001eee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	f040 80d9 	bne.w	80020b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2319      	movs	r3, #25
 8001f04:	2201      	movs	r2, #1
 8001f06:	496d      	ldr	r1, [pc, #436]	@ (80020bc <HAL_I2C_Mem_Write+0x1ec>)
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f971 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f14:	2302      	movs	r3, #2
 8001f16:	e0cc      	b.n	80020b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_I2C_Mem_Write+0x56>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e0c5      	b.n	80020b2 <HAL_I2C_Mem_Write+0x1e2>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d007      	beq.n	8001f4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2221      	movs	r2, #33	@ 0x21
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2240      	movs	r2, #64	@ 0x40
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a3a      	ldr	r2, [r7, #32]
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a4d      	ldr	r2, [pc, #308]	@ (80020c0 <HAL_I2C_Mem_Write+0x1f0>)
 8001f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f8e:	88f8      	ldrh	r0, [r7, #6]
 8001f90:	893a      	ldrh	r2, [r7, #8]
 8001f92:	8979      	ldrh	r1, [r7, #10]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f890 	bl	80020c4 <I2C_RequestMemoryWrite>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d052      	beq.n	8002050 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e081      	b.n	80020b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fa36 	bl	8002424 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00d      	beq.n	8001fda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d107      	bne.n	8001fd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e06b      	b.n	80020b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d11b      	bne.n	8002050 <HAL_I2C_Mem_Write+0x180>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d017      	beq.n	8002050 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1aa      	bne.n	8001fae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fa29 	bl	80024b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00d      	beq.n	8002084 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	2b04      	cmp	r3, #4
 800206e:	d107      	bne.n	8002080 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800207e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e016      	b.n	80020b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e000      	b.n	80020b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
  }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	00100002 	.word	0x00100002
 80020c0:	ffff0000 	.word	0xffff0000

080020c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	817b      	strh	r3, [r7, #10]
 80020d6:	460b      	mov	r3, r1
 80020d8:	813b      	strh	r3, [r7, #8]
 80020da:	4613      	mov	r3, r2
 80020dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f878 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00d      	beq.n	8002122 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002114:	d103      	bne.n	800211e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e05f      	b.n	80021e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002122:	897b      	ldrh	r3, [r7, #10]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002130:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	6a3a      	ldr	r2, [r7, #32]
 8002136:	492d      	ldr	r1, [pc, #180]	@ (80021ec <I2C_RequestMemoryWrite+0x128>)
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f8d3 	bl	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e04c      	b.n	80021e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800215e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002160:	6a39      	ldr	r1, [r7, #32]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f95e 	bl	8002424 <I2C_WaitOnTXEFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00d      	beq.n	800218a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	2b04      	cmp	r3, #4
 8002174:	d107      	bne.n	8002186 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002184:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e02b      	b.n	80021e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002190:	893b      	ldrh	r3, [r7, #8]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	611a      	str	r2, [r3, #16]
 800219a:	e021      	b.n	80021e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800219c:	893b      	ldrh	r3, [r7, #8]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ac:	6a39      	ldr	r1, [r7, #32]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f938 	bl	8002424 <I2C_WaitOnTXEFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00d      	beq.n	80021d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d107      	bne.n	80021d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e005      	b.n	80021e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021d6:	893b      	ldrh	r3, [r7, #8]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	00010002 	.word	0x00010002

080021f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002200:	e048      	b.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d044      	beq.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220a:	f7ff fa6b 	bl	80016e4 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d302      	bcc.n	8002220 <I2C_WaitOnFlagUntilTimeout+0x30>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d139      	bne.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	0c1b      	lsrs	r3, r3, #16
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10d      	bne.n	8002246 <I2C_WaitOnFlagUntilTimeout+0x56>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	43da      	mvns	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	e00c      	b.n	8002260 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	43da      	mvns	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4013      	ands	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	429a      	cmp	r2, r3
 8002264:	d116      	bne.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e023      	b.n	80022dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0c1b      	lsrs	r3, r3, #16
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d10d      	bne.n	80022ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	43da      	mvns	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	e00c      	b.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	43da      	mvns	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4013      	ands	r3, r2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d093      	beq.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022f2:	e071      	b.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002302:	d123      	bne.n	800234c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002312:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800231c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	f043 0204 	orr.w	r2, r3, #4
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e067      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d041      	beq.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002354:	f7ff f9c6 	bl	80016e4 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d302      	bcc.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d136      	bne.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10c      	bne.n	800238e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4013      	ands	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	e00b      	b.n	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	43da      	mvns	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4013      	ands	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e021      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10c      	bne.n	80023fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	e00b      	b.n	8002414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4013      	ands	r3, r2
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	f47f af6d 	bne.w	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002430:	e034      	b.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f886 	bl	8002544 <I2C_IsAcknowledgeFailed>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e034      	b.n	80024ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d028      	beq.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff f94b 	bl	80016e4 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d11d      	bne.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246a:	2b80      	cmp	r3, #128	@ 0x80
 800246c:	d016      	beq.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e007      	b.n	80024ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a6:	2b80      	cmp	r3, #128	@ 0x80
 80024a8:	d1c3      	bne.n	8002432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024c0:	e034      	b.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f83e 	bl	8002544 <I2C_IsAcknowledgeFailed>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e034      	b.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d028      	beq.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024da:	f7ff f903 	bl	80016e4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d302      	bcc.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d11d      	bne.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d016      	beq.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d1c3      	bne.n	80024c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800255a:	d11b      	bne.n	8002594 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002564:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e267      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d075      	beq.n	80026ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	4b88      	ldr	r3, [pc, #544]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d00c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4b85      	ldr	r3, [pc, #532]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d112      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4b82      	ldr	r3, [pc, #520]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e6:	d10b      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b7e      	ldr	r3, [pc, #504]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d05b      	beq.n	80026ac <HAL_RCC_OscConfig+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d157      	bne.n	80026ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e242      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002608:	d106      	bne.n	8002618 <HAL_RCC_OscConfig+0x74>
 800260a:	4b76      	ldr	r3, [pc, #472]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a75      	ldr	r2, [pc, #468]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x98>
 8002622:	4b70      	ldr	r3, [pc, #448]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6f      	ldr	r2, [pc, #444]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b6d      	ldr	r3, [pc, #436]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6c      	ldr	r2, [pc, #432]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 800263c:	4b69      	ldr	r3, [pc, #420]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a68      	ldr	r2, [pc, #416]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b66      	ldr	r3, [pc, #408]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a65      	ldr	r2, [pc, #404]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff f842 	bl	80016e4 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff f83e 	bl	80016e4 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e207      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b5b      	ldr	r3, [pc, #364]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xc0>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff f82e 	bl	80016e4 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff f82a 	bl	80016e4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1f3      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	4b51      	ldr	r3, [pc, #324]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0xe8>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d063      	beq.n	8002782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	4b4a      	ldr	r3, [pc, #296]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c6:	4b47      	ldr	r3, [pc, #284]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b44      	ldr	r3, [pc, #272]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	4b41      	ldr	r3, [pc, #260]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1c7      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b3b      	ldr	r3, [pc, #236]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4937      	ldr	r1, [pc, #220]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	e03a      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002714:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <HAL_RCC_OscConfig+0x244>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe ffe3 	bl	80016e4 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002722:	f7fe ffdf 	bl	80016e4 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1a8      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	4b2b      	ldr	r3, [pc, #172]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b28      	ldr	r3, [pc, #160]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4925      	ldr	r1, [pc, #148]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <HAL_RCC_OscConfig+0x244>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe ffc2 	bl	80016e4 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002764:	f7fe ffbe 	bl	80016e4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e187      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d036      	beq.n	80027fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002796:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <HAL_RCC_OscConfig+0x248>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe ffa2 	bl	80016e4 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fe ff9e 	bl	80016e4 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e167      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80027b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x200>
 80027c2:	e01b      	b.n	80027fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c4:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_RCC_OscConfig+0x248>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7fe ff8b 	bl	80016e4 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	e00e      	b.n	80027f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d2:	f7fe ff87 	bl	80016e4 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d907      	bls.n	80027f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e150      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	42470000 	.word	0x42470000
 80027ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	4b88      	ldr	r3, [pc, #544]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ea      	bne.n	80027d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8097 	beq.w	8002938 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280e:	4b81      	ldr	r3, [pc, #516]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a7c      	ldr	r2, [pc, #496]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	4b77      	ldr	r3, [pc, #476]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d118      	bne.n	8002878 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002846:	4b74      	ldr	r3, [pc, #464]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a73      	ldr	r2, [pc, #460]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002852:	f7fe ff47 	bl	80016e4 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7fe ff43 	bl	80016e4 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e10c      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x2ea>
 8002880:	4b64      	ldr	r3, [pc, #400]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	4a63      	ldr	r2, [pc, #396]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6713      	str	r3, [r2, #112]	@ 0x70
 800288c:	e01c      	b.n	80028c8 <HAL_RCC_OscConfig+0x324>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b05      	cmp	r3, #5
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x30c>
 8002896:	4b5f      	ldr	r3, [pc, #380]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0x324>
 80028b0:	4b58      	ldr	r3, [pc, #352]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a57      	ldr	r2, [pc, #348]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80028bc:	4b55      	ldr	r3, [pc, #340]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c0:	4a54      	ldr	r2, [pc, #336]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028c2:	f023 0304 	bic.w	r3, r3, #4
 80028c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d015      	beq.n	80028fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7fe ff08 	bl	80016e4 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7fe ff04 	bl	80016e4 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0cb      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ee:	4b49      	ldr	r3, [pc, #292]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ee      	beq.n	80028d8 <HAL_RCC_OscConfig+0x334>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fe fef2 	bl	80016e4 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002902:	e00a      	b.n	800291a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7fe feee 	bl	80016e4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0b5      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ee      	bne.n	8002904 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292c:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	4a38      	ldr	r2, [pc, #224]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002936:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a1 	beq.w	8002a84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002942:	4b34      	ldr	r3, [pc, #208]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b08      	cmp	r3, #8
 800294c:	d05c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d141      	bne.n	80029da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fec2 	bl	80016e4 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe febe 	bl	80016e4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e087      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	4b27      	ldr	r3, [pc, #156]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	019b      	lsls	r3, r3, #6
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	3b01      	subs	r3, #1
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	491b      	ldr	r1, [pc, #108]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ac:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe fe97 	bl	80016e4 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ba:	f7fe fe93 	bl	80016e4 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e05c      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029cc:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x416>
 80029d8:	e054      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe fe80 	bl	80016e4 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe fe7c 	bl	80016e4 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e045      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x444>
 8002a06:	e03d      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e038      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x4ec>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d028      	beq.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d121      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d11a      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a50:	4013      	ands	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d111      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0cc      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b68      	ldr	r3, [pc, #416]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d90c      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b65      	ldr	r3, [pc, #404]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b63      	ldr	r3, [pc, #396]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0b8      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae8:	4b59      	ldr	r3, [pc, #356]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a58      	ldr	r2, [pc, #352]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b00:	4b53      	ldr	r3, [pc, #332]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a52      	ldr	r2, [pc, #328]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b50      	ldr	r3, [pc, #320]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	494d      	ldr	r1, [pc, #308]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d044      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b47      	ldr	r3, [pc, #284]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d119      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e07f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b3f      	ldr	r3, [pc, #252]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3b      	ldr	r3, [pc, #236]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e067      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b37      	ldr	r3, [pc, #220]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4934      	ldr	r1, [pc, #208]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7fe fdae 	bl	80016e4 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe fdaa 	bl	80016e4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e04f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d20c      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e032      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4916      	ldr	r1, [pc, #88]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c06:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	490e      	ldr	r1, [pc, #56]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c1a:	f000 f821 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	490a      	ldr	r1, [pc, #40]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	5ccb      	ldrb	r3, [r1, r3]
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	4a09      	ldr	r2, [pc, #36]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c36:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fd0e 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00
 8002c50:	40023800 	.word	0x40023800
 8002c54:	080058ac 	.word	0x080058ac
 8002c58:	20000040 	.word	0x20000040
 8002c5c:	20000044 	.word	0x20000044

08002c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c64:	b090      	sub	sp, #64	@ 0x40
 8002c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c70:	2300      	movs	r3, #0
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c78:	4b59      	ldr	r3, [pc, #356]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d00d      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	f200 80a1 	bhi.w	8002dcc <HAL_RCC_GetSysClockFreq+0x16c>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x34>
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d003      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c92:	e09b      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b53      	ldr	r3, [pc, #332]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c96:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002c98:	e09b      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c9a:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c9e:	e098      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca0:	4b4f      	ldr	r3, [pc, #316]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002caa:	4b4d      	ldr	r3, [pc, #308]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d028      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	099b      	lsrs	r3, r3, #6
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	623b      	str	r3, [r7, #32]
 8002cc0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4b47      	ldr	r3, [pc, #284]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ccc:	fb03 f201 	mul.w	r2, r3, r1
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	fb00 f303 	mul.w	r3, r0, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a43      	ldr	r2, [pc, #268]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cda:	fba0 1202 	umull	r1, r2, r0, r2
 8002cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce6:	4413      	add	r3, r2
 8002ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cec:	2200      	movs	r2, #0
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	61fa      	str	r2, [r7, #28]
 8002cf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cfa:	f7fd fac1 	bl	8000280 <__aeabi_uldivmod>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4613      	mov	r3, r2
 8002d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d06:	e053      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d08:	4b35      	ldr	r3, [pc, #212]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	2200      	movs	r2, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	617a      	str	r2, [r7, #20]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d1a:	f04f 0b00 	mov.w	fp, #0
 8002d1e:	4652      	mov	r2, sl
 8002d20:	465b      	mov	r3, fp
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	0159      	lsls	r1, r3, #5
 8002d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d30:	0150      	lsls	r0, r2, #5
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	ebb2 080a 	subs.w	r8, r2, sl
 8002d3a:	eb63 090b 	sbc.w	r9, r3, fp
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d52:	ebb2 0408 	subs.w	r4, r2, r8
 8002d56:	eb63 0509 	sbc.w	r5, r3, r9
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	00eb      	lsls	r3, r5, #3
 8002d64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d68:	00e2      	lsls	r2, r4, #3
 8002d6a:	4614      	mov	r4, r2
 8002d6c:	461d      	mov	r5, r3
 8002d6e:	eb14 030a 	adds.w	r3, r4, sl
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	eb45 030b 	adc.w	r3, r5, fp
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d86:	4629      	mov	r1, r5
 8002d88:	028b      	lsls	r3, r1, #10
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d90:	4621      	mov	r1, r4
 8002d92:	028a      	lsls	r2, r1, #10
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	60fa      	str	r2, [r7, #12]
 8002da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da4:	f7fd fa6c 	bl	8000280 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4613      	mov	r3, r2
 8002dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002dc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3740      	adds	r7, #64	@ 0x40
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	00f42400 	.word	0x00f42400
 8002de8:	017d7840 	.word	0x017d7840

08002dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df0:	4b03      	ldr	r3, [pc, #12]	@ (8002e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000040 	.word	0x20000040

08002e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e08:	f7ff fff0 	bl	8002dec <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0a9b      	lsrs	r3, r3, #10
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	@ (8002e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	080058bc 	.word	0x080058bc

08002e2c <siprintf>:
 8002e2c:	b40e      	push	{r1, r2, r3}
 8002e2e:	b500      	push	{lr}
 8002e30:	b09c      	sub	sp, #112	@ 0x70
 8002e32:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e34:	9002      	str	r0, [sp, #8]
 8002e36:	9006      	str	r0, [sp, #24]
 8002e38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e3c:	4809      	ldr	r0, [pc, #36]	@ (8002e64 <siprintf+0x38>)
 8002e3e:	9107      	str	r1, [sp, #28]
 8002e40:	9104      	str	r1, [sp, #16]
 8002e42:	4909      	ldr	r1, [pc, #36]	@ (8002e68 <siprintf+0x3c>)
 8002e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e48:	9105      	str	r1, [sp, #20]
 8002e4a:	6800      	ldr	r0, [r0, #0]
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	a902      	add	r1, sp, #8
 8002e50:	f000 f9bc 	bl	80031cc <_svfiprintf_r>
 8002e54:	9b02      	ldr	r3, [sp, #8]
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	b01c      	add	sp, #112	@ 0x70
 8002e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e60:	b003      	add	sp, #12
 8002e62:	4770      	bx	lr
 8002e64:	2000004c 	.word	0x2000004c
 8002e68:	ffff0208 	.word	0xffff0208

08002e6c <memmove>:
 8002e6c:	4288      	cmp	r0, r1
 8002e6e:	b510      	push	{r4, lr}
 8002e70:	eb01 0402 	add.w	r4, r1, r2
 8002e74:	d902      	bls.n	8002e7c <memmove+0x10>
 8002e76:	4284      	cmp	r4, r0
 8002e78:	4623      	mov	r3, r4
 8002e7a:	d807      	bhi.n	8002e8c <memmove+0x20>
 8002e7c:	1e43      	subs	r3, r0, #1
 8002e7e:	42a1      	cmp	r1, r4
 8002e80:	d008      	beq.n	8002e94 <memmove+0x28>
 8002e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e8a:	e7f8      	b.n	8002e7e <memmove+0x12>
 8002e8c:	4402      	add	r2, r0
 8002e8e:	4601      	mov	r1, r0
 8002e90:	428a      	cmp	r2, r1
 8002e92:	d100      	bne.n	8002e96 <memmove+0x2a>
 8002e94:	bd10      	pop	{r4, pc}
 8002e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e9e:	e7f7      	b.n	8002e90 <memmove+0x24>

08002ea0 <memset>:
 8002ea0:	4402      	add	r2, r0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d100      	bne.n	8002eaa <memset+0xa>
 8002ea8:	4770      	bx	lr
 8002eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8002eae:	e7f9      	b.n	8002ea4 <memset+0x4>

08002eb0 <__errno>:
 8002eb0:	4b01      	ldr	r3, [pc, #4]	@ (8002eb8 <__errno+0x8>)
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	2000004c 	.word	0x2000004c

08002ebc <__libc_init_array>:
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8002ef4 <__libc_init_array+0x38>)
 8002ec0:	4c0d      	ldr	r4, [pc, #52]	@ (8002ef8 <__libc_init_array+0x3c>)
 8002ec2:	1b64      	subs	r4, r4, r5
 8002ec4:	10a4      	asrs	r4, r4, #2
 8002ec6:	2600      	movs	r6, #0
 8002ec8:	42a6      	cmp	r6, r4
 8002eca:	d109      	bne.n	8002ee0 <__libc_init_array+0x24>
 8002ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8002efc <__libc_init_array+0x40>)
 8002ece:	4c0c      	ldr	r4, [pc, #48]	@ (8002f00 <__libc_init_array+0x44>)
 8002ed0:	f000 fc4c 	bl	800376c <_init>
 8002ed4:	1b64      	subs	r4, r4, r5
 8002ed6:	10a4      	asrs	r4, r4, #2
 8002ed8:	2600      	movs	r6, #0
 8002eda:	42a6      	cmp	r6, r4
 8002edc:	d105      	bne.n	8002eea <__libc_init_array+0x2e>
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
 8002ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee4:	4798      	blx	r3
 8002ee6:	3601      	adds	r6, #1
 8002ee8:	e7ee      	b.n	8002ec8 <__libc_init_array+0xc>
 8002eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eee:	4798      	blx	r3
 8002ef0:	3601      	adds	r6, #1
 8002ef2:	e7f2      	b.n	8002eda <__libc_init_array+0x1e>
 8002ef4:	08005900 	.word	0x08005900
 8002ef8:	08005900 	.word	0x08005900
 8002efc:	08005900 	.word	0x08005900
 8002f00:	08005904 	.word	0x08005904

08002f04 <__retarget_lock_acquire_recursive>:
 8002f04:	4770      	bx	lr

08002f06 <__retarget_lock_release_recursive>:
 8002f06:	4770      	bx	lr

08002f08 <memcpy>:
 8002f08:	440a      	add	r2, r1
 8002f0a:	4291      	cmp	r1, r2
 8002f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f10:	d100      	bne.n	8002f14 <memcpy+0xc>
 8002f12:	4770      	bx	lr
 8002f14:	b510      	push	{r4, lr}
 8002f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f1e:	4291      	cmp	r1, r2
 8002f20:	d1f9      	bne.n	8002f16 <memcpy+0xe>
 8002f22:	bd10      	pop	{r4, pc}

08002f24 <_free_r>:
 8002f24:	b538      	push	{r3, r4, r5, lr}
 8002f26:	4605      	mov	r5, r0
 8002f28:	2900      	cmp	r1, #0
 8002f2a:	d041      	beq.n	8002fb0 <_free_r+0x8c>
 8002f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f30:	1f0c      	subs	r4, r1, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bfb8      	it	lt
 8002f36:	18e4      	addlt	r4, r4, r3
 8002f38:	f000 f8e0 	bl	80030fc <__malloc_lock>
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb4 <_free_r+0x90>)
 8002f3e:	6813      	ldr	r3, [r2, #0]
 8002f40:	b933      	cbnz	r3, 8002f50 <_free_r+0x2c>
 8002f42:	6063      	str	r3, [r4, #4]
 8002f44:	6014      	str	r4, [r2, #0]
 8002f46:	4628      	mov	r0, r5
 8002f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f4c:	f000 b8dc 	b.w	8003108 <__malloc_unlock>
 8002f50:	42a3      	cmp	r3, r4
 8002f52:	d908      	bls.n	8002f66 <_free_r+0x42>
 8002f54:	6820      	ldr	r0, [r4, #0]
 8002f56:	1821      	adds	r1, r4, r0
 8002f58:	428b      	cmp	r3, r1
 8002f5a:	bf01      	itttt	eq
 8002f5c:	6819      	ldreq	r1, [r3, #0]
 8002f5e:	685b      	ldreq	r3, [r3, #4]
 8002f60:	1809      	addeq	r1, r1, r0
 8002f62:	6021      	streq	r1, [r4, #0]
 8002f64:	e7ed      	b.n	8002f42 <_free_r+0x1e>
 8002f66:	461a      	mov	r2, r3
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	b10b      	cbz	r3, 8002f70 <_free_r+0x4c>
 8002f6c:	42a3      	cmp	r3, r4
 8002f6e:	d9fa      	bls.n	8002f66 <_free_r+0x42>
 8002f70:	6811      	ldr	r1, [r2, #0]
 8002f72:	1850      	adds	r0, r2, r1
 8002f74:	42a0      	cmp	r0, r4
 8002f76:	d10b      	bne.n	8002f90 <_free_r+0x6c>
 8002f78:	6820      	ldr	r0, [r4, #0]
 8002f7a:	4401      	add	r1, r0
 8002f7c:	1850      	adds	r0, r2, r1
 8002f7e:	4283      	cmp	r3, r0
 8002f80:	6011      	str	r1, [r2, #0]
 8002f82:	d1e0      	bne.n	8002f46 <_free_r+0x22>
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	6053      	str	r3, [r2, #4]
 8002f8a:	4408      	add	r0, r1
 8002f8c:	6010      	str	r0, [r2, #0]
 8002f8e:	e7da      	b.n	8002f46 <_free_r+0x22>
 8002f90:	d902      	bls.n	8002f98 <_free_r+0x74>
 8002f92:	230c      	movs	r3, #12
 8002f94:	602b      	str	r3, [r5, #0]
 8002f96:	e7d6      	b.n	8002f46 <_free_r+0x22>
 8002f98:	6820      	ldr	r0, [r4, #0]
 8002f9a:	1821      	adds	r1, r4, r0
 8002f9c:	428b      	cmp	r3, r1
 8002f9e:	bf04      	itt	eq
 8002fa0:	6819      	ldreq	r1, [r3, #0]
 8002fa2:	685b      	ldreq	r3, [r3, #4]
 8002fa4:	6063      	str	r3, [r4, #4]
 8002fa6:	bf04      	itt	eq
 8002fa8:	1809      	addeq	r1, r1, r0
 8002faa:	6021      	streq	r1, [r4, #0]
 8002fac:	6054      	str	r4, [r2, #4]
 8002fae:	e7ca      	b.n	8002f46 <_free_r+0x22>
 8002fb0:	bd38      	pop	{r3, r4, r5, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000678 	.word	0x20000678

08002fb8 <sbrk_aligned>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4e0f      	ldr	r6, [pc, #60]	@ (8002ff8 <sbrk_aligned+0x40>)
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	6831      	ldr	r1, [r6, #0]
 8002fc0:	4605      	mov	r5, r0
 8002fc2:	b911      	cbnz	r1, 8002fca <sbrk_aligned+0x12>
 8002fc4:	f000 fb8c 	bl	80036e0 <_sbrk_r>
 8002fc8:	6030      	str	r0, [r6, #0]
 8002fca:	4621      	mov	r1, r4
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f000 fb87 	bl	80036e0 <_sbrk_r>
 8002fd2:	1c43      	adds	r3, r0, #1
 8002fd4:	d103      	bne.n	8002fde <sbrk_aligned+0x26>
 8002fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8002fda:	4620      	mov	r0, r4
 8002fdc:	bd70      	pop	{r4, r5, r6, pc}
 8002fde:	1cc4      	adds	r4, r0, #3
 8002fe0:	f024 0403 	bic.w	r4, r4, #3
 8002fe4:	42a0      	cmp	r0, r4
 8002fe6:	d0f8      	beq.n	8002fda <sbrk_aligned+0x22>
 8002fe8:	1a21      	subs	r1, r4, r0
 8002fea:	4628      	mov	r0, r5
 8002fec:	f000 fb78 	bl	80036e0 <_sbrk_r>
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d1f2      	bne.n	8002fda <sbrk_aligned+0x22>
 8002ff4:	e7ef      	b.n	8002fd6 <sbrk_aligned+0x1e>
 8002ff6:	bf00      	nop
 8002ff8:	20000674 	.word	0x20000674

08002ffc <_malloc_r>:
 8002ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003000:	1ccd      	adds	r5, r1, #3
 8003002:	f025 0503 	bic.w	r5, r5, #3
 8003006:	3508      	adds	r5, #8
 8003008:	2d0c      	cmp	r5, #12
 800300a:	bf38      	it	cc
 800300c:	250c      	movcc	r5, #12
 800300e:	2d00      	cmp	r5, #0
 8003010:	4606      	mov	r6, r0
 8003012:	db01      	blt.n	8003018 <_malloc_r+0x1c>
 8003014:	42a9      	cmp	r1, r5
 8003016:	d904      	bls.n	8003022 <_malloc_r+0x26>
 8003018:	230c      	movs	r3, #12
 800301a:	6033      	str	r3, [r6, #0]
 800301c:	2000      	movs	r0, #0
 800301e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030f8 <_malloc_r+0xfc>
 8003026:	f000 f869 	bl	80030fc <__malloc_lock>
 800302a:	f8d8 3000 	ldr.w	r3, [r8]
 800302e:	461c      	mov	r4, r3
 8003030:	bb44      	cbnz	r4, 8003084 <_malloc_r+0x88>
 8003032:	4629      	mov	r1, r5
 8003034:	4630      	mov	r0, r6
 8003036:	f7ff ffbf 	bl	8002fb8 <sbrk_aligned>
 800303a:	1c43      	adds	r3, r0, #1
 800303c:	4604      	mov	r4, r0
 800303e:	d158      	bne.n	80030f2 <_malloc_r+0xf6>
 8003040:	f8d8 4000 	ldr.w	r4, [r8]
 8003044:	4627      	mov	r7, r4
 8003046:	2f00      	cmp	r7, #0
 8003048:	d143      	bne.n	80030d2 <_malloc_r+0xd6>
 800304a:	2c00      	cmp	r4, #0
 800304c:	d04b      	beq.n	80030e6 <_malloc_r+0xea>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	4639      	mov	r1, r7
 8003052:	4630      	mov	r0, r6
 8003054:	eb04 0903 	add.w	r9, r4, r3
 8003058:	f000 fb42 	bl	80036e0 <_sbrk_r>
 800305c:	4581      	cmp	r9, r0
 800305e:	d142      	bne.n	80030e6 <_malloc_r+0xea>
 8003060:	6821      	ldr	r1, [r4, #0]
 8003062:	1a6d      	subs	r5, r5, r1
 8003064:	4629      	mov	r1, r5
 8003066:	4630      	mov	r0, r6
 8003068:	f7ff ffa6 	bl	8002fb8 <sbrk_aligned>
 800306c:	3001      	adds	r0, #1
 800306e:	d03a      	beq.n	80030e6 <_malloc_r+0xea>
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	442b      	add	r3, r5
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	f8d8 3000 	ldr.w	r3, [r8]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	bb62      	cbnz	r2, 80030d8 <_malloc_r+0xdc>
 800307e:	f8c8 7000 	str.w	r7, [r8]
 8003082:	e00f      	b.n	80030a4 <_malloc_r+0xa8>
 8003084:	6822      	ldr	r2, [r4, #0]
 8003086:	1b52      	subs	r2, r2, r5
 8003088:	d420      	bmi.n	80030cc <_malloc_r+0xd0>
 800308a:	2a0b      	cmp	r2, #11
 800308c:	d917      	bls.n	80030be <_malloc_r+0xc2>
 800308e:	1961      	adds	r1, r4, r5
 8003090:	42a3      	cmp	r3, r4
 8003092:	6025      	str	r5, [r4, #0]
 8003094:	bf18      	it	ne
 8003096:	6059      	strne	r1, [r3, #4]
 8003098:	6863      	ldr	r3, [r4, #4]
 800309a:	bf08      	it	eq
 800309c:	f8c8 1000 	streq.w	r1, [r8]
 80030a0:	5162      	str	r2, [r4, r5]
 80030a2:	604b      	str	r3, [r1, #4]
 80030a4:	4630      	mov	r0, r6
 80030a6:	f000 f82f 	bl	8003108 <__malloc_unlock>
 80030aa:	f104 000b 	add.w	r0, r4, #11
 80030ae:	1d23      	adds	r3, r4, #4
 80030b0:	f020 0007 	bic.w	r0, r0, #7
 80030b4:	1ac2      	subs	r2, r0, r3
 80030b6:	bf1c      	itt	ne
 80030b8:	1a1b      	subne	r3, r3, r0
 80030ba:	50a3      	strne	r3, [r4, r2]
 80030bc:	e7af      	b.n	800301e <_malloc_r+0x22>
 80030be:	6862      	ldr	r2, [r4, #4]
 80030c0:	42a3      	cmp	r3, r4
 80030c2:	bf0c      	ite	eq
 80030c4:	f8c8 2000 	streq.w	r2, [r8]
 80030c8:	605a      	strne	r2, [r3, #4]
 80030ca:	e7eb      	b.n	80030a4 <_malloc_r+0xa8>
 80030cc:	4623      	mov	r3, r4
 80030ce:	6864      	ldr	r4, [r4, #4]
 80030d0:	e7ae      	b.n	8003030 <_malloc_r+0x34>
 80030d2:	463c      	mov	r4, r7
 80030d4:	687f      	ldr	r7, [r7, #4]
 80030d6:	e7b6      	b.n	8003046 <_malloc_r+0x4a>
 80030d8:	461a      	mov	r2, r3
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	42a3      	cmp	r3, r4
 80030de:	d1fb      	bne.n	80030d8 <_malloc_r+0xdc>
 80030e0:	2300      	movs	r3, #0
 80030e2:	6053      	str	r3, [r2, #4]
 80030e4:	e7de      	b.n	80030a4 <_malloc_r+0xa8>
 80030e6:	230c      	movs	r3, #12
 80030e8:	6033      	str	r3, [r6, #0]
 80030ea:	4630      	mov	r0, r6
 80030ec:	f000 f80c 	bl	8003108 <__malloc_unlock>
 80030f0:	e794      	b.n	800301c <_malloc_r+0x20>
 80030f2:	6005      	str	r5, [r0, #0]
 80030f4:	e7d6      	b.n	80030a4 <_malloc_r+0xa8>
 80030f6:	bf00      	nop
 80030f8:	20000678 	.word	0x20000678

080030fc <__malloc_lock>:
 80030fc:	4801      	ldr	r0, [pc, #4]	@ (8003104 <__malloc_lock+0x8>)
 80030fe:	f7ff bf01 	b.w	8002f04 <__retarget_lock_acquire_recursive>
 8003102:	bf00      	nop
 8003104:	20000670 	.word	0x20000670

08003108 <__malloc_unlock>:
 8003108:	4801      	ldr	r0, [pc, #4]	@ (8003110 <__malloc_unlock+0x8>)
 800310a:	f7ff befc 	b.w	8002f06 <__retarget_lock_release_recursive>
 800310e:	bf00      	nop
 8003110:	20000670 	.word	0x20000670

08003114 <__ssputs_r>:
 8003114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003118:	688e      	ldr	r6, [r1, #8]
 800311a:	461f      	mov	r7, r3
 800311c:	42be      	cmp	r6, r7
 800311e:	680b      	ldr	r3, [r1, #0]
 8003120:	4682      	mov	sl, r0
 8003122:	460c      	mov	r4, r1
 8003124:	4690      	mov	r8, r2
 8003126:	d82d      	bhi.n	8003184 <__ssputs_r+0x70>
 8003128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800312c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003130:	d026      	beq.n	8003180 <__ssputs_r+0x6c>
 8003132:	6965      	ldr	r5, [r4, #20]
 8003134:	6909      	ldr	r1, [r1, #16]
 8003136:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800313a:	eba3 0901 	sub.w	r9, r3, r1
 800313e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003142:	1c7b      	adds	r3, r7, #1
 8003144:	444b      	add	r3, r9
 8003146:	106d      	asrs	r5, r5, #1
 8003148:	429d      	cmp	r5, r3
 800314a:	bf38      	it	cc
 800314c:	461d      	movcc	r5, r3
 800314e:	0553      	lsls	r3, r2, #21
 8003150:	d527      	bpl.n	80031a2 <__ssputs_r+0x8e>
 8003152:	4629      	mov	r1, r5
 8003154:	f7ff ff52 	bl	8002ffc <_malloc_r>
 8003158:	4606      	mov	r6, r0
 800315a:	b360      	cbz	r0, 80031b6 <__ssputs_r+0xa2>
 800315c:	6921      	ldr	r1, [r4, #16]
 800315e:	464a      	mov	r2, r9
 8003160:	f7ff fed2 	bl	8002f08 <memcpy>
 8003164:	89a3      	ldrh	r3, [r4, #12]
 8003166:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800316a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800316e:	81a3      	strh	r3, [r4, #12]
 8003170:	6126      	str	r6, [r4, #16]
 8003172:	6165      	str	r5, [r4, #20]
 8003174:	444e      	add	r6, r9
 8003176:	eba5 0509 	sub.w	r5, r5, r9
 800317a:	6026      	str	r6, [r4, #0]
 800317c:	60a5      	str	r5, [r4, #8]
 800317e:	463e      	mov	r6, r7
 8003180:	42be      	cmp	r6, r7
 8003182:	d900      	bls.n	8003186 <__ssputs_r+0x72>
 8003184:	463e      	mov	r6, r7
 8003186:	6820      	ldr	r0, [r4, #0]
 8003188:	4632      	mov	r2, r6
 800318a:	4641      	mov	r1, r8
 800318c:	f7ff fe6e 	bl	8002e6c <memmove>
 8003190:	68a3      	ldr	r3, [r4, #8]
 8003192:	1b9b      	subs	r3, r3, r6
 8003194:	60a3      	str	r3, [r4, #8]
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	4433      	add	r3, r6
 800319a:	6023      	str	r3, [r4, #0]
 800319c:	2000      	movs	r0, #0
 800319e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a2:	462a      	mov	r2, r5
 80031a4:	f000 faac 	bl	8003700 <_realloc_r>
 80031a8:	4606      	mov	r6, r0
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d1e0      	bne.n	8003170 <__ssputs_r+0x5c>
 80031ae:	6921      	ldr	r1, [r4, #16]
 80031b0:	4650      	mov	r0, sl
 80031b2:	f7ff feb7 	bl	8002f24 <_free_r>
 80031b6:	230c      	movs	r3, #12
 80031b8:	f8ca 3000 	str.w	r3, [sl]
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031c2:	81a3      	strh	r3, [r4, #12]
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	e7e9      	b.n	800319e <__ssputs_r+0x8a>
	...

080031cc <_svfiprintf_r>:
 80031cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d0:	4698      	mov	r8, r3
 80031d2:	898b      	ldrh	r3, [r1, #12]
 80031d4:	061b      	lsls	r3, r3, #24
 80031d6:	b09d      	sub	sp, #116	@ 0x74
 80031d8:	4607      	mov	r7, r0
 80031da:	460d      	mov	r5, r1
 80031dc:	4614      	mov	r4, r2
 80031de:	d510      	bpl.n	8003202 <_svfiprintf_r+0x36>
 80031e0:	690b      	ldr	r3, [r1, #16]
 80031e2:	b973      	cbnz	r3, 8003202 <_svfiprintf_r+0x36>
 80031e4:	2140      	movs	r1, #64	@ 0x40
 80031e6:	f7ff ff09 	bl	8002ffc <_malloc_r>
 80031ea:	6028      	str	r0, [r5, #0]
 80031ec:	6128      	str	r0, [r5, #16]
 80031ee:	b930      	cbnz	r0, 80031fe <_svfiprintf_r+0x32>
 80031f0:	230c      	movs	r3, #12
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	b01d      	add	sp, #116	@ 0x74
 80031fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031fe:	2340      	movs	r3, #64	@ 0x40
 8003200:	616b      	str	r3, [r5, #20]
 8003202:	2300      	movs	r3, #0
 8003204:	9309      	str	r3, [sp, #36]	@ 0x24
 8003206:	2320      	movs	r3, #32
 8003208:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800320c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003210:	2330      	movs	r3, #48	@ 0x30
 8003212:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80033b0 <_svfiprintf_r+0x1e4>
 8003216:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800321a:	f04f 0901 	mov.w	r9, #1
 800321e:	4623      	mov	r3, r4
 8003220:	469a      	mov	sl, r3
 8003222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003226:	b10a      	cbz	r2, 800322c <_svfiprintf_r+0x60>
 8003228:	2a25      	cmp	r2, #37	@ 0x25
 800322a:	d1f9      	bne.n	8003220 <_svfiprintf_r+0x54>
 800322c:	ebba 0b04 	subs.w	fp, sl, r4
 8003230:	d00b      	beq.n	800324a <_svfiprintf_r+0x7e>
 8003232:	465b      	mov	r3, fp
 8003234:	4622      	mov	r2, r4
 8003236:	4629      	mov	r1, r5
 8003238:	4638      	mov	r0, r7
 800323a:	f7ff ff6b 	bl	8003114 <__ssputs_r>
 800323e:	3001      	adds	r0, #1
 8003240:	f000 80a7 	beq.w	8003392 <_svfiprintf_r+0x1c6>
 8003244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003246:	445a      	add	r2, fp
 8003248:	9209      	str	r2, [sp, #36]	@ 0x24
 800324a:	f89a 3000 	ldrb.w	r3, [sl]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 809f 	beq.w	8003392 <_svfiprintf_r+0x1c6>
 8003254:	2300      	movs	r3, #0
 8003256:	f04f 32ff 	mov.w	r2, #4294967295
 800325a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800325e:	f10a 0a01 	add.w	sl, sl, #1
 8003262:	9304      	str	r3, [sp, #16]
 8003264:	9307      	str	r3, [sp, #28]
 8003266:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800326a:	931a      	str	r3, [sp, #104]	@ 0x68
 800326c:	4654      	mov	r4, sl
 800326e:	2205      	movs	r2, #5
 8003270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003274:	484e      	ldr	r0, [pc, #312]	@ (80033b0 <_svfiprintf_r+0x1e4>)
 8003276:	f7fc ffb3 	bl	80001e0 <memchr>
 800327a:	9a04      	ldr	r2, [sp, #16]
 800327c:	b9d8      	cbnz	r0, 80032b6 <_svfiprintf_r+0xea>
 800327e:	06d0      	lsls	r0, r2, #27
 8003280:	bf44      	itt	mi
 8003282:	2320      	movmi	r3, #32
 8003284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003288:	0711      	lsls	r1, r2, #28
 800328a:	bf44      	itt	mi
 800328c:	232b      	movmi	r3, #43	@ 0x2b
 800328e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003292:	f89a 3000 	ldrb.w	r3, [sl]
 8003296:	2b2a      	cmp	r3, #42	@ 0x2a
 8003298:	d015      	beq.n	80032c6 <_svfiprintf_r+0xfa>
 800329a:	9a07      	ldr	r2, [sp, #28]
 800329c:	4654      	mov	r4, sl
 800329e:	2000      	movs	r0, #0
 80032a0:	f04f 0c0a 	mov.w	ip, #10
 80032a4:	4621      	mov	r1, r4
 80032a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032aa:	3b30      	subs	r3, #48	@ 0x30
 80032ac:	2b09      	cmp	r3, #9
 80032ae:	d94b      	bls.n	8003348 <_svfiprintf_r+0x17c>
 80032b0:	b1b0      	cbz	r0, 80032e0 <_svfiprintf_r+0x114>
 80032b2:	9207      	str	r2, [sp, #28]
 80032b4:	e014      	b.n	80032e0 <_svfiprintf_r+0x114>
 80032b6:	eba0 0308 	sub.w	r3, r0, r8
 80032ba:	fa09 f303 	lsl.w	r3, r9, r3
 80032be:	4313      	orrs	r3, r2
 80032c0:	9304      	str	r3, [sp, #16]
 80032c2:	46a2      	mov	sl, r4
 80032c4:	e7d2      	b.n	800326c <_svfiprintf_r+0xa0>
 80032c6:	9b03      	ldr	r3, [sp, #12]
 80032c8:	1d19      	adds	r1, r3, #4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	9103      	str	r1, [sp, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bfbb      	ittet	lt
 80032d2:	425b      	neglt	r3, r3
 80032d4:	f042 0202 	orrlt.w	r2, r2, #2
 80032d8:	9307      	strge	r3, [sp, #28]
 80032da:	9307      	strlt	r3, [sp, #28]
 80032dc:	bfb8      	it	lt
 80032de:	9204      	strlt	r2, [sp, #16]
 80032e0:	7823      	ldrb	r3, [r4, #0]
 80032e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80032e4:	d10a      	bne.n	80032fc <_svfiprintf_r+0x130>
 80032e6:	7863      	ldrb	r3, [r4, #1]
 80032e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80032ea:	d132      	bne.n	8003352 <_svfiprintf_r+0x186>
 80032ec:	9b03      	ldr	r3, [sp, #12]
 80032ee:	1d1a      	adds	r2, r3, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	9203      	str	r2, [sp, #12]
 80032f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032f8:	3402      	adds	r4, #2
 80032fa:	9305      	str	r3, [sp, #20]
 80032fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80033c0 <_svfiprintf_r+0x1f4>
 8003300:	7821      	ldrb	r1, [r4, #0]
 8003302:	2203      	movs	r2, #3
 8003304:	4650      	mov	r0, sl
 8003306:	f7fc ff6b 	bl	80001e0 <memchr>
 800330a:	b138      	cbz	r0, 800331c <_svfiprintf_r+0x150>
 800330c:	9b04      	ldr	r3, [sp, #16]
 800330e:	eba0 000a 	sub.w	r0, r0, sl
 8003312:	2240      	movs	r2, #64	@ 0x40
 8003314:	4082      	lsls	r2, r0
 8003316:	4313      	orrs	r3, r2
 8003318:	3401      	adds	r4, #1
 800331a:	9304      	str	r3, [sp, #16]
 800331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003320:	4824      	ldr	r0, [pc, #144]	@ (80033b4 <_svfiprintf_r+0x1e8>)
 8003322:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003326:	2206      	movs	r2, #6
 8003328:	f7fc ff5a 	bl	80001e0 <memchr>
 800332c:	2800      	cmp	r0, #0
 800332e:	d036      	beq.n	800339e <_svfiprintf_r+0x1d2>
 8003330:	4b21      	ldr	r3, [pc, #132]	@ (80033b8 <_svfiprintf_r+0x1ec>)
 8003332:	bb1b      	cbnz	r3, 800337c <_svfiprintf_r+0x1b0>
 8003334:	9b03      	ldr	r3, [sp, #12]
 8003336:	3307      	adds	r3, #7
 8003338:	f023 0307 	bic.w	r3, r3, #7
 800333c:	3308      	adds	r3, #8
 800333e:	9303      	str	r3, [sp, #12]
 8003340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003342:	4433      	add	r3, r6
 8003344:	9309      	str	r3, [sp, #36]	@ 0x24
 8003346:	e76a      	b.n	800321e <_svfiprintf_r+0x52>
 8003348:	fb0c 3202 	mla	r2, ip, r2, r3
 800334c:	460c      	mov	r4, r1
 800334e:	2001      	movs	r0, #1
 8003350:	e7a8      	b.n	80032a4 <_svfiprintf_r+0xd8>
 8003352:	2300      	movs	r3, #0
 8003354:	3401      	adds	r4, #1
 8003356:	9305      	str	r3, [sp, #20]
 8003358:	4619      	mov	r1, r3
 800335a:	f04f 0c0a 	mov.w	ip, #10
 800335e:	4620      	mov	r0, r4
 8003360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003364:	3a30      	subs	r2, #48	@ 0x30
 8003366:	2a09      	cmp	r2, #9
 8003368:	d903      	bls.n	8003372 <_svfiprintf_r+0x1a6>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0c6      	beq.n	80032fc <_svfiprintf_r+0x130>
 800336e:	9105      	str	r1, [sp, #20]
 8003370:	e7c4      	b.n	80032fc <_svfiprintf_r+0x130>
 8003372:	fb0c 2101 	mla	r1, ip, r1, r2
 8003376:	4604      	mov	r4, r0
 8003378:	2301      	movs	r3, #1
 800337a:	e7f0      	b.n	800335e <_svfiprintf_r+0x192>
 800337c:	ab03      	add	r3, sp, #12
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	462a      	mov	r2, r5
 8003382:	4b0e      	ldr	r3, [pc, #56]	@ (80033bc <_svfiprintf_r+0x1f0>)
 8003384:	a904      	add	r1, sp, #16
 8003386:	4638      	mov	r0, r7
 8003388:	f3af 8000 	nop.w
 800338c:	1c42      	adds	r2, r0, #1
 800338e:	4606      	mov	r6, r0
 8003390:	d1d6      	bne.n	8003340 <_svfiprintf_r+0x174>
 8003392:	89ab      	ldrh	r3, [r5, #12]
 8003394:	065b      	lsls	r3, r3, #25
 8003396:	f53f af2d 	bmi.w	80031f4 <_svfiprintf_r+0x28>
 800339a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800339c:	e72c      	b.n	80031f8 <_svfiprintf_r+0x2c>
 800339e:	ab03      	add	r3, sp, #12
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	462a      	mov	r2, r5
 80033a4:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <_svfiprintf_r+0x1f0>)
 80033a6:	a904      	add	r1, sp, #16
 80033a8:	4638      	mov	r0, r7
 80033aa:	f000 f879 	bl	80034a0 <_printf_i>
 80033ae:	e7ed      	b.n	800338c <_svfiprintf_r+0x1c0>
 80033b0:	080058c4 	.word	0x080058c4
 80033b4:	080058ce 	.word	0x080058ce
 80033b8:	00000000 	.word	0x00000000
 80033bc:	08003115 	.word	0x08003115
 80033c0:	080058ca 	.word	0x080058ca

080033c4 <_printf_common>:
 80033c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033c8:	4616      	mov	r6, r2
 80033ca:	4698      	mov	r8, r3
 80033cc:	688a      	ldr	r2, [r1, #8]
 80033ce:	690b      	ldr	r3, [r1, #16]
 80033d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bfb8      	it	lt
 80033d8:	4613      	movlt	r3, r2
 80033da:	6033      	str	r3, [r6, #0]
 80033dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033e0:	4607      	mov	r7, r0
 80033e2:	460c      	mov	r4, r1
 80033e4:	b10a      	cbz	r2, 80033ea <_printf_common+0x26>
 80033e6:	3301      	adds	r3, #1
 80033e8:	6033      	str	r3, [r6, #0]
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	0699      	lsls	r1, r3, #26
 80033ee:	bf42      	ittt	mi
 80033f0:	6833      	ldrmi	r3, [r6, #0]
 80033f2:	3302      	addmi	r3, #2
 80033f4:	6033      	strmi	r3, [r6, #0]
 80033f6:	6825      	ldr	r5, [r4, #0]
 80033f8:	f015 0506 	ands.w	r5, r5, #6
 80033fc:	d106      	bne.n	800340c <_printf_common+0x48>
 80033fe:	f104 0a19 	add.w	sl, r4, #25
 8003402:	68e3      	ldr	r3, [r4, #12]
 8003404:	6832      	ldr	r2, [r6, #0]
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	42ab      	cmp	r3, r5
 800340a:	dc26      	bgt.n	800345a <_printf_common+0x96>
 800340c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003410:	6822      	ldr	r2, [r4, #0]
 8003412:	3b00      	subs	r3, #0
 8003414:	bf18      	it	ne
 8003416:	2301      	movne	r3, #1
 8003418:	0692      	lsls	r2, r2, #26
 800341a:	d42b      	bmi.n	8003474 <_printf_common+0xb0>
 800341c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003420:	4641      	mov	r1, r8
 8003422:	4638      	mov	r0, r7
 8003424:	47c8      	blx	r9
 8003426:	3001      	adds	r0, #1
 8003428:	d01e      	beq.n	8003468 <_printf_common+0xa4>
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	6922      	ldr	r2, [r4, #16]
 800342e:	f003 0306 	and.w	r3, r3, #6
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf02      	ittt	eq
 8003436:	68e5      	ldreq	r5, [r4, #12]
 8003438:	6833      	ldreq	r3, [r6, #0]
 800343a:	1aed      	subeq	r5, r5, r3
 800343c:	68a3      	ldr	r3, [r4, #8]
 800343e:	bf0c      	ite	eq
 8003440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003444:	2500      	movne	r5, #0
 8003446:	4293      	cmp	r3, r2
 8003448:	bfc4      	itt	gt
 800344a:	1a9b      	subgt	r3, r3, r2
 800344c:	18ed      	addgt	r5, r5, r3
 800344e:	2600      	movs	r6, #0
 8003450:	341a      	adds	r4, #26
 8003452:	42b5      	cmp	r5, r6
 8003454:	d11a      	bne.n	800348c <_printf_common+0xc8>
 8003456:	2000      	movs	r0, #0
 8003458:	e008      	b.n	800346c <_printf_common+0xa8>
 800345a:	2301      	movs	r3, #1
 800345c:	4652      	mov	r2, sl
 800345e:	4641      	mov	r1, r8
 8003460:	4638      	mov	r0, r7
 8003462:	47c8      	blx	r9
 8003464:	3001      	adds	r0, #1
 8003466:	d103      	bne.n	8003470 <_printf_common+0xac>
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003470:	3501      	adds	r5, #1
 8003472:	e7c6      	b.n	8003402 <_printf_common+0x3e>
 8003474:	18e1      	adds	r1, r4, r3
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	2030      	movs	r0, #48	@ 0x30
 800347a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800347e:	4422      	add	r2, r4
 8003480:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003488:	3302      	adds	r3, #2
 800348a:	e7c7      	b.n	800341c <_printf_common+0x58>
 800348c:	2301      	movs	r3, #1
 800348e:	4622      	mov	r2, r4
 8003490:	4641      	mov	r1, r8
 8003492:	4638      	mov	r0, r7
 8003494:	47c8      	blx	r9
 8003496:	3001      	adds	r0, #1
 8003498:	d0e6      	beq.n	8003468 <_printf_common+0xa4>
 800349a:	3601      	adds	r6, #1
 800349c:	e7d9      	b.n	8003452 <_printf_common+0x8e>
	...

080034a0 <_printf_i>:
 80034a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034a4:	7e0f      	ldrb	r7, [r1, #24]
 80034a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034a8:	2f78      	cmp	r7, #120	@ 0x78
 80034aa:	4691      	mov	r9, r2
 80034ac:	4680      	mov	r8, r0
 80034ae:	460c      	mov	r4, r1
 80034b0:	469a      	mov	sl, r3
 80034b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034b6:	d807      	bhi.n	80034c8 <_printf_i+0x28>
 80034b8:	2f62      	cmp	r7, #98	@ 0x62
 80034ba:	d80a      	bhi.n	80034d2 <_printf_i+0x32>
 80034bc:	2f00      	cmp	r7, #0
 80034be:	f000 80d2 	beq.w	8003666 <_printf_i+0x1c6>
 80034c2:	2f58      	cmp	r7, #88	@ 0x58
 80034c4:	f000 80b9 	beq.w	800363a <_printf_i+0x19a>
 80034c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034d0:	e03a      	b.n	8003548 <_printf_i+0xa8>
 80034d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034d6:	2b15      	cmp	r3, #21
 80034d8:	d8f6      	bhi.n	80034c8 <_printf_i+0x28>
 80034da:	a101      	add	r1, pc, #4	@ (adr r1, 80034e0 <_printf_i+0x40>)
 80034dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034e0:	08003539 	.word	0x08003539
 80034e4:	0800354d 	.word	0x0800354d
 80034e8:	080034c9 	.word	0x080034c9
 80034ec:	080034c9 	.word	0x080034c9
 80034f0:	080034c9 	.word	0x080034c9
 80034f4:	080034c9 	.word	0x080034c9
 80034f8:	0800354d 	.word	0x0800354d
 80034fc:	080034c9 	.word	0x080034c9
 8003500:	080034c9 	.word	0x080034c9
 8003504:	080034c9 	.word	0x080034c9
 8003508:	080034c9 	.word	0x080034c9
 800350c:	0800364d 	.word	0x0800364d
 8003510:	08003577 	.word	0x08003577
 8003514:	08003607 	.word	0x08003607
 8003518:	080034c9 	.word	0x080034c9
 800351c:	080034c9 	.word	0x080034c9
 8003520:	0800366f 	.word	0x0800366f
 8003524:	080034c9 	.word	0x080034c9
 8003528:	08003577 	.word	0x08003577
 800352c:	080034c9 	.word	0x080034c9
 8003530:	080034c9 	.word	0x080034c9
 8003534:	0800360f 	.word	0x0800360f
 8003538:	6833      	ldr	r3, [r6, #0]
 800353a:	1d1a      	adds	r2, r3, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6032      	str	r2, [r6, #0]
 8003540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003544:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003548:	2301      	movs	r3, #1
 800354a:	e09d      	b.n	8003688 <_printf_i+0x1e8>
 800354c:	6833      	ldr	r3, [r6, #0]
 800354e:	6820      	ldr	r0, [r4, #0]
 8003550:	1d19      	adds	r1, r3, #4
 8003552:	6031      	str	r1, [r6, #0]
 8003554:	0606      	lsls	r6, r0, #24
 8003556:	d501      	bpl.n	800355c <_printf_i+0xbc>
 8003558:	681d      	ldr	r5, [r3, #0]
 800355a:	e003      	b.n	8003564 <_printf_i+0xc4>
 800355c:	0645      	lsls	r5, r0, #25
 800355e:	d5fb      	bpl.n	8003558 <_printf_i+0xb8>
 8003560:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003564:	2d00      	cmp	r5, #0
 8003566:	da03      	bge.n	8003570 <_printf_i+0xd0>
 8003568:	232d      	movs	r3, #45	@ 0x2d
 800356a:	426d      	negs	r5, r5
 800356c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003570:	4859      	ldr	r0, [pc, #356]	@ (80036d8 <_printf_i+0x238>)
 8003572:	230a      	movs	r3, #10
 8003574:	e011      	b.n	800359a <_printf_i+0xfa>
 8003576:	6821      	ldr	r1, [r4, #0]
 8003578:	6833      	ldr	r3, [r6, #0]
 800357a:	0608      	lsls	r0, r1, #24
 800357c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003580:	d402      	bmi.n	8003588 <_printf_i+0xe8>
 8003582:	0649      	lsls	r1, r1, #25
 8003584:	bf48      	it	mi
 8003586:	b2ad      	uxthmi	r5, r5
 8003588:	2f6f      	cmp	r7, #111	@ 0x6f
 800358a:	4853      	ldr	r0, [pc, #332]	@ (80036d8 <_printf_i+0x238>)
 800358c:	6033      	str	r3, [r6, #0]
 800358e:	bf14      	ite	ne
 8003590:	230a      	movne	r3, #10
 8003592:	2308      	moveq	r3, #8
 8003594:	2100      	movs	r1, #0
 8003596:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800359a:	6866      	ldr	r6, [r4, #4]
 800359c:	60a6      	str	r6, [r4, #8]
 800359e:	2e00      	cmp	r6, #0
 80035a0:	bfa2      	ittt	ge
 80035a2:	6821      	ldrge	r1, [r4, #0]
 80035a4:	f021 0104 	bicge.w	r1, r1, #4
 80035a8:	6021      	strge	r1, [r4, #0]
 80035aa:	b90d      	cbnz	r5, 80035b0 <_printf_i+0x110>
 80035ac:	2e00      	cmp	r6, #0
 80035ae:	d04b      	beq.n	8003648 <_printf_i+0x1a8>
 80035b0:	4616      	mov	r6, r2
 80035b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80035b6:	fb03 5711 	mls	r7, r3, r1, r5
 80035ba:	5dc7      	ldrb	r7, [r0, r7]
 80035bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035c0:	462f      	mov	r7, r5
 80035c2:	42bb      	cmp	r3, r7
 80035c4:	460d      	mov	r5, r1
 80035c6:	d9f4      	bls.n	80035b2 <_printf_i+0x112>
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d10b      	bne.n	80035e4 <_printf_i+0x144>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	07df      	lsls	r7, r3, #31
 80035d0:	d508      	bpl.n	80035e4 <_printf_i+0x144>
 80035d2:	6923      	ldr	r3, [r4, #16]
 80035d4:	6861      	ldr	r1, [r4, #4]
 80035d6:	4299      	cmp	r1, r3
 80035d8:	bfde      	ittt	le
 80035da:	2330      	movle	r3, #48	@ 0x30
 80035dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035e4:	1b92      	subs	r2, r2, r6
 80035e6:	6122      	str	r2, [r4, #16]
 80035e8:	f8cd a000 	str.w	sl, [sp]
 80035ec:	464b      	mov	r3, r9
 80035ee:	aa03      	add	r2, sp, #12
 80035f0:	4621      	mov	r1, r4
 80035f2:	4640      	mov	r0, r8
 80035f4:	f7ff fee6 	bl	80033c4 <_printf_common>
 80035f8:	3001      	adds	r0, #1
 80035fa:	d14a      	bne.n	8003692 <_printf_i+0x1f2>
 80035fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003600:	b004      	add	sp, #16
 8003602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	f043 0320 	orr.w	r3, r3, #32
 800360c:	6023      	str	r3, [r4, #0]
 800360e:	4833      	ldr	r0, [pc, #204]	@ (80036dc <_printf_i+0x23c>)
 8003610:	2778      	movs	r7, #120	@ 0x78
 8003612:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	6831      	ldr	r1, [r6, #0]
 800361a:	061f      	lsls	r7, r3, #24
 800361c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003620:	d402      	bmi.n	8003628 <_printf_i+0x188>
 8003622:	065f      	lsls	r7, r3, #25
 8003624:	bf48      	it	mi
 8003626:	b2ad      	uxthmi	r5, r5
 8003628:	6031      	str	r1, [r6, #0]
 800362a:	07d9      	lsls	r1, r3, #31
 800362c:	bf44      	itt	mi
 800362e:	f043 0320 	orrmi.w	r3, r3, #32
 8003632:	6023      	strmi	r3, [r4, #0]
 8003634:	b11d      	cbz	r5, 800363e <_printf_i+0x19e>
 8003636:	2310      	movs	r3, #16
 8003638:	e7ac      	b.n	8003594 <_printf_i+0xf4>
 800363a:	4827      	ldr	r0, [pc, #156]	@ (80036d8 <_printf_i+0x238>)
 800363c:	e7e9      	b.n	8003612 <_printf_i+0x172>
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	f023 0320 	bic.w	r3, r3, #32
 8003644:	6023      	str	r3, [r4, #0]
 8003646:	e7f6      	b.n	8003636 <_printf_i+0x196>
 8003648:	4616      	mov	r6, r2
 800364a:	e7bd      	b.n	80035c8 <_printf_i+0x128>
 800364c:	6833      	ldr	r3, [r6, #0]
 800364e:	6825      	ldr	r5, [r4, #0]
 8003650:	6961      	ldr	r1, [r4, #20]
 8003652:	1d18      	adds	r0, r3, #4
 8003654:	6030      	str	r0, [r6, #0]
 8003656:	062e      	lsls	r6, r5, #24
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	d501      	bpl.n	8003660 <_printf_i+0x1c0>
 800365c:	6019      	str	r1, [r3, #0]
 800365e:	e002      	b.n	8003666 <_printf_i+0x1c6>
 8003660:	0668      	lsls	r0, r5, #25
 8003662:	d5fb      	bpl.n	800365c <_printf_i+0x1bc>
 8003664:	8019      	strh	r1, [r3, #0]
 8003666:	2300      	movs	r3, #0
 8003668:	6123      	str	r3, [r4, #16]
 800366a:	4616      	mov	r6, r2
 800366c:	e7bc      	b.n	80035e8 <_printf_i+0x148>
 800366e:	6833      	ldr	r3, [r6, #0]
 8003670:	1d1a      	adds	r2, r3, #4
 8003672:	6032      	str	r2, [r6, #0]
 8003674:	681e      	ldr	r6, [r3, #0]
 8003676:	6862      	ldr	r2, [r4, #4]
 8003678:	2100      	movs	r1, #0
 800367a:	4630      	mov	r0, r6
 800367c:	f7fc fdb0 	bl	80001e0 <memchr>
 8003680:	b108      	cbz	r0, 8003686 <_printf_i+0x1e6>
 8003682:	1b80      	subs	r0, r0, r6
 8003684:	6060      	str	r0, [r4, #4]
 8003686:	6863      	ldr	r3, [r4, #4]
 8003688:	6123      	str	r3, [r4, #16]
 800368a:	2300      	movs	r3, #0
 800368c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003690:	e7aa      	b.n	80035e8 <_printf_i+0x148>
 8003692:	6923      	ldr	r3, [r4, #16]
 8003694:	4632      	mov	r2, r6
 8003696:	4649      	mov	r1, r9
 8003698:	4640      	mov	r0, r8
 800369a:	47d0      	blx	sl
 800369c:	3001      	adds	r0, #1
 800369e:	d0ad      	beq.n	80035fc <_printf_i+0x15c>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	079b      	lsls	r3, r3, #30
 80036a4:	d413      	bmi.n	80036ce <_printf_i+0x22e>
 80036a6:	68e0      	ldr	r0, [r4, #12]
 80036a8:	9b03      	ldr	r3, [sp, #12]
 80036aa:	4298      	cmp	r0, r3
 80036ac:	bfb8      	it	lt
 80036ae:	4618      	movlt	r0, r3
 80036b0:	e7a6      	b.n	8003600 <_printf_i+0x160>
 80036b2:	2301      	movs	r3, #1
 80036b4:	4632      	mov	r2, r6
 80036b6:	4649      	mov	r1, r9
 80036b8:	4640      	mov	r0, r8
 80036ba:	47d0      	blx	sl
 80036bc:	3001      	adds	r0, #1
 80036be:	d09d      	beq.n	80035fc <_printf_i+0x15c>
 80036c0:	3501      	adds	r5, #1
 80036c2:	68e3      	ldr	r3, [r4, #12]
 80036c4:	9903      	ldr	r1, [sp, #12]
 80036c6:	1a5b      	subs	r3, r3, r1
 80036c8:	42ab      	cmp	r3, r5
 80036ca:	dcf2      	bgt.n	80036b2 <_printf_i+0x212>
 80036cc:	e7eb      	b.n	80036a6 <_printf_i+0x206>
 80036ce:	2500      	movs	r5, #0
 80036d0:	f104 0619 	add.w	r6, r4, #25
 80036d4:	e7f5      	b.n	80036c2 <_printf_i+0x222>
 80036d6:	bf00      	nop
 80036d8:	080058d5 	.word	0x080058d5
 80036dc:	080058e6 	.word	0x080058e6

080036e0 <_sbrk_r>:
 80036e0:	b538      	push	{r3, r4, r5, lr}
 80036e2:	4d06      	ldr	r5, [pc, #24]	@ (80036fc <_sbrk_r+0x1c>)
 80036e4:	2300      	movs	r3, #0
 80036e6:	4604      	mov	r4, r0
 80036e8:	4608      	mov	r0, r1
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	f7fd ff22 	bl	8001534 <_sbrk>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d102      	bne.n	80036fa <_sbrk_r+0x1a>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	b103      	cbz	r3, 80036fa <_sbrk_r+0x1a>
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
 80036fc:	2000066c 	.word	0x2000066c

08003700 <_realloc_r>:
 8003700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003704:	4680      	mov	r8, r0
 8003706:	4615      	mov	r5, r2
 8003708:	460c      	mov	r4, r1
 800370a:	b921      	cbnz	r1, 8003716 <_realloc_r+0x16>
 800370c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003710:	4611      	mov	r1, r2
 8003712:	f7ff bc73 	b.w	8002ffc <_malloc_r>
 8003716:	b92a      	cbnz	r2, 8003724 <_realloc_r+0x24>
 8003718:	f7ff fc04 	bl	8002f24 <_free_r>
 800371c:	2400      	movs	r4, #0
 800371e:	4620      	mov	r0, r4
 8003720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003724:	f000 f81a 	bl	800375c <_malloc_usable_size_r>
 8003728:	4285      	cmp	r5, r0
 800372a:	4606      	mov	r6, r0
 800372c:	d802      	bhi.n	8003734 <_realloc_r+0x34>
 800372e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003732:	d8f4      	bhi.n	800371e <_realloc_r+0x1e>
 8003734:	4629      	mov	r1, r5
 8003736:	4640      	mov	r0, r8
 8003738:	f7ff fc60 	bl	8002ffc <_malloc_r>
 800373c:	4607      	mov	r7, r0
 800373e:	2800      	cmp	r0, #0
 8003740:	d0ec      	beq.n	800371c <_realloc_r+0x1c>
 8003742:	42b5      	cmp	r5, r6
 8003744:	462a      	mov	r2, r5
 8003746:	4621      	mov	r1, r4
 8003748:	bf28      	it	cs
 800374a:	4632      	movcs	r2, r6
 800374c:	f7ff fbdc 	bl	8002f08 <memcpy>
 8003750:	4621      	mov	r1, r4
 8003752:	4640      	mov	r0, r8
 8003754:	f7ff fbe6 	bl	8002f24 <_free_r>
 8003758:	463c      	mov	r4, r7
 800375a:	e7e0      	b.n	800371e <_realloc_r+0x1e>

0800375c <_malloc_usable_size_r>:
 800375c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003760:	1f18      	subs	r0, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	bfbc      	itt	lt
 8003766:	580b      	ldrlt	r3, [r1, r0]
 8003768:	18c0      	addlt	r0, r0, r3
 800376a:	4770      	bx	lr

0800376c <_init>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr

08003778 <_fini>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	bf00      	nop
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr
