
Cornerstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003140  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002174  080032e0  080032e0  000042e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005454  08005454  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  08005454  08005454  00006454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800545c  0800545c  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800545c  0800545c  0000645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005460  08005460  00006460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005464  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  20000084  080054e8  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  080054e8  00007654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008655  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a39  00000000  00000000  0000f709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00011148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000675  00000000  00000000  000119d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162d3  00000000  00000000  00012045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0d1  00000000  00000000  00028318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d72  00000000  00000000  000343e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb15b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002744  00000000  00000000  000bb1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000bd8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080032c8 	.word	0x080032c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080032c8 	.word	0x080032c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fdfe 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f8ac 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f936 	bl	80007ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000580:	f000 f906 	bl	8000790 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000584:	f000 f98c 	bl	80008a0 <ssd1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

	  // UP
	  HAL_Delay(100);
 8000588:	2064      	movs	r0, #100	@ 0x64
 800058a:	f000 fe65 	bl	8001258 <HAL_Delay>
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET)
 800058e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000592:	4847      	ldr	r0, [pc, #284]	@ (80006b0 <main+0x140>)
 8000594:	f001 f8ee 	bl	8001774 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <main+0x36>
      {
		  pressedUpButton = true;
 800059e:	4b45      	ldr	r3, [pc, #276]	@ (80006b4 <main+0x144>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
		  continue;
 80005a4:	e082      	b.n	80006ac <main+0x13c>
      }
	  else if (pressedUpButton == true)
 80005a6:	4b43      	ldr	r3, [pc, #268]	@ (80006b4 <main+0x144>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d01d      	beq.n	80005ea <main+0x7a>
	  {
		  pressedUpButton = false;
 80005ae:	4b41      	ldr	r3, [pc, #260]	@ (80006b4 <main+0x144>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
		  if(menu_option > 0) {
 80005b4:	4b40      	ldr	r3, [pc, #256]	@ (80006b8 <main+0x148>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d074      	beq.n	80006a6 <main+0x136>
			  menu_option --;
 80005bc:	4b3e      	ldr	r3, [pc, #248]	@ (80006b8 <main+0x148>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4a3d      	ldr	r2, [pc, #244]	@ (80006b8 <main+0x148>)
 80005c4:	6013      	str	r3, [r2, #0]
			  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 80005c6:	4b3c      	ldr	r3, [pc, #240]	@ (80006b8 <main+0x148>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b3b      	ldr	r3, [pc, #236]	@ (80006bc <main+0x14c>)
 80005ce:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80005d2:	4b39      	ldr	r3, [pc, #228]	@ (80006b8 <main+0x148>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a39      	ldr	r2, [pc, #228]	@ (80006bc <main+0x14c>)
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	4413      	add	r3, r2
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a36      	ldr	r2, [pc, #216]	@ (80006b8 <main+0x148>)
 80005e0:	6812      	ldr	r2, [r2, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	f000 fc02 	bl	8000dec <ssd1306_TestMenu>
		  }
		  continue;
 80005e8:	e05d      	b.n	80006a6 <main+0x136>
	  }
	  // DOWN
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 80005ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ee:	4830      	ldr	r0, [pc, #192]	@ (80006b0 <main+0x140>)
 80005f0:	f001 f8c0 	bl	8001774 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d103      	bne.n	8000602 <main+0x92>
      {
		  pressedDownButton = true;
 80005fa:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <main+0x150>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
		  continue;
 8000600:	e054      	b.n	80006ac <main+0x13c>
      }
	  else if (pressedDownButton == true)
 8000602:	4b2f      	ldr	r3, [pc, #188]	@ (80006c0 <main+0x150>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d01e      	beq.n	8000648 <main+0xd8>
	  {
		  pressedDownButton = false;
 800060a:	4b2d      	ldr	r3, [pc, #180]	@ (80006c0 <main+0x150>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
		  if(menu_option < MENU_COUNT) {
 8000610:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <main+0x148>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2203      	movs	r2, #3
 8000616:	4293      	cmp	r3, r2
 8000618:	d247      	bcs.n	80006aa <main+0x13a>
			  menu_option ++;
 800061a:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <main+0x148>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	4a25      	ldr	r2, [pc, #148]	@ (80006b8 <main+0x148>)
 8000622:	6013      	str	r3, [r2, #0]
			  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <main+0x148>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <main+0x14c>)
 800062c:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <main+0x148>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	@ (80006bc <main+0x14c>)
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	4413      	add	r3, r2
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	4a1e      	ldr	r2, [pc, #120]	@ (80006b8 <main+0x148>)
 800063e:	6812      	ldr	r2, [r2, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	f000 fbd3 	bl	8000dec <ssd1306_TestMenu>
		  }
		  continue;
 8000646:	e030      	b.n	80006aa <main+0x13a>
	  }
	  // LEFT (BACK)
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000648:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800064c:	4818      	ldr	r0, [pc, #96]	@ (80006b0 <main+0x140>)
 800064e:	f001 f891 	bl	8001774 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d103      	bne.n	8000660 <main+0xf0>
      {
		  pressedLeftButton = true;
 8000658:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <main+0x154>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
		  continue;
 800065e:	e025      	b.n	80006ac <main+0x13c>
      }
	  else if (pressedLeftButton == true)
 8000660:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <main+0x154>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d005      	beq.n	8000674 <main+0x104>
	  {
		  pressedLeftButton = false;
 8000668:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <main+0x154>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
		  ssd1306_TurnOff();
 800066e:	f000 fc65 	bl	8000f3c <ssd1306_TurnOff>
		  continue;
 8000672:	e01b      	b.n	80006ac <main+0x13c>
	  }
	  // RIGHT (OKAY)
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET)
 8000674:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000678:	480d      	ldr	r0, [pc, #52]	@ (80006b0 <main+0x140>)
 800067a:	f001 f87b 	bl	8001774 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d103      	bne.n	800068c <main+0x11c>
      {
		  pressedRightButton = true;
 8000684:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <main+0x158>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
		  continue;
 800068a:	e00f      	b.n	80006ac <main+0x13c>
      }
	  else if (pressedRightButton == true)
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <main+0x158>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	f43f af79 	beq.w	8000588 <main+0x18>
	  {
		  pressedRightButton = false;
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <main+0x158>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
		  ssd1306_TestIntervalSetting(&timeBar, &TimeInterval);
 800069c:	490b      	ldr	r1, [pc, #44]	@ (80006cc <main+0x15c>)
 800069e:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <main+0x160>)
 80006a0:	f000 fbea 	bl	8000e78 <ssd1306_TestIntervalSetting>
		  continue;
 80006a4:	e002      	b.n	80006ac <main+0x13c>
		  continue;
 80006a6:	bf00      	nop
 80006a8:	e76e      	b.n	8000588 <main+0x18>
		  continue;
 80006aa:	bf00      	nop
	  HAL_Delay(100);
 80006ac:	e76c      	b.n	8000588 <main+0x18>
 80006ae:	bf00      	nop
 80006b0:	40020400 	.word	0x40020400
 80006b4:	200000f8 	.word	0x200000f8
 80006b8:	200000f4 	.word	0x200000f4
 80006bc:	20000000 	.word	0x20000000
 80006c0:	200000f9 	.word	0x200000f9
 80006c4:	200000fa 	.word	0x200000fa
 80006c8:	200000fb 	.word	0x200000fb
 80006cc:	20000020 	.word	0x20000020
 80006d0:	20000024 	.word	0x20000024

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	@ 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	@ 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f98a 	bl	80029fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <SystemClock_Config+0xb4>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <SystemClock_Config+0xb4>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	@ 0x40
 8000708:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <SystemClock_Config+0xb4>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <SystemClock_Config+0xb8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1b      	ldr	r2, [pc, #108]	@ (800078c <SystemClock_Config+0xb8>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <SystemClock_Config+0xb8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800073c:	2300      	movs	r3, #0
 800073e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fcdb 	bl	8002100 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000750:	f000 f866 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f001 ff3e 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800077a:	f000 f851 	bl	8000820 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	@ 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_I2C1_Init+0x50>)
 8000796:	4a13      	ldr	r2, [pc, #76]	@ (80007e4 <MX_I2C1_Init+0x54>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_I2C1_Init+0x50>)
 800079c:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <MX_I2C1_Init+0x58>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_I2C1_Init+0x50>)
 80007ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_I2C1_Init+0x50>)
 80007ce:	f000 ffe9 	bl	80017a4 <HAL_I2C_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d8:	f000 f822 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000a0 	.word	0x200000a0
 80007e4:	40005400 	.word	0x40005400
 80007e8:	00061a80 	.word	0x00061a80

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_GPIO_Init+0x30>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <MX_GPIO_Init+0x30>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_GPIO_Init+0x30>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <Error_Handler+0x8>

0800082c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af04      	add	r7, sp, #16
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	9302      	str	r3, [sp, #8]
 800084c:	2301      	movs	r3, #1
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	2200      	movs	r2, #0
 8000858:	2178      	movs	r1, #120	@ 0x78
 800085a:	4803      	ldr	r0, [pc, #12]	@ (8000868 <ssd1306_WriteCommand+0x2c>)
 800085c:	f001 f8e6 	bl	8001a2c <HAL_I2C_Mem_Write>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000a0 	.word	0x200000a0

0800086c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af04      	add	r7, sp, #16
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b29b      	uxth	r3, r3
 800087a:	f04f 32ff 	mov.w	r2, #4294967295
 800087e:	9202      	str	r2, [sp, #8]
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	2240      	movs	r2, #64	@ 0x40
 800088a:	2178      	movs	r1, #120	@ 0x78
 800088c:	4803      	ldr	r0, [pc, #12]	@ (800089c <ssd1306_WriteData+0x30>)
 800088e:	f001 f8cd 	bl	8001a2c <HAL_I2C_Mem_Write>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000a0 	.word	0x200000a0

080008a0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80008a4:	f7ff ffc2 	bl	800082c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80008a8:	2064      	movs	r0, #100	@ 0x64
 80008aa:	f000 fcd5 	bl	8001258 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 fa7e 	bl	8000db0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80008b4:	2020      	movs	r0, #32
 80008b6:	f7ff ffc1 	bl	800083c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ffbe 	bl	800083c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008c0:	20b0      	movs	r0, #176	@ 0xb0
 80008c2:	f7ff ffbb 	bl	800083c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80008c6:	20c8      	movs	r0, #200	@ 0xc8
 80008c8:	f7ff ffb8 	bl	800083c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff ffb5 	bl	800083c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80008d2:	2010      	movs	r0, #16
 80008d4:	f7ff ffb2 	bl	800083c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80008d8:	2040      	movs	r0, #64	@ 0x40
 80008da:	f7ff ffaf 	bl	800083c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80008de:	20ff      	movs	r0, #255	@ 0xff
 80008e0:	f000 fa53 	bl	8000d8a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80008e4:	20a1      	movs	r0, #161	@ 0xa1
 80008e6:	f7ff ffa9 	bl	800083c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80008ea:	20a6      	movs	r0, #166	@ 0xa6
 80008ec:	f7ff ffa6 	bl	800083c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80008f0:	20a8      	movs	r0, #168	@ 0xa8
 80008f2:	f7ff ffa3 	bl	800083c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80008f6:	203f      	movs	r0, #63	@ 0x3f
 80008f8:	f7ff ffa0 	bl	800083c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008fc:	20a4      	movs	r0, #164	@ 0xa4
 80008fe:	f7ff ff9d 	bl	800083c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000902:	20d3      	movs	r0, #211	@ 0xd3
 8000904:	f7ff ff9a 	bl	800083c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff ff97 	bl	800083c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800090e:	20d5      	movs	r0, #213	@ 0xd5
 8000910:	f7ff ff94 	bl	800083c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000914:	20f0      	movs	r0, #240	@ 0xf0
 8000916:	f7ff ff91 	bl	800083c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800091a:	20d9      	movs	r0, #217	@ 0xd9
 800091c:	f7ff ff8e 	bl	800083c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000920:	2022      	movs	r0, #34	@ 0x22
 8000922:	f7ff ff8b 	bl	800083c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000926:	20da      	movs	r0, #218	@ 0xda
 8000928:	f7ff ff88 	bl	800083c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800092c:	2012      	movs	r0, #18
 800092e:	f7ff ff85 	bl	800083c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000932:	20db      	movs	r0, #219	@ 0xdb
 8000934:	f7ff ff82 	bl	800083c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000938:	2020      	movs	r0, #32
 800093a:	f7ff ff7f 	bl	800083c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800093e:	208d      	movs	r0, #141	@ 0x8d
 8000940:	f7ff ff7c 	bl	800083c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000944:	2014      	movs	r0, #20
 8000946:	f7ff ff79 	bl	800083c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800094a:	2001      	movs	r0, #1
 800094c:	f000 fa30 	bl	8000db0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000950:	2000      	movs	r0, #0
 8000952:	f000 f80f 	bl	8000974 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000956:	f000 f825 	bl	80009a4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800095a:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <ssd1306_Init+0xd0>)
 800095c:	2200      	movs	r2, #0
 800095e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000960:	4b03      	ldr	r3, [pc, #12]	@ (8000970 <ssd1306_Init+0xd0>)
 8000962:	2200      	movs	r2, #0
 8000964:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000966:	4b02      	ldr	r3, [pc, #8]	@ (8000970 <ssd1306_Init+0xd0>)
 8000968:	2201      	movs	r2, #1
 800096a:	711a      	strb	r2, [r3, #4]
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200004fc 	.word	0x200004fc

08000974 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d101      	bne.n	8000988 <ssd1306_Fill+0x14>
 8000984:	2300      	movs	r3, #0
 8000986:	e000      	b.n	800098a <ssd1306_Fill+0x16>
 8000988:	23ff      	movs	r3, #255	@ 0xff
 800098a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800098e:	4619      	mov	r1, r3
 8000990:	4803      	ldr	r0, [pc, #12]	@ (80009a0 <ssd1306_Fill+0x2c>)
 8000992:	f002 f833 	bl	80029fc <memset>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000fc 	.word	0x200000fc

080009a4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	71fb      	strb	r3, [r7, #7]
 80009ae:	e016      	b.n	80009de <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	3b50      	subs	r3, #80	@ 0x50
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff40 	bl	800083c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff ff3d 	bl	800083c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80009c2:	2010      	movs	r0, #16
 80009c4:	f7ff ff3a 	bl	800083c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	01db      	lsls	r3, r3, #7
 80009cc:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <ssd1306_UpdateScreen+0x4c>)
 80009ce:	4413      	add	r3, r2
 80009d0:	2180      	movs	r1, #128	@ 0x80
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff4a 	bl	800086c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	3301      	adds	r3, #1
 80009dc:	71fb      	strb	r3, [r7, #7]
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b07      	cmp	r3, #7
 80009e2:	d9e5      	bls.n	80009b0 <ssd1306_UpdateScreen+0xc>
    }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000fc 	.word	0x200000fc

080009f4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	460b      	mov	r3, r1
 8000a00:	71bb      	strb	r3, [r7, #6]
 8000a02:	4613      	mov	r3, r2
 8000a04:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db3d      	blt.n	8000a8a <ssd1306_DrawPixel+0x96>
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a12:	d83a      	bhi.n	8000a8a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000a14:	797b      	ldrb	r3, [r7, #5]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d11a      	bne.n	8000a50 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	b2d8      	uxtb	r0, r3
 8000a22:	4603      	mov	r3, r0
 8000a24:	01db      	lsls	r3, r3, #7
 8000a26:	4413      	add	r3, r2
 8000a28:	4a1b      	ldr	r2, [pc, #108]	@ (8000a98 <ssd1306_DrawPixel+0xa4>)
 8000a2a:	5cd3      	ldrb	r3, [r2, r3]
 8000a2c:	b25a      	sxtb	r2, r3
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	f003 0307 	and.w	r3, r3, #7
 8000a34:	2101      	movs	r1, #1
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b259      	sxtb	r1, r3
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	4603      	mov	r3, r0
 8000a44:	01db      	lsls	r3, r3, #7
 8000a46:	4413      	add	r3, r2
 8000a48:	b2c9      	uxtb	r1, r1
 8000a4a:	4a13      	ldr	r2, [pc, #76]	@ (8000a98 <ssd1306_DrawPixel+0xa4>)
 8000a4c:	54d1      	strb	r1, [r2, r3]
 8000a4e:	e01d      	b.n	8000a8c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	b2d8      	uxtb	r0, r3
 8000a58:	4603      	mov	r3, r0
 8000a5a:	01db      	lsls	r3, r3, #7
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a98 <ssd1306_DrawPixel+0xa4>)
 8000a60:	5cd3      	ldrb	r3, [r2, r3]
 8000a62:	b25a      	sxtb	r2, r3
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	4013      	ands	r3, r2
 8000a78:	b259      	sxtb	r1, r3
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	01db      	lsls	r3, r3, #7
 8000a80:	4413      	add	r3, r2
 8000a82:	b2c9      	uxtb	r1, r1
 8000a84:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <ssd1306_DrawPixel+0xa4>)
 8000a86:	54d1      	strb	r1, [r2, r3]
 8000a88:	e000      	b.n	8000a8c <ssd1306_DrawPixel+0x98>
        return;
 8000a8a:	bf00      	nop
    }
}
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200000fc 	.word	0x200000fc

08000a9c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b089      	sub	sp, #36	@ 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4638      	mov	r0, r7
 8000aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000aaa:	4623      	mov	r3, r4
 8000aac:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	2b1f      	cmp	r3, #31
 8000ab2:	d902      	bls.n	8000aba <ssd1306_WriteChar+0x1e>
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	2b7e      	cmp	r3, #126	@ 0x7e
 8000ab8:	d901      	bls.n	8000abe <ssd1306_WriteChar+0x22>
        return 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e077      	b.n	8000bae <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000abe:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb8 <ssd1306_WriteChar+0x11c>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	783b      	ldrb	r3, [r7, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	2b80      	cmp	r3, #128	@ 0x80
 8000aca:	dc06      	bgt.n	8000ada <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000acc:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb8 <ssd1306_WriteChar+0x11c>)
 8000ace:	885b      	ldrh	r3, [r3, #2]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	787b      	ldrb	r3, [r7, #1]
 8000ad4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000ad6:	2b40      	cmp	r3, #64	@ 0x40
 8000ad8:	dd01      	ble.n	8000ade <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e067      	b.n	8000bae <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
 8000ae2:	e04e      	b.n	8000b82 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	3b20      	subs	r3, #32
 8000aea:	7879      	ldrb	r1, [r7, #1]
 8000aec:	fb01 f303 	mul.w	r3, r1, r3
 8000af0:	4619      	mov	r1, r3
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	440b      	add	r3, r1
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	e036      	b.n	8000b72 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d013      	beq.n	8000b3c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b14:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <ssd1306_WriteChar+0x11c>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4413      	add	r3, r2
 8000b20:	b2d8      	uxtb	r0, r3
 8000b22:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <ssd1306_WriteChar+0x11c>)
 8000b24:	885b      	ldrh	r3, [r3, #2]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000b34:	4619      	mov	r1, r3
 8000b36:	f7ff ff5d 	bl	80009f4 <ssd1306_DrawPixel>
 8000b3a:	e017      	b.n	8000b6c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <ssd1306_WriteChar+0x11c>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4413      	add	r3, r2
 8000b48:	b2d8      	uxtb	r0, r3
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <ssd1306_WriteChar+0x11c>)
 8000b4c:	885b      	ldrh	r3, [r3, #2]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	b2d9      	uxtb	r1, r3
 8000b58:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bf0c      	ite	eq
 8000b60:	2301      	moveq	r3, #1
 8000b62:	2300      	movne	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	f7ff ff44 	bl	80009f4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	783b      	ldrb	r3, [r7, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d3c3      	bcc.n	8000b04 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	787b      	ldrb	r3, [r7, #1]
 8000b84:	461a      	mov	r2, r3
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d3ab      	bcc.n	8000ae4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <ssd1306_WriteChar+0x11c>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d005      	beq.n	8000ba2 <ssd1306_WriteChar+0x106>
 8000b96:	68b9      	ldr	r1, [r7, #8]
 8000b98:	7bfa      	ldrb	r2, [r7, #15]
 8000b9a:	3a20      	subs	r2, #32
 8000b9c:	440a      	add	r2, r1
 8000b9e:	7812      	ldrb	r2, [r2, #0]
 8000ba0:	e000      	b.n	8000ba4 <ssd1306_WriteChar+0x108>
 8000ba2:	783a      	ldrb	r2, [r7, #0]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <ssd1306_WriteChar+0x11c>)
 8000baa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200004fc 	.word	0x200004fc

08000bbc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	4638      	mov	r0, r7
 8000bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000bca:	e013      	b.n	8000bf4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	7818      	ldrb	r0, [r3, #0]
 8000bd0:	7e3b      	ldrb	r3, [r7, #24]
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bd8:	f7ff ff60 	bl	8000a9c <ssd1306_WriteChar>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d002      	beq.n	8000bee <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	e008      	b.n	8000c00 <ssd1306_WriteString+0x44>
        }
        str++;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1e7      	bne.n	8000bcc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	460a      	mov	r2, r1
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	4613      	mov	r3, r2
 8000c16:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <ssd1306_SetCursor+0x2c>)
 8000c1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <ssd1306_SetCursor+0x2c>)
 8000c26:	805a      	strh	r2, [r3, #2]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	200004fc 	.word	0x200004fc

08000c38 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4623      	mov	r3, r4
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71bb      	strb	r3, [r7, #6]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	717b      	strb	r3, [r7, #5]
 8000c52:	4613      	mov	r3, r2
 8000c54:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	797b      	ldrb	r3, [r7, #5]
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	bf28      	it	cs
 8000c5e:	4613      	movcs	r3, r2
 8000c60:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8000c62:	797a      	ldrb	r2, [r7, #5]
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4293      	cmp	r3, r2
 8000c68:	bf38      	it	cc
 8000c6a:	4613      	movcc	r3, r2
 8000c6c:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8000c6e:	79ba      	ldrb	r2, [r7, #6]
 8000c70:	793b      	ldrb	r3, [r7, #4]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	bf28      	it	cs
 8000c76:	4613      	movcs	r3, r2
 8000c78:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8000c7a:	793a      	ldrb	r2, [r7, #4]
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	bf38      	it	cc
 8000c82:	4613      	movcc	r3, r2
 8000c84:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000c86:	7afb      	ldrb	r3, [r7, #11]
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e017      	b.n	8000cbc <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000c8c:	7b7b      	ldrb	r3, [r7, #13]
 8000c8e:	73bb      	strb	r3, [r7, #14]
 8000c90:	e009      	b.n	8000ca6 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8000c92:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c96:	7bf9      	ldrb	r1, [r7, #15]
 8000c98:	7bbb      	ldrb	r3, [r7, #14]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff feaa 	bl	80009f4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	73bb      	strb	r3, [r7, #14]
 8000ca6:	7bba      	ldrb	r2, [r7, #14]
 8000ca8:	7b3b      	ldrb	r3, [r7, #12]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d803      	bhi.n	8000cb6 <ssd1306_FillRectangle+0x7e>
 8000cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	daed      	bge.n	8000c92 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	7bfa      	ldrb	r2, [r7, #15]
 8000cbe:	7abb      	ldrb	r3, [r7, #10]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d803      	bhi.n	8000ccc <ssd1306_FillRectangle+0x94>
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cc8:	d9e0      	bls.n	8000c8c <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
}
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}

08000cd4 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	603a      	str	r2, [r7, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	71bb      	strb	r3, [r7, #6]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	3307      	adds	r3, #7
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	da00      	bge.n	8000cf4 <ssd1306_DrawBitmap+0x20>
 8000cf2:	3307      	adds	r3, #7
 8000cf4:	10db      	asrs	r3, r3, #3
 8000cf6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db3e      	blt.n	8000d82 <ssd1306_DrawBitmap+0xae>
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d08:	d83b      	bhi.n	8000d82 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73bb      	strb	r3, [r7, #14]
 8000d0e:	e033      	b.n	8000d78 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	737b      	strb	r3, [r7, #13]
 8000d14:	e026      	b.n	8000d64 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000d16:	7b7b      	ldrb	r3, [r7, #13]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	e00d      	b.n	8000d44 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000d28:	7bbb      	ldrb	r3, [r7, #14]
 8000d2a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000d2e:	fb02 f303 	mul.w	r3, r2, r3
 8000d32:	7b7a      	ldrb	r2, [r7, #13]
 8000d34:	08d2      	lsrs	r2, r2, #3
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	4413      	add	r3, r2
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da08      	bge.n	8000d5e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	7b7b      	ldrb	r3, [r7, #13]
 8000d50:	4413      	add	r3, r2
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	7f3a      	ldrb	r2, [r7, #28]
 8000d56:	79b9      	ldrb	r1, [r7, #6]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fe4b 	bl	80009f4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	3301      	adds	r3, #1
 8000d62:	737b      	strb	r3, [r7, #13]
 8000d64:	7b7a      	ldrb	r2, [r7, #13]
 8000d66:	797b      	ldrb	r3, [r7, #5]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d3d4      	bcc.n	8000d16 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000d6c:	7bbb      	ldrb	r3, [r7, #14]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	73bb      	strb	r3, [r7, #14]
 8000d72:	79bb      	ldrb	r3, [r7, #6]
 8000d74:	3301      	adds	r3, #1
 8000d76:	71bb      	strb	r3, [r7, #6]
 8000d78:	7bba      	ldrb	r2, [r7, #14]
 8000d7a:	7e3b      	ldrb	r3, [r7, #24]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d3c7      	bcc.n	8000d10 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000d80:	e000      	b.n	8000d84 <ssd1306_DrawBitmap+0xb0>
        return;
 8000d82:	bf00      	nop
}
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000d94:	2381      	movs	r3, #129	@ 0x81
 8000d96:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fd4e 	bl	800083c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fd4a 	bl	800083c <ssd1306_WriteCommand>
}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d005      	beq.n	8000dcc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000dc0:	23af      	movs	r3, #175	@ 0xaf
 8000dc2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <ssd1306_SetDisplayOn+0x38>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	715a      	strb	r2, [r3, #5]
 8000dca:	e004      	b.n	8000dd6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000dcc:	23ae      	movs	r3, #174	@ 0xae
 8000dce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <ssd1306_SetDisplayOn+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fd2f 	bl	800083c <ssd1306_WriteCommand>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200004fc 	.word	0x200004fc

08000dec <ssd1306_TestMenu>:





void ssd1306_TestMenu(char *first_row, char *second_row, Menu_Option *current_option) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
#ifdef SSD1306_INCLUDE_FONT_11x18

    ssd1306_Fill(Black);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff fdbb 	bl	8000974 <ssd1306_Fill>
    if(current_option != 0) {
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d009      	beq.n	8000e18 <ssd1306_TestMenu+0x2c>
    	ssd1306_DrawBitmap(32,0,bitmap_arrow_up_64x14,64,14,White);
 8000e04:	2301      	movs	r3, #1
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	230e      	movs	r3, #14
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2340      	movs	r3, #64	@ 0x40
 8000e0e:	4a17      	ldr	r2, [pc, #92]	@ (8000e6c <ssd1306_TestMenu+0x80>)
 8000e10:	2100      	movs	r1, #0
 8000e12:	2020      	movs	r0, #32
 8000e14:	f7ff ff5e 	bl	8000cd4 <ssd1306_DrawBitmap>
    }
    //ssd1306_UpdateScreen();
    ssd1306_SetCursor(0, 14);
 8000e18:	210e      	movs	r1, #14
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fef4 	bl	8000c08 <ssd1306_SetCursor>
    ssd1306_WriteString(first_row, Font_11x18, White);
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <ssd1306_TestMenu+0x84>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	9200      	str	r2, [sp, #0]
 8000e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f7ff fec7 	bl	8000bbc <ssd1306_WriteString>
    ssd1306_SetCursor(0, 14+18);
 8000e2e:	2120      	movs	r1, #32
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff fee9 	bl	8000c08 <ssd1306_SetCursor>
    ssd1306_WriteString(second_row, Font_11x18, White);
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <ssd1306_TestMenu+0x84>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	9200      	str	r2, [sp, #0]
 8000e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e3e:	68b8      	ldr	r0, [r7, #8]
 8000e40:	f7ff febc 	bl	8000bbc <ssd1306_WriteString>
    if(current_option <= 2) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d809      	bhi.n	8000e5e <ssd1306_TestMenu+0x72>
    	ssd1306_DrawBitmap(32,50,bitmap_arrow_down_64x14,64,14,White);
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	230e      	movs	r3, #14
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2340      	movs	r3, #64	@ 0x40
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <ssd1306_TestMenu+0x88>)
 8000e56:	2132      	movs	r1, #50	@ 0x32
 8000e58:	2020      	movs	r0, #32
 8000e5a:	f7ff ff3b 	bl	8000cd4 <ssd1306_DrawBitmap>
    }
    ssd1306_UpdateScreen();
 8000e5e:	f7ff fda1 	bl	80009a4 <ssd1306_UpdateScreen>
#endif
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08005398 	.word	0x08005398
 8000e70:	08005310 	.word	0x08005310
 8000e74:	08005328 	.word	0x08005328

08000e78 <ssd1306_TestIntervalSetting>:


void ssd1306_TestIntervalSetting(int *timeBar, unsigned int *timeInterval) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]

	ssd1306_Fill(Black);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff fd76 	bl	8000974 <ssd1306_Fill>
	ssd1306_SetCursor(44, 4);
 8000e88:	2104      	movs	r1, #4
 8000e8a:	202c      	movs	r0, #44	@ 0x2c
 8000e8c:	f7ff febc 	bl	8000c08 <ssd1306_SetCursor>
	ssd1306_FillRectangle(4, 20, 36, 44, White);
 8000e90:	2301      	movs	r3, #1
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	232c      	movs	r3, #44	@ 0x2c
 8000e96:	2224      	movs	r2, #36	@ 0x24
 8000e98:	2114      	movs	r1, #20
 8000e9a:	2004      	movs	r0, #4
 8000e9c:	f7ff fecc 	bl	8000c38 <ssd1306_FillRectangle>

	ssd1306_FillRectangle(53, 20, 84, 44, White);
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	232c      	movs	r3, #44	@ 0x2c
 8000ea6:	2254      	movs	r2, #84	@ 0x54
 8000ea8:	2114      	movs	r1, #20
 8000eaa:	2035      	movs	r0, #53	@ 0x35
 8000eac:	f7ff fec4 	bl	8000c38 <ssd1306_FillRectangle>

	ssd1306_FillRectangle(93, 20, 124, 44, White);
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	232c      	movs	r3, #44	@ 0x2c
 8000eb6:	227c      	movs	r2, #124	@ 0x7c
 8000eb8:	2114      	movs	r1, #20
 8000eba:	205d      	movs	r0, #93	@ 0x5d
 8000ebc:	f7ff febc 	bl	8000c38 <ssd1306_FillRectangle>

	char str[2] = "";
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	81bb      	strh	r3, [r7, #12]

	sprintf(str, "%d", timeBar[0]);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4917      	ldr	r1, [pc, #92]	@ (8000f2c <ssd1306_TestIntervalSetting+0xb4>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fd5a 	bl	8002988 <siprintf>
	ssd1306_WriteString(str, Font_16x24, Black);
 8000ed4:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <ssd1306_TestIntervalSetting+0xb8>)
 8000ed6:	f107 000c 	add.w	r0, r7, #12
 8000eda:	2200      	movs	r2, #0
 8000edc:	9200      	str	r2, [sp, #0]
 8000ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee0:	f7ff fe6c 	bl	8000bbc <ssd1306_WriteString>

	ssd1306_WriteString(":", Font_16x24, Black);
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <ssd1306_TestIntervalSetting+0xb8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	9200      	str	r2, [sp, #0]
 8000eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eec:	4811      	ldr	r0, [pc, #68]	@ (8000f34 <ssd1306_TestIntervalSetting+0xbc>)
 8000eee:	f7ff fe65 	bl	8000bbc <ssd1306_WriteString>

	sprintf(str, "%d", timeBar[1]);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	490b      	ldr	r1, [pc, #44]	@ (8000f2c <ssd1306_TestIntervalSetting+0xb4>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fd42 	bl	8002988 <siprintf>
	ssd1306_WriteString(str, Font_16x24, Black);
 8000f04:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <ssd1306_TestIntervalSetting+0xb8>)
 8000f06:	f107 000c 	add.w	r0, r7, #12
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	9200      	str	r2, [sp, #0]
 8000f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f10:	f7ff fe54 	bl	8000bbc <ssd1306_WriteString>

	ssd1306_WriteString("OK", Font_16x24, Black);
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <ssd1306_TestIntervalSetting+0xb8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	9200      	str	r2, [sp, #0]
 8000f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f1c:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <ssd1306_TestIntervalSetting+0xc0>)
 8000f1e:	f7ff fe4d 	bl	8000bbc <ssd1306_WriteString>

}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	08003388 	.word	0x08003388
 8000f30:	0800531c 	.word	0x0800531c
 8000f34:	0800338c 	.word	0x0800338c
 8000f38:	08003390 	.word	0x08003390

08000f3c <ssd1306_TurnOff>:
void ssd1306_TestDurationSetting(int *timeBar, unsigned int *timeDuration) {

}


void ssd1306_TurnOff() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f7ff fd17 	bl	8000974 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000f46:	f7ff fd2d 	bl	80009a4 <ssd1306_UpdateScreen>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f66:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <HAL_I2C_MspInit+0x84>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d12b      	bne.n	800101a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fde:	23c0      	movs	r3, #192	@ 0xc0
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe2:	2312      	movs	r3, #18
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <HAL_I2C_MspInit+0x8c>)
 8000ffa:	f000 fa37 	bl	800146c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a08      	ldr	r2, [pc, #32]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8001008:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	@ 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40005400 	.word	0x40005400
 8001028:	40023800 	.word	0x40023800
 800102c:	40020400 	.word	0x40020400

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <NMI_Handler+0x4>

08001038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <MemManage_Handler+0x4>

08001048 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <UsageFault_Handler+0x4>

08001058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001086:	f000 f8c7 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	@ (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f001 fca4 	bl	8002a0c <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20020000 	.word	0x20020000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	20000504 	.word	0x20000504
 80010f8:	20000658 	.word	0x20000658

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	@ (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001158 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001124:	f7ff ffea 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	@ (800115c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	@ (8001160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	@ (800116c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114e:	f001 fc63 	bl	8002a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fa0d 	bl	8000570 <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001164:	08005464 	.word	0x08005464
  ldr r2, =_sbss
 8001168:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800116c:	20000654 	.word	0x20000654

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	@ (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f931 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fed2 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f93b 	bl	8001452 <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f911 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	@ (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000028 	.word	0x20000028
 8001210:	20000030 	.word	0x20000030
 8001214:	2000002c 	.word	0x2000002c

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000030 	.word	0x20000030
 800123c:	20000508 	.word	0x20000508

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000508 	.word	0x20000508

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000030 	.word	0x20000030

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	@ (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	@ (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff47 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff5c 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff8e 	bl	8001358 <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffb0 	bl	80013c0 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	e159      	b.n	800173c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001488:	2201      	movs	r2, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	f040 8148 	bne.w	8001736 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d005      	beq.n	80014be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d130      	bne.n	8001520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 0201 	and.w	r2, r3, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b03      	cmp	r3, #3
 800152a:	d017      	beq.n	800155c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d123      	bne.n	80015b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0203 	and.w	r2, r3, #3
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a2 	beq.w	8001736 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b57      	ldr	r3, [pc, #348]	@ (8001754 <HAL_GPIO_Init+0x2e8>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	4a56      	ldr	r2, [pc, #344]	@ (8001754 <HAL_GPIO_Init+0x2e8>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001600:	6453      	str	r3, [r2, #68]	@ 0x44
 8001602:	4b54      	ldr	r3, [pc, #336]	@ (8001754 <HAL_GPIO_Init+0x2e8>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800160e:	4a52      	ldr	r2, [pc, #328]	@ (8001758 <HAL_GPIO_Init+0x2ec>)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a49      	ldr	r2, [pc, #292]	@ (800175c <HAL_GPIO_Init+0x2f0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d019      	beq.n	800166e <HAL_GPIO_Init+0x202>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a48      	ldr	r2, [pc, #288]	@ (8001760 <HAL_GPIO_Init+0x2f4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_GPIO_Init+0x1fe>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a47      	ldr	r2, [pc, #284]	@ (8001764 <HAL_GPIO_Init+0x2f8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00d      	beq.n	8001666 <HAL_GPIO_Init+0x1fa>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a46      	ldr	r2, [pc, #280]	@ (8001768 <HAL_GPIO_Init+0x2fc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d007      	beq.n	8001662 <HAL_GPIO_Init+0x1f6>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a45      	ldr	r2, [pc, #276]	@ (800176c <HAL_GPIO_Init+0x300>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_GPIO_Init+0x1f2>
 800165a:	2304      	movs	r3, #4
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x204>
 800165e:	2307      	movs	r3, #7
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x204>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x204>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x204>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x204>
 800166e:	2300      	movs	r3, #0
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f002 0203 	and.w	r2, r2, #3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	@ (8001758 <HAL_GPIO_Init+0x2ec>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b38      	ldr	r3, [pc, #224]	@ (8001770 <HAL_GPIO_Init+0x304>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001770 <HAL_GPIO_Init+0x304>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <HAL_GPIO_Init+0x304>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016dc:	4a24      	ldr	r2, [pc, #144]	@ (8001770 <HAL_GPIO_Init+0x304>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e2:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <HAL_GPIO_Init+0x304>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001706:	4a1a      	ldr	r2, [pc, #104]	@ (8001770 <HAL_GPIO_Init+0x304>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170c:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <HAL_GPIO_Init+0x304>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001730:	4a0f      	ldr	r2, [pc, #60]	@ (8001770 <HAL_GPIO_Init+0x304>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3301      	adds	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	f67f aea2 	bls.w	8001488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	@ 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40013c00 	.word	0x40013c00

08001774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e001      	b.n	8001796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e12b      	b.n	8001a0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff fbe8 	bl	8000fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2224      	movs	r2, #36	@ 0x24
 80017d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001806:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001808:	f001 f8aa 	bl	8002960 <HAL_RCC_GetPCLK1Freq>
 800180c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4a81      	ldr	r2, [pc, #516]	@ (8001a18 <HAL_I2C_Init+0x274>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d807      	bhi.n	8001828 <HAL_I2C_Init+0x84>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a80      	ldr	r2, [pc, #512]	@ (8001a1c <HAL_I2C_Init+0x278>)
 800181c:	4293      	cmp	r3, r2
 800181e:	bf94      	ite	ls
 8001820:	2301      	movls	r3, #1
 8001822:	2300      	movhi	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	e006      	b.n	8001836 <HAL_I2C_Init+0x92>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a20 <HAL_I2C_Init+0x27c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	bf94      	ite	ls
 8001830:	2301      	movls	r3, #1
 8001832:	2300      	movhi	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0e7      	b.n	8001a0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4a78      	ldr	r2, [pc, #480]	@ (8001a24 <HAL_I2C_Init+0x280>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0c9b      	lsrs	r3, r3, #18
 8001848:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	430a      	orrs	r2, r1
 800185c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a6a      	ldr	r2, [pc, #424]	@ (8001a18 <HAL_I2C_Init+0x274>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d802      	bhi.n	8001878 <HAL_I2C_Init+0xd4>
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	3301      	adds	r3, #1
 8001876:	e009      	b.n	800188c <HAL_I2C_Init+0xe8>
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	4a69      	ldr	r2, [pc, #420]	@ (8001a28 <HAL_I2C_Init+0x284>)
 8001884:	fba2 2303 	umull	r2, r3, r2, r3
 8001888:	099b      	lsrs	r3, r3, #6
 800188a:	3301      	adds	r3, #1
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	430b      	orrs	r3, r1
 8001892:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800189e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	495c      	ldr	r1, [pc, #368]	@ (8001a18 <HAL_I2C_Init+0x274>)
 80018a8:	428b      	cmp	r3, r1
 80018aa:	d819      	bhi.n	80018e0 <HAL_I2C_Init+0x13c>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1e59      	subs	r1, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ba:	1c59      	adds	r1, r3, #1
 80018bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018c0:	400b      	ands	r3, r1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00a      	beq.n	80018dc <HAL_I2C_Init+0x138>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1e59      	subs	r1, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018da:	e051      	b.n	8001980 <HAL_I2C_Init+0x1dc>
 80018dc:	2304      	movs	r3, #4
 80018de:	e04f      	b.n	8001980 <HAL_I2C_Init+0x1dc>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d111      	bne.n	800190c <HAL_I2C_Init+0x168>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e58      	subs	r0, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	440b      	add	r3, r1
 80018f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018fa:	3301      	adds	r3, #1
 80018fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf0c      	ite	eq
 8001904:	2301      	moveq	r3, #1
 8001906:	2300      	movne	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	e012      	b.n	8001932 <HAL_I2C_Init+0x18e>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1e58      	subs	r0, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	0099      	lsls	r1, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001922:	3301      	adds	r3, #1
 8001924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_Init+0x196>
 8001936:	2301      	movs	r3, #1
 8001938:	e022      	b.n	8001980 <HAL_I2C_Init+0x1dc>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10e      	bne.n	8001960 <HAL_I2C_Init+0x1bc>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1e58      	subs	r0, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6859      	ldr	r1, [r3, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	440b      	add	r3, r1
 8001950:	fbb0 f3f3 	udiv	r3, r0, r3
 8001954:	3301      	adds	r3, #1
 8001956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800195e:	e00f      	b.n	8001980 <HAL_I2C_Init+0x1dc>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1e58      	subs	r0, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	0099      	lsls	r1, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	fbb0 f3f3 	udiv	r3, r0, r3
 8001976:	3301      	adds	r3, #1
 8001978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	6809      	ldr	r1, [r1, #0]
 8001984:	4313      	orrs	r3, r2
 8001986:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69da      	ldr	r2, [r3, #28]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6911      	ldr	r1, [r2, #16]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68d2      	ldr	r2, [r2, #12]
 80019ba:	4311      	orrs	r1, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	430b      	orrs	r3, r1
 80019c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2220      	movs	r2, #32
 80019fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	000186a0 	.word	0x000186a0
 8001a1c:	001e847f 	.word	0x001e847f
 8001a20:	003d08ff 	.word	0x003d08ff
 8001a24:	431bde83 	.word	0x431bde83
 8001a28:	10624dd3 	.word	0x10624dd3

08001a2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	817b      	strh	r3, [r7, #10]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	813b      	strh	r3, [r7, #8]
 8001a42:	4613      	mov	r3, r2
 8001a44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a46:	f7ff fbfb 	bl	8001240 <HAL_GetTick>
 8001a4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	f040 80d9 	bne.w	8001c0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2319      	movs	r3, #25
 8001a60:	2201      	movs	r2, #1
 8001a62:	496d      	ldr	r1, [pc, #436]	@ (8001c18 <HAL_I2C_Mem_Write+0x1ec>)
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f971 	bl	8001d4c <I2C_WaitOnFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a70:	2302      	movs	r3, #2
 8001a72:	e0cc      	b.n	8001c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_I2C_Mem_Write+0x56>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e0c5      	b.n	8001c0e <HAL_I2C_Mem_Write+0x1e2>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d007      	beq.n	8001aa8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ab6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2221      	movs	r2, #33	@ 0x21
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2240      	movs	r2, #64	@ 0x40
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a3a      	ldr	r2, [r7, #32]
 8001ad2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4a4d      	ldr	r2, [pc, #308]	@ (8001c1c <HAL_I2C_Mem_Write+0x1f0>)
 8001ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aea:	88f8      	ldrh	r0, [r7, #6]
 8001aec:	893a      	ldrh	r2, [r7, #8]
 8001aee:	8979      	ldrh	r1, [r7, #10]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4603      	mov	r3, r0
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f890 	bl	8001c20 <I2C_RequestMemoryWrite>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d052      	beq.n	8001bac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e081      	b.n	8001c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fa36 	bl	8001f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00d      	beq.n	8001b36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d107      	bne.n	8001b32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e06b      	b.n	8001c0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d11b      	bne.n	8001bac <HAL_I2C_Mem_Write+0x180>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d017      	beq.n	8001bac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1aa      	bne.n	8001b0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 fa29 	bl	8002010 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00d      	beq.n	8001be0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d107      	bne.n	8001bdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e016      	b.n	8001c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e000      	b.n	8001c0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c0c:	2302      	movs	r3, #2
  }
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	00100002 	.word	0x00100002
 8001c1c:	ffff0000 	.word	0xffff0000

08001c20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	4608      	mov	r0, r1
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4603      	mov	r3, r0
 8001c30:	817b      	strh	r3, [r7, #10]
 8001c32:	460b      	mov	r3, r1
 8001c34:	813b      	strh	r3, [r7, #8]
 8001c36:	4613      	mov	r3, r2
 8001c38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f878 	bl	8001d4c <I2C_WaitOnFlagUntilTimeout>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00d      	beq.n	8001c7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c70:	d103      	bne.n	8001c7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e05f      	b.n	8001d3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c7e:	897b      	ldrh	r3, [r7, #10]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	6a3a      	ldr	r2, [r7, #32]
 8001c92:	492d      	ldr	r1, [pc, #180]	@ (8001d48 <I2C_RequestMemoryWrite+0x128>)
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f8d3 	bl	8001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e04c      	b.n	8001d3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cbc:	6a39      	ldr	r1, [r7, #32]
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f95e 	bl	8001f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00d      	beq.n	8001ce6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d107      	bne.n	8001ce2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e02b      	b.n	8001d3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d105      	bne.n	8001cf8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cec:	893b      	ldrh	r3, [r7, #8]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	e021      	b.n	8001d3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001cf8:	893b      	ldrh	r3, [r7, #8]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d08:	6a39      	ldr	r1, [r7, #32]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f938 	bl	8001f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00d      	beq.n	8001d32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d107      	bne.n	8001d2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e005      	b.n	8001d3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d32:	893b      	ldrh	r3, [r7, #8]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	00010002 	.word	0x00010002

08001d4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d5c:	e048      	b.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d044      	beq.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d66:	f7ff fa6b 	bl	8001240 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d302      	bcc.n	8001d7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d139      	bne.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	0c1b      	lsrs	r3, r3, #16
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d10d      	bne.n	8001da2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	43da      	mvns	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	4013      	ands	r3, r2
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	e00c      	b.n	8001dbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	43da      	mvns	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	4013      	ands	r3, r2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d116      	bne.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	f043 0220 	orr.w	r2, r3, #32
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e023      	b.n	8001e38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10d      	bne.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	43da      	mvns	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	4013      	ands	r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	e00c      	b.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	4013      	ands	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d093      	beq.n	8001d5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e4e:	e071      	b.n	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5e:	d123      	bne.n	8001ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	f043 0204 	orr.w	r2, r3, #4
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e067      	b.n	8001f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eae:	d041      	beq.n	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb0:	f7ff f9c6 	bl	8001240 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d302      	bcc.n	8001ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d136      	bne.n	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d10c      	bne.n	8001eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4013      	ands	r3, r2
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	bf14      	ite	ne
 8001ee2:	2301      	movne	r3, #1
 8001ee4:	2300      	moveq	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	e00b      	b.n	8001f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f043 0220 	orr.w	r2, r3, #32
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e021      	b.n	8001f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	0c1b      	lsrs	r3, r3, #16
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d10c      	bne.n	8001f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf14      	ite	ne
 8001f50:	2301      	movne	r3, #1
 8001f52:	2300      	moveq	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	e00b      	b.n	8001f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4013      	ands	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f47f af6d 	bne.w	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f8c:	e034      	b.n	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f886 	bl	80020a0 <I2C_IsAcknowledgeFailed>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e034      	b.n	8002008 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d028      	beq.n	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa6:	f7ff f94b 	bl	8001240 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d302      	bcc.n	8001fbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11d      	bne.n	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc6:	2b80      	cmp	r3, #128	@ 0x80
 8001fc8:	d016      	beq.n	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e007      	b.n	8002008 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002002:	2b80      	cmp	r3, #128	@ 0x80
 8002004:	d1c3      	bne.n	8001f8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800201c:	e034      	b.n	8002088 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f83e 	bl	80020a0 <I2C_IsAcknowledgeFailed>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e034      	b.n	8002098 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d028      	beq.n	8002088 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002036:	f7ff f903 	bl	8001240 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	429a      	cmp	r2, r3
 8002044:	d302      	bcc.n	800204c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d11d      	bne.n	8002088 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b04      	cmp	r3, #4
 8002058:	d016      	beq.n	8002088 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	f043 0220 	orr.w	r2, r3, #32
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e007      	b.n	8002098 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b04      	cmp	r3, #4
 8002094:	d1c3      	bne.n	800201e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b6:	d11b      	bne.n	80020f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f043 0204 	orr.w	r2, r3, #4
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e267      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d075      	beq.n	800220a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211e:	4b88      	ldr	r3, [pc, #544]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b04      	cmp	r3, #4
 8002128:	d00c      	beq.n	8002144 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212a:	4b85      	ldr	r3, [pc, #532]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002132:	2b08      	cmp	r3, #8
 8002134:	d112      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002136:	4b82      	ldr	r3, [pc, #520]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800213e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4b7e      	ldr	r3, [pc, #504]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d05b      	beq.n	8002208 <HAL_RCC_OscConfig+0x108>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d157      	bne.n	8002208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e242      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x74>
 8002166:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a75      	ldr	r2, [pc, #468]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b70      	ldr	r3, [pc, #448]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6f      	ldr	r2, [pc, #444]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b6d      	ldr	r3, [pc, #436]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6c      	ldr	r2, [pc, #432]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002198:	4b69      	ldr	r3, [pc, #420]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a68      	ldr	r2, [pc, #416]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b66      	ldr	r3, [pc, #408]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a65      	ldr	r2, [pc, #404]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff f842 	bl	8001240 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff f83e 	bl	8001240 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	@ 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e207      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xc0>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff f82e 	bl	8001240 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff f82a 	bl	8001240 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	@ 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1f3      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b51      	ldr	r3, [pc, #324]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0xe8>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d063      	beq.n	80022de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002216:	4b4a      	ldr	r3, [pc, #296]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b44      	ldr	r3, [pc, #272]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1c7      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b3b      	ldr	r3, [pc, #236]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4937      	ldr	r1, [pc, #220]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e03a      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b34      	ldr	r3, [pc, #208]	@ (8002344 <HAL_RCC_OscConfig+0x244>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7fe ffe3 	bl	8001240 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7fe ffdf 	bl	8001240 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1a8      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	4b2b      	ldr	r3, [pc, #172]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4925      	ldr	r1, [pc, #148]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b24      	ldr	r3, [pc, #144]	@ (8002344 <HAL_RCC_OscConfig+0x244>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe ffc2 	bl	8001240 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe ffbe 	bl	8001240 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e187      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d036      	beq.n	8002358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_RCC_OscConfig+0x248>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe ffa2 	bl	8001240 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe ff9e 	bl	8001240 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e167      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x200>
 800231e:	e01b      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002320:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_RCC_OscConfig+0x248>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe ff8b 	bl	8001240 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	e00e      	b.n	800234c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232e:	f7fe ff87 	bl	8001240 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d907      	bls.n	800234c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e150      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
 8002340:	40023800 	.word	0x40023800
 8002344:	42470000 	.word	0x42470000
 8002348:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b88      	ldr	r3, [pc, #544]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800234e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ea      	bne.n	800232e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8097 	beq.w	8002494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b81      	ldr	r3, [pc, #516]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b7d      	ldr	r3, [pc, #500]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	4a7c      	ldr	r2, [pc, #496]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	@ 0x40
 8002386:	4b7a      	ldr	r3, [pc, #488]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b77      	ldr	r3, [pc, #476]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d118      	bne.n	80023d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a2:	4b74      	ldr	r3, [pc, #464]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a73      	ldr	r2, [pc, #460]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7fe ff47 	bl	8001240 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b6:	f7fe ff43 	bl	8001240 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e10c      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x2ea>
 80023dc:	4b64      	ldr	r3, [pc, #400]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	4a63      	ldr	r2, [pc, #396]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e8:	e01c      	b.n	8002424 <HAL_RCC_OscConfig+0x324>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x30c>
 80023f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002402:	4a5b      	ldr	r2, [pc, #364]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6713      	str	r3, [r2, #112]	@ 0x70
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0x324>
 800240c:	4b58      	ldr	r3, [pc, #352]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002410:	4a57      	ldr	r2, [pc, #348]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	@ 0x70
 8002418:	4b55      	ldr	r3, [pc, #340]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241c:	4a54      	ldr	r2, [pc, #336]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800241e:	f023 0304 	bic.w	r3, r3, #4
 8002422:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe ff08 	bl	8001240 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe ff04 	bl	8001240 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0cb      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	4b49      	ldr	r3, [pc, #292]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ee      	beq.n	8002434 <HAL_RCC_OscConfig+0x334>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7fe fef2 	bl	8001240 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7fe feee 	bl	8001240 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0b5      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002476:	4b3e      	ldr	r3, [pc, #248]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ee      	bne.n	8002460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002488:	4b39      	ldr	r3, [pc, #228]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	4a38      	ldr	r2, [pc, #224]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800248e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002492:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a1 	beq.w	80025e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800249e:	4b34      	ldr	r3, [pc, #208]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d05c      	beq.n	8002564 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d141      	bne.n	8002536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b31      	ldr	r3, [pc, #196]	@ (8002578 <HAL_RCC_OscConfig+0x478>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fec2 	bl	8001240 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe febe 	bl	8001240 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e087      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d2:	4b27      	ldr	r3, [pc, #156]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	019b      	lsls	r3, r3, #6
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	3b01      	subs	r3, #1
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	491b      	ldr	r1, [pc, #108]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_RCC_OscConfig+0x478>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fe97 	bl	8001240 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fe93 	bl	8001240 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e05c      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x416>
 8002534:	e054      	b.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <HAL_RCC_OscConfig+0x478>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fe80 	bl	8001240 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fe7c 	bl	8001240 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e045      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x444>
 8002562:	e03d      	b.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e038      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000
 8002578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800257c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <HAL_RCC_OscConfig+0x4ec>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d028      	beq.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d121      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d11a      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d111      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	3b01      	subs	r3, #1
 80025c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cc      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b68      	ldr	r3, [pc, #416]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b65      	ldr	r3, [pc, #404]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a58      	ldr	r2, [pc, #352]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a52      	ldr	r2, [pc, #328]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d044      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b3f      	ldr	r3, [pc, #252]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3b      	ldr	r3, [pc, #236]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e067      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b37      	ldr	r3, [pc, #220]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4934      	ldr	r1, [pc, #208]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fdae 	bl	8001240 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fdaa 	bl	8001240 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b25      	ldr	r3, [pc, #148]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d20c      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fd0e 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08005408 	.word	0x08005408
 80027b4:	20000028 	.word	0x20000028
 80027b8:	2000002c 	.word	0x2000002c

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c0:	b090      	sub	sp, #64	@ 0x40
 80027c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c8:	2300      	movs	r3, #0
 80027ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027cc:	2300      	movs	r3, #0
 80027ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d4:	4b59      	ldr	r3, [pc, #356]	@ (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d00d      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x40>
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	f200 80a1 	bhi.w	8002928 <HAL_RCC_GetSysClockFreq+0x16c>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ee:	e09b      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b53      	ldr	r3, [pc, #332]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x184>)
 80027f2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80027f4:	e09b      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f6:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x188>)
 80027f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027fa:	e098      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027fc:	4b4f      	ldr	r3, [pc, #316]	@ (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002804:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002806:	4b4d      	ldr	r3, [pc, #308]	@ (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d028      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002812:	4b4a      	ldr	r3, [pc, #296]	@ (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	2200      	movs	r2, #0
 800281a:	623b      	str	r3, [r7, #32]
 800281c:	627a      	str	r2, [r7, #36]	@ 0x24
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002824:	2100      	movs	r1, #0
 8002826:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x188>)
 8002828:	fb03 f201 	mul.w	r2, r3, r1
 800282c:	2300      	movs	r3, #0
 800282e:	fb00 f303 	mul.w	r3, r0, r3
 8002832:	4413      	add	r3, r2
 8002834:	4a43      	ldr	r2, [pc, #268]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x188>)
 8002836:	fba0 1202 	umull	r1, r2, r0, r2
 800283a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800283c:	460a      	mov	r2, r1
 800283e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002842:	4413      	add	r3, r2
 8002844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002848:	2200      	movs	r2, #0
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	61fa      	str	r2, [r7, #28]
 800284e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002852:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002856:	f7fd fd13 	bl	8000280 <__aeabi_uldivmod>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4613      	mov	r3, r2
 8002860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002862:	e053      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002864:	4b35      	ldr	r3, [pc, #212]	@ (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	2200      	movs	r2, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	617a      	str	r2, [r7, #20]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002876:	f04f 0b00 	mov.w	fp, #0
 800287a:	4652      	mov	r2, sl
 800287c:	465b      	mov	r3, fp
 800287e:	f04f 0000 	mov.w	r0, #0
 8002882:	f04f 0100 	mov.w	r1, #0
 8002886:	0159      	lsls	r1, r3, #5
 8002888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288c:	0150      	lsls	r0, r2, #5
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	ebb2 080a 	subs.w	r8, r2, sl
 8002896:	eb63 090b 	sbc.w	r9, r3, fp
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028ae:	ebb2 0408 	subs.w	r4, r2, r8
 80028b2:	eb63 0509 	sbc.w	r5, r3, r9
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	00eb      	lsls	r3, r5, #3
 80028c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c4:	00e2      	lsls	r2, r4, #3
 80028c6:	4614      	mov	r4, r2
 80028c8:	461d      	mov	r5, r3
 80028ca:	eb14 030a 	adds.w	r3, r4, sl
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	eb45 030b 	adc.w	r3, r5, fp
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028e2:	4629      	mov	r1, r5
 80028e4:	028b      	lsls	r3, r1, #10
 80028e6:	4621      	mov	r1, r4
 80028e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028ec:	4621      	mov	r1, r4
 80028ee:	028a      	lsls	r2, r1, #10
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f6:	2200      	movs	r2, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	60fa      	str	r2, [r7, #12]
 80028fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002900:	f7fd fcbe 	bl	8000280 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800290c:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	3301      	adds	r3, #1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800291c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800291e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002926:	e002      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x184>)
 800292a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800292c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002930:	4618      	mov	r0, r3
 8002932:	3740      	adds	r7, #64	@ 0x40
 8002934:	46bd      	mov	sp, r7
 8002936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	00f42400 	.word	0x00f42400
 8002944:	017d7840 	.word	0x017d7840

08002948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800294c:	4b03      	ldr	r3, [pc, #12]	@ (800295c <HAL_RCC_GetHCLKFreq+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000028 	.word	0x20000028

08002960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002964:	f7ff fff0 	bl	8002948 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	0a9b      	lsrs	r3, r3, #10
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4903      	ldr	r1, [pc, #12]	@ (8002984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	08005418 	.word	0x08005418

08002988 <siprintf>:
 8002988:	b40e      	push	{r1, r2, r3}
 800298a:	b500      	push	{lr}
 800298c:	b09c      	sub	sp, #112	@ 0x70
 800298e:	ab1d      	add	r3, sp, #116	@ 0x74
 8002990:	9002      	str	r0, [sp, #8]
 8002992:	9006      	str	r0, [sp, #24]
 8002994:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002998:	4809      	ldr	r0, [pc, #36]	@ (80029c0 <siprintf+0x38>)
 800299a:	9107      	str	r1, [sp, #28]
 800299c:	9104      	str	r1, [sp, #16]
 800299e:	4909      	ldr	r1, [pc, #36]	@ (80029c4 <siprintf+0x3c>)
 80029a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80029a4:	9105      	str	r1, [sp, #20]
 80029a6:	6800      	ldr	r0, [r0, #0]
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	a902      	add	r1, sp, #8
 80029ac:	f000 f9bc 	bl	8002d28 <_svfiprintf_r>
 80029b0:	9b02      	ldr	r3, [sp, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	b01c      	add	sp, #112	@ 0x70
 80029b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80029bc:	b003      	add	sp, #12
 80029be:	4770      	bx	lr
 80029c0:	20000034 	.word	0x20000034
 80029c4:	ffff0208 	.word	0xffff0208

080029c8 <memmove>:
 80029c8:	4288      	cmp	r0, r1
 80029ca:	b510      	push	{r4, lr}
 80029cc:	eb01 0402 	add.w	r4, r1, r2
 80029d0:	d902      	bls.n	80029d8 <memmove+0x10>
 80029d2:	4284      	cmp	r4, r0
 80029d4:	4623      	mov	r3, r4
 80029d6:	d807      	bhi.n	80029e8 <memmove+0x20>
 80029d8:	1e43      	subs	r3, r0, #1
 80029da:	42a1      	cmp	r1, r4
 80029dc:	d008      	beq.n	80029f0 <memmove+0x28>
 80029de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029e6:	e7f8      	b.n	80029da <memmove+0x12>
 80029e8:	4402      	add	r2, r0
 80029ea:	4601      	mov	r1, r0
 80029ec:	428a      	cmp	r2, r1
 80029ee:	d100      	bne.n	80029f2 <memmove+0x2a>
 80029f0:	bd10      	pop	{r4, pc}
 80029f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029fa:	e7f7      	b.n	80029ec <memmove+0x24>

080029fc <memset>:
 80029fc:	4402      	add	r2, r0
 80029fe:	4603      	mov	r3, r0
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d100      	bne.n	8002a06 <memset+0xa>
 8002a04:	4770      	bx	lr
 8002a06:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0a:	e7f9      	b.n	8002a00 <memset+0x4>

08002a0c <__errno>:
 8002a0c:	4b01      	ldr	r3, [pc, #4]	@ (8002a14 <__errno+0x8>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000034 	.word	0x20000034

08002a18 <__libc_init_array>:
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8002a50 <__libc_init_array+0x38>)
 8002a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8002a54 <__libc_init_array+0x3c>)
 8002a1e:	1b64      	subs	r4, r4, r5
 8002a20:	10a4      	asrs	r4, r4, #2
 8002a22:	2600      	movs	r6, #0
 8002a24:	42a6      	cmp	r6, r4
 8002a26:	d109      	bne.n	8002a3c <__libc_init_array+0x24>
 8002a28:	4d0b      	ldr	r5, [pc, #44]	@ (8002a58 <__libc_init_array+0x40>)
 8002a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8002a5c <__libc_init_array+0x44>)
 8002a2c:	f000 fc4c 	bl	80032c8 <_init>
 8002a30:	1b64      	subs	r4, r4, r5
 8002a32:	10a4      	asrs	r4, r4, #2
 8002a34:	2600      	movs	r6, #0
 8002a36:	42a6      	cmp	r6, r4
 8002a38:	d105      	bne.n	8002a46 <__libc_init_array+0x2e>
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
 8002a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a40:	4798      	blx	r3
 8002a42:	3601      	adds	r6, #1
 8002a44:	e7ee      	b.n	8002a24 <__libc_init_array+0xc>
 8002a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a4a:	4798      	blx	r3
 8002a4c:	3601      	adds	r6, #1
 8002a4e:	e7f2      	b.n	8002a36 <__libc_init_array+0x1e>
 8002a50:	0800545c 	.word	0x0800545c
 8002a54:	0800545c 	.word	0x0800545c
 8002a58:	0800545c 	.word	0x0800545c
 8002a5c:	08005460 	.word	0x08005460

08002a60 <__retarget_lock_acquire_recursive>:
 8002a60:	4770      	bx	lr

08002a62 <__retarget_lock_release_recursive>:
 8002a62:	4770      	bx	lr

08002a64 <memcpy>:
 8002a64:	440a      	add	r2, r1
 8002a66:	4291      	cmp	r1, r2
 8002a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a6c:	d100      	bne.n	8002a70 <memcpy+0xc>
 8002a6e:	4770      	bx	lr
 8002a70:	b510      	push	{r4, lr}
 8002a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a7a:	4291      	cmp	r1, r2
 8002a7c:	d1f9      	bne.n	8002a72 <memcpy+0xe>
 8002a7e:	bd10      	pop	{r4, pc}

08002a80 <_free_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4605      	mov	r5, r0
 8002a84:	2900      	cmp	r1, #0
 8002a86:	d041      	beq.n	8002b0c <_free_r+0x8c>
 8002a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a8c:	1f0c      	subs	r4, r1, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bfb8      	it	lt
 8002a92:	18e4      	addlt	r4, r4, r3
 8002a94:	f000 f8e0 	bl	8002c58 <__malloc_lock>
 8002a98:	4a1d      	ldr	r2, [pc, #116]	@ (8002b10 <_free_r+0x90>)
 8002a9a:	6813      	ldr	r3, [r2, #0]
 8002a9c:	b933      	cbnz	r3, 8002aac <_free_r+0x2c>
 8002a9e:	6063      	str	r3, [r4, #4]
 8002aa0:	6014      	str	r4, [r2, #0]
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aa8:	f000 b8dc 	b.w	8002c64 <__malloc_unlock>
 8002aac:	42a3      	cmp	r3, r4
 8002aae:	d908      	bls.n	8002ac2 <_free_r+0x42>
 8002ab0:	6820      	ldr	r0, [r4, #0]
 8002ab2:	1821      	adds	r1, r4, r0
 8002ab4:	428b      	cmp	r3, r1
 8002ab6:	bf01      	itttt	eq
 8002ab8:	6819      	ldreq	r1, [r3, #0]
 8002aba:	685b      	ldreq	r3, [r3, #4]
 8002abc:	1809      	addeq	r1, r1, r0
 8002abe:	6021      	streq	r1, [r4, #0]
 8002ac0:	e7ed      	b.n	8002a9e <_free_r+0x1e>
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	b10b      	cbz	r3, 8002acc <_free_r+0x4c>
 8002ac8:	42a3      	cmp	r3, r4
 8002aca:	d9fa      	bls.n	8002ac2 <_free_r+0x42>
 8002acc:	6811      	ldr	r1, [r2, #0]
 8002ace:	1850      	adds	r0, r2, r1
 8002ad0:	42a0      	cmp	r0, r4
 8002ad2:	d10b      	bne.n	8002aec <_free_r+0x6c>
 8002ad4:	6820      	ldr	r0, [r4, #0]
 8002ad6:	4401      	add	r1, r0
 8002ad8:	1850      	adds	r0, r2, r1
 8002ada:	4283      	cmp	r3, r0
 8002adc:	6011      	str	r1, [r2, #0]
 8002ade:	d1e0      	bne.n	8002aa2 <_free_r+0x22>
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	6053      	str	r3, [r2, #4]
 8002ae6:	4408      	add	r0, r1
 8002ae8:	6010      	str	r0, [r2, #0]
 8002aea:	e7da      	b.n	8002aa2 <_free_r+0x22>
 8002aec:	d902      	bls.n	8002af4 <_free_r+0x74>
 8002aee:	230c      	movs	r3, #12
 8002af0:	602b      	str	r3, [r5, #0]
 8002af2:	e7d6      	b.n	8002aa2 <_free_r+0x22>
 8002af4:	6820      	ldr	r0, [r4, #0]
 8002af6:	1821      	adds	r1, r4, r0
 8002af8:	428b      	cmp	r3, r1
 8002afa:	bf04      	itt	eq
 8002afc:	6819      	ldreq	r1, [r3, #0]
 8002afe:	685b      	ldreq	r3, [r3, #4]
 8002b00:	6063      	str	r3, [r4, #4]
 8002b02:	bf04      	itt	eq
 8002b04:	1809      	addeq	r1, r1, r0
 8002b06:	6021      	streq	r1, [r4, #0]
 8002b08:	6054      	str	r4, [r2, #4]
 8002b0a:	e7ca      	b.n	8002aa2 <_free_r+0x22>
 8002b0c:	bd38      	pop	{r3, r4, r5, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000650 	.word	0x20000650

08002b14 <sbrk_aligned>:
 8002b14:	b570      	push	{r4, r5, r6, lr}
 8002b16:	4e0f      	ldr	r6, [pc, #60]	@ (8002b54 <sbrk_aligned+0x40>)
 8002b18:	460c      	mov	r4, r1
 8002b1a:	6831      	ldr	r1, [r6, #0]
 8002b1c:	4605      	mov	r5, r0
 8002b1e:	b911      	cbnz	r1, 8002b26 <sbrk_aligned+0x12>
 8002b20:	f000 fb8c 	bl	800323c <_sbrk_r>
 8002b24:	6030      	str	r0, [r6, #0]
 8002b26:	4621      	mov	r1, r4
 8002b28:	4628      	mov	r0, r5
 8002b2a:	f000 fb87 	bl	800323c <_sbrk_r>
 8002b2e:	1c43      	adds	r3, r0, #1
 8002b30:	d103      	bne.n	8002b3a <sbrk_aligned+0x26>
 8002b32:	f04f 34ff 	mov.w	r4, #4294967295
 8002b36:	4620      	mov	r0, r4
 8002b38:	bd70      	pop	{r4, r5, r6, pc}
 8002b3a:	1cc4      	adds	r4, r0, #3
 8002b3c:	f024 0403 	bic.w	r4, r4, #3
 8002b40:	42a0      	cmp	r0, r4
 8002b42:	d0f8      	beq.n	8002b36 <sbrk_aligned+0x22>
 8002b44:	1a21      	subs	r1, r4, r0
 8002b46:	4628      	mov	r0, r5
 8002b48:	f000 fb78 	bl	800323c <_sbrk_r>
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	d1f2      	bne.n	8002b36 <sbrk_aligned+0x22>
 8002b50:	e7ef      	b.n	8002b32 <sbrk_aligned+0x1e>
 8002b52:	bf00      	nop
 8002b54:	2000064c 	.word	0x2000064c

08002b58 <_malloc_r>:
 8002b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b5c:	1ccd      	adds	r5, r1, #3
 8002b5e:	f025 0503 	bic.w	r5, r5, #3
 8002b62:	3508      	adds	r5, #8
 8002b64:	2d0c      	cmp	r5, #12
 8002b66:	bf38      	it	cc
 8002b68:	250c      	movcc	r5, #12
 8002b6a:	2d00      	cmp	r5, #0
 8002b6c:	4606      	mov	r6, r0
 8002b6e:	db01      	blt.n	8002b74 <_malloc_r+0x1c>
 8002b70:	42a9      	cmp	r1, r5
 8002b72:	d904      	bls.n	8002b7e <_malloc_r+0x26>
 8002b74:	230c      	movs	r3, #12
 8002b76:	6033      	str	r3, [r6, #0]
 8002b78:	2000      	movs	r0, #0
 8002b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c54 <_malloc_r+0xfc>
 8002b82:	f000 f869 	bl	8002c58 <__malloc_lock>
 8002b86:	f8d8 3000 	ldr.w	r3, [r8]
 8002b8a:	461c      	mov	r4, r3
 8002b8c:	bb44      	cbnz	r4, 8002be0 <_malloc_r+0x88>
 8002b8e:	4629      	mov	r1, r5
 8002b90:	4630      	mov	r0, r6
 8002b92:	f7ff ffbf 	bl	8002b14 <sbrk_aligned>
 8002b96:	1c43      	adds	r3, r0, #1
 8002b98:	4604      	mov	r4, r0
 8002b9a:	d158      	bne.n	8002c4e <_malloc_r+0xf6>
 8002b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8002ba0:	4627      	mov	r7, r4
 8002ba2:	2f00      	cmp	r7, #0
 8002ba4:	d143      	bne.n	8002c2e <_malloc_r+0xd6>
 8002ba6:	2c00      	cmp	r4, #0
 8002ba8:	d04b      	beq.n	8002c42 <_malloc_r+0xea>
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	4639      	mov	r1, r7
 8002bae:	4630      	mov	r0, r6
 8002bb0:	eb04 0903 	add.w	r9, r4, r3
 8002bb4:	f000 fb42 	bl	800323c <_sbrk_r>
 8002bb8:	4581      	cmp	r9, r0
 8002bba:	d142      	bne.n	8002c42 <_malloc_r+0xea>
 8002bbc:	6821      	ldr	r1, [r4, #0]
 8002bbe:	1a6d      	subs	r5, r5, r1
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	f7ff ffa6 	bl	8002b14 <sbrk_aligned>
 8002bc8:	3001      	adds	r0, #1
 8002bca:	d03a      	beq.n	8002c42 <_malloc_r+0xea>
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	442b      	add	r3, r5
 8002bd0:	6023      	str	r3, [r4, #0]
 8002bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	bb62      	cbnz	r2, 8002c34 <_malloc_r+0xdc>
 8002bda:	f8c8 7000 	str.w	r7, [r8]
 8002bde:	e00f      	b.n	8002c00 <_malloc_r+0xa8>
 8002be0:	6822      	ldr	r2, [r4, #0]
 8002be2:	1b52      	subs	r2, r2, r5
 8002be4:	d420      	bmi.n	8002c28 <_malloc_r+0xd0>
 8002be6:	2a0b      	cmp	r2, #11
 8002be8:	d917      	bls.n	8002c1a <_malloc_r+0xc2>
 8002bea:	1961      	adds	r1, r4, r5
 8002bec:	42a3      	cmp	r3, r4
 8002bee:	6025      	str	r5, [r4, #0]
 8002bf0:	bf18      	it	ne
 8002bf2:	6059      	strne	r1, [r3, #4]
 8002bf4:	6863      	ldr	r3, [r4, #4]
 8002bf6:	bf08      	it	eq
 8002bf8:	f8c8 1000 	streq.w	r1, [r8]
 8002bfc:	5162      	str	r2, [r4, r5]
 8002bfe:	604b      	str	r3, [r1, #4]
 8002c00:	4630      	mov	r0, r6
 8002c02:	f000 f82f 	bl	8002c64 <__malloc_unlock>
 8002c06:	f104 000b 	add.w	r0, r4, #11
 8002c0a:	1d23      	adds	r3, r4, #4
 8002c0c:	f020 0007 	bic.w	r0, r0, #7
 8002c10:	1ac2      	subs	r2, r0, r3
 8002c12:	bf1c      	itt	ne
 8002c14:	1a1b      	subne	r3, r3, r0
 8002c16:	50a3      	strne	r3, [r4, r2]
 8002c18:	e7af      	b.n	8002b7a <_malloc_r+0x22>
 8002c1a:	6862      	ldr	r2, [r4, #4]
 8002c1c:	42a3      	cmp	r3, r4
 8002c1e:	bf0c      	ite	eq
 8002c20:	f8c8 2000 	streq.w	r2, [r8]
 8002c24:	605a      	strne	r2, [r3, #4]
 8002c26:	e7eb      	b.n	8002c00 <_malloc_r+0xa8>
 8002c28:	4623      	mov	r3, r4
 8002c2a:	6864      	ldr	r4, [r4, #4]
 8002c2c:	e7ae      	b.n	8002b8c <_malloc_r+0x34>
 8002c2e:	463c      	mov	r4, r7
 8002c30:	687f      	ldr	r7, [r7, #4]
 8002c32:	e7b6      	b.n	8002ba2 <_malloc_r+0x4a>
 8002c34:	461a      	mov	r2, r3
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	d1fb      	bne.n	8002c34 <_malloc_r+0xdc>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6053      	str	r3, [r2, #4]
 8002c40:	e7de      	b.n	8002c00 <_malloc_r+0xa8>
 8002c42:	230c      	movs	r3, #12
 8002c44:	6033      	str	r3, [r6, #0]
 8002c46:	4630      	mov	r0, r6
 8002c48:	f000 f80c 	bl	8002c64 <__malloc_unlock>
 8002c4c:	e794      	b.n	8002b78 <_malloc_r+0x20>
 8002c4e:	6005      	str	r5, [r0, #0]
 8002c50:	e7d6      	b.n	8002c00 <_malloc_r+0xa8>
 8002c52:	bf00      	nop
 8002c54:	20000650 	.word	0x20000650

08002c58 <__malloc_lock>:
 8002c58:	4801      	ldr	r0, [pc, #4]	@ (8002c60 <__malloc_lock+0x8>)
 8002c5a:	f7ff bf01 	b.w	8002a60 <__retarget_lock_acquire_recursive>
 8002c5e:	bf00      	nop
 8002c60:	20000648 	.word	0x20000648

08002c64 <__malloc_unlock>:
 8002c64:	4801      	ldr	r0, [pc, #4]	@ (8002c6c <__malloc_unlock+0x8>)
 8002c66:	f7ff befc 	b.w	8002a62 <__retarget_lock_release_recursive>
 8002c6a:	bf00      	nop
 8002c6c:	20000648 	.word	0x20000648

08002c70 <__ssputs_r>:
 8002c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c74:	688e      	ldr	r6, [r1, #8]
 8002c76:	461f      	mov	r7, r3
 8002c78:	42be      	cmp	r6, r7
 8002c7a:	680b      	ldr	r3, [r1, #0]
 8002c7c:	4682      	mov	sl, r0
 8002c7e:	460c      	mov	r4, r1
 8002c80:	4690      	mov	r8, r2
 8002c82:	d82d      	bhi.n	8002ce0 <__ssputs_r+0x70>
 8002c84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002c8c:	d026      	beq.n	8002cdc <__ssputs_r+0x6c>
 8002c8e:	6965      	ldr	r5, [r4, #20]
 8002c90:	6909      	ldr	r1, [r1, #16]
 8002c92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c96:	eba3 0901 	sub.w	r9, r3, r1
 8002c9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c9e:	1c7b      	adds	r3, r7, #1
 8002ca0:	444b      	add	r3, r9
 8002ca2:	106d      	asrs	r5, r5, #1
 8002ca4:	429d      	cmp	r5, r3
 8002ca6:	bf38      	it	cc
 8002ca8:	461d      	movcc	r5, r3
 8002caa:	0553      	lsls	r3, r2, #21
 8002cac:	d527      	bpl.n	8002cfe <__ssputs_r+0x8e>
 8002cae:	4629      	mov	r1, r5
 8002cb0:	f7ff ff52 	bl	8002b58 <_malloc_r>
 8002cb4:	4606      	mov	r6, r0
 8002cb6:	b360      	cbz	r0, 8002d12 <__ssputs_r+0xa2>
 8002cb8:	6921      	ldr	r1, [r4, #16]
 8002cba:	464a      	mov	r2, r9
 8002cbc:	f7ff fed2 	bl	8002a64 <memcpy>
 8002cc0:	89a3      	ldrh	r3, [r4, #12]
 8002cc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cca:	81a3      	strh	r3, [r4, #12]
 8002ccc:	6126      	str	r6, [r4, #16]
 8002cce:	6165      	str	r5, [r4, #20]
 8002cd0:	444e      	add	r6, r9
 8002cd2:	eba5 0509 	sub.w	r5, r5, r9
 8002cd6:	6026      	str	r6, [r4, #0]
 8002cd8:	60a5      	str	r5, [r4, #8]
 8002cda:	463e      	mov	r6, r7
 8002cdc:	42be      	cmp	r6, r7
 8002cde:	d900      	bls.n	8002ce2 <__ssputs_r+0x72>
 8002ce0:	463e      	mov	r6, r7
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	4632      	mov	r2, r6
 8002ce6:	4641      	mov	r1, r8
 8002ce8:	f7ff fe6e 	bl	80029c8 <memmove>
 8002cec:	68a3      	ldr	r3, [r4, #8]
 8002cee:	1b9b      	subs	r3, r3, r6
 8002cf0:	60a3      	str	r3, [r4, #8]
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	4433      	add	r3, r6
 8002cf6:	6023      	str	r3, [r4, #0]
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cfe:	462a      	mov	r2, r5
 8002d00:	f000 faac 	bl	800325c <_realloc_r>
 8002d04:	4606      	mov	r6, r0
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d1e0      	bne.n	8002ccc <__ssputs_r+0x5c>
 8002d0a:	6921      	ldr	r1, [r4, #16]
 8002d0c:	4650      	mov	r0, sl
 8002d0e:	f7ff feb7 	bl	8002a80 <_free_r>
 8002d12:	230c      	movs	r3, #12
 8002d14:	f8ca 3000 	str.w	r3, [sl]
 8002d18:	89a3      	ldrh	r3, [r4, #12]
 8002d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d1e:	81a3      	strh	r3, [r4, #12]
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	e7e9      	b.n	8002cfa <__ssputs_r+0x8a>
	...

08002d28 <_svfiprintf_r>:
 8002d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2c:	4698      	mov	r8, r3
 8002d2e:	898b      	ldrh	r3, [r1, #12]
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	b09d      	sub	sp, #116	@ 0x74
 8002d34:	4607      	mov	r7, r0
 8002d36:	460d      	mov	r5, r1
 8002d38:	4614      	mov	r4, r2
 8002d3a:	d510      	bpl.n	8002d5e <_svfiprintf_r+0x36>
 8002d3c:	690b      	ldr	r3, [r1, #16]
 8002d3e:	b973      	cbnz	r3, 8002d5e <_svfiprintf_r+0x36>
 8002d40:	2140      	movs	r1, #64	@ 0x40
 8002d42:	f7ff ff09 	bl	8002b58 <_malloc_r>
 8002d46:	6028      	str	r0, [r5, #0]
 8002d48:	6128      	str	r0, [r5, #16]
 8002d4a:	b930      	cbnz	r0, 8002d5a <_svfiprintf_r+0x32>
 8002d4c:	230c      	movs	r3, #12
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	b01d      	add	sp, #116	@ 0x74
 8002d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d5a:	2340      	movs	r3, #64	@ 0x40
 8002d5c:	616b      	str	r3, [r5, #20]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d62:	2320      	movs	r3, #32
 8002d64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d6c:	2330      	movs	r3, #48	@ 0x30
 8002d6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002f0c <_svfiprintf_r+0x1e4>
 8002d72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d76:	f04f 0901 	mov.w	r9, #1
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	469a      	mov	sl, r3
 8002d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d82:	b10a      	cbz	r2, 8002d88 <_svfiprintf_r+0x60>
 8002d84:	2a25      	cmp	r2, #37	@ 0x25
 8002d86:	d1f9      	bne.n	8002d7c <_svfiprintf_r+0x54>
 8002d88:	ebba 0b04 	subs.w	fp, sl, r4
 8002d8c:	d00b      	beq.n	8002da6 <_svfiprintf_r+0x7e>
 8002d8e:	465b      	mov	r3, fp
 8002d90:	4622      	mov	r2, r4
 8002d92:	4629      	mov	r1, r5
 8002d94:	4638      	mov	r0, r7
 8002d96:	f7ff ff6b 	bl	8002c70 <__ssputs_r>
 8002d9a:	3001      	adds	r0, #1
 8002d9c:	f000 80a7 	beq.w	8002eee <_svfiprintf_r+0x1c6>
 8002da0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002da2:	445a      	add	r2, fp
 8002da4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002da6:	f89a 3000 	ldrb.w	r3, [sl]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 809f 	beq.w	8002eee <_svfiprintf_r+0x1c6>
 8002db0:	2300      	movs	r3, #0
 8002db2:	f04f 32ff 	mov.w	r2, #4294967295
 8002db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dba:	f10a 0a01 	add.w	sl, sl, #1
 8002dbe:	9304      	str	r3, [sp, #16]
 8002dc0:	9307      	str	r3, [sp, #28]
 8002dc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002dc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8002dc8:	4654      	mov	r4, sl
 8002dca:	2205      	movs	r2, #5
 8002dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dd0:	484e      	ldr	r0, [pc, #312]	@ (8002f0c <_svfiprintf_r+0x1e4>)
 8002dd2:	f7fd fa05 	bl	80001e0 <memchr>
 8002dd6:	9a04      	ldr	r2, [sp, #16]
 8002dd8:	b9d8      	cbnz	r0, 8002e12 <_svfiprintf_r+0xea>
 8002dda:	06d0      	lsls	r0, r2, #27
 8002ddc:	bf44      	itt	mi
 8002dde:	2320      	movmi	r3, #32
 8002de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002de4:	0711      	lsls	r1, r2, #28
 8002de6:	bf44      	itt	mi
 8002de8:	232b      	movmi	r3, #43	@ 0x2b
 8002dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002dee:	f89a 3000 	ldrb.w	r3, [sl]
 8002df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002df4:	d015      	beq.n	8002e22 <_svfiprintf_r+0xfa>
 8002df6:	9a07      	ldr	r2, [sp, #28]
 8002df8:	4654      	mov	r4, sl
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f04f 0c0a 	mov.w	ip, #10
 8002e00:	4621      	mov	r1, r4
 8002e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e06:	3b30      	subs	r3, #48	@ 0x30
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	d94b      	bls.n	8002ea4 <_svfiprintf_r+0x17c>
 8002e0c:	b1b0      	cbz	r0, 8002e3c <_svfiprintf_r+0x114>
 8002e0e:	9207      	str	r2, [sp, #28]
 8002e10:	e014      	b.n	8002e3c <_svfiprintf_r+0x114>
 8002e12:	eba0 0308 	sub.w	r3, r0, r8
 8002e16:	fa09 f303 	lsl.w	r3, r9, r3
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	9304      	str	r3, [sp, #16]
 8002e1e:	46a2      	mov	sl, r4
 8002e20:	e7d2      	b.n	8002dc8 <_svfiprintf_r+0xa0>
 8002e22:	9b03      	ldr	r3, [sp, #12]
 8002e24:	1d19      	adds	r1, r3, #4
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	9103      	str	r1, [sp, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bfbb      	ittet	lt
 8002e2e:	425b      	neglt	r3, r3
 8002e30:	f042 0202 	orrlt.w	r2, r2, #2
 8002e34:	9307      	strge	r3, [sp, #28]
 8002e36:	9307      	strlt	r3, [sp, #28]
 8002e38:	bfb8      	it	lt
 8002e3a:	9204      	strlt	r2, [sp, #16]
 8002e3c:	7823      	ldrb	r3, [r4, #0]
 8002e3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e40:	d10a      	bne.n	8002e58 <_svfiprintf_r+0x130>
 8002e42:	7863      	ldrb	r3, [r4, #1]
 8002e44:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e46:	d132      	bne.n	8002eae <_svfiprintf_r+0x186>
 8002e48:	9b03      	ldr	r3, [sp, #12]
 8002e4a:	1d1a      	adds	r2, r3, #4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	9203      	str	r2, [sp, #12]
 8002e50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e54:	3402      	adds	r4, #2
 8002e56:	9305      	str	r3, [sp, #20]
 8002e58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002f1c <_svfiprintf_r+0x1f4>
 8002e5c:	7821      	ldrb	r1, [r4, #0]
 8002e5e:	2203      	movs	r2, #3
 8002e60:	4650      	mov	r0, sl
 8002e62:	f7fd f9bd 	bl	80001e0 <memchr>
 8002e66:	b138      	cbz	r0, 8002e78 <_svfiprintf_r+0x150>
 8002e68:	9b04      	ldr	r3, [sp, #16]
 8002e6a:	eba0 000a 	sub.w	r0, r0, sl
 8002e6e:	2240      	movs	r2, #64	@ 0x40
 8002e70:	4082      	lsls	r2, r0
 8002e72:	4313      	orrs	r3, r2
 8002e74:	3401      	adds	r4, #1
 8002e76:	9304      	str	r3, [sp, #16]
 8002e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e7c:	4824      	ldr	r0, [pc, #144]	@ (8002f10 <_svfiprintf_r+0x1e8>)
 8002e7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e82:	2206      	movs	r2, #6
 8002e84:	f7fd f9ac 	bl	80001e0 <memchr>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d036      	beq.n	8002efa <_svfiprintf_r+0x1d2>
 8002e8c:	4b21      	ldr	r3, [pc, #132]	@ (8002f14 <_svfiprintf_r+0x1ec>)
 8002e8e:	bb1b      	cbnz	r3, 8002ed8 <_svfiprintf_r+0x1b0>
 8002e90:	9b03      	ldr	r3, [sp, #12]
 8002e92:	3307      	adds	r3, #7
 8002e94:	f023 0307 	bic.w	r3, r3, #7
 8002e98:	3308      	adds	r3, #8
 8002e9a:	9303      	str	r3, [sp, #12]
 8002e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e9e:	4433      	add	r3, r6
 8002ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ea2:	e76a      	b.n	8002d7a <_svfiprintf_r+0x52>
 8002ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	2001      	movs	r0, #1
 8002eac:	e7a8      	b.n	8002e00 <_svfiprintf_r+0xd8>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	3401      	adds	r4, #1
 8002eb2:	9305      	str	r3, [sp, #20]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f04f 0c0a 	mov.w	ip, #10
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ec0:	3a30      	subs	r2, #48	@ 0x30
 8002ec2:	2a09      	cmp	r2, #9
 8002ec4:	d903      	bls.n	8002ece <_svfiprintf_r+0x1a6>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0c6      	beq.n	8002e58 <_svfiprintf_r+0x130>
 8002eca:	9105      	str	r1, [sp, #20]
 8002ecc:	e7c4      	b.n	8002e58 <_svfiprintf_r+0x130>
 8002ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e7f0      	b.n	8002eba <_svfiprintf_r+0x192>
 8002ed8:	ab03      	add	r3, sp, #12
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	462a      	mov	r2, r5
 8002ede:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <_svfiprintf_r+0x1f0>)
 8002ee0:	a904      	add	r1, sp, #16
 8002ee2:	4638      	mov	r0, r7
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	1c42      	adds	r2, r0, #1
 8002eea:	4606      	mov	r6, r0
 8002eec:	d1d6      	bne.n	8002e9c <_svfiprintf_r+0x174>
 8002eee:	89ab      	ldrh	r3, [r5, #12]
 8002ef0:	065b      	lsls	r3, r3, #25
 8002ef2:	f53f af2d 	bmi.w	8002d50 <_svfiprintf_r+0x28>
 8002ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ef8:	e72c      	b.n	8002d54 <_svfiprintf_r+0x2c>
 8002efa:	ab03      	add	r3, sp, #12
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	462a      	mov	r2, r5
 8002f00:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <_svfiprintf_r+0x1f0>)
 8002f02:	a904      	add	r1, sp, #16
 8002f04:	4638      	mov	r0, r7
 8002f06:	f000 f879 	bl	8002ffc <_printf_i>
 8002f0a:	e7ed      	b.n	8002ee8 <_svfiprintf_r+0x1c0>
 8002f0c:	08005420 	.word	0x08005420
 8002f10:	0800542a 	.word	0x0800542a
 8002f14:	00000000 	.word	0x00000000
 8002f18:	08002c71 	.word	0x08002c71
 8002f1c:	08005426 	.word	0x08005426

08002f20 <_printf_common>:
 8002f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f24:	4616      	mov	r6, r2
 8002f26:	4698      	mov	r8, r3
 8002f28:	688a      	ldr	r2, [r1, #8]
 8002f2a:	690b      	ldr	r3, [r1, #16]
 8002f2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f30:	4293      	cmp	r3, r2
 8002f32:	bfb8      	it	lt
 8002f34:	4613      	movlt	r3, r2
 8002f36:	6033      	str	r3, [r6, #0]
 8002f38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f3c:	4607      	mov	r7, r0
 8002f3e:	460c      	mov	r4, r1
 8002f40:	b10a      	cbz	r2, 8002f46 <_printf_common+0x26>
 8002f42:	3301      	adds	r3, #1
 8002f44:	6033      	str	r3, [r6, #0]
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	0699      	lsls	r1, r3, #26
 8002f4a:	bf42      	ittt	mi
 8002f4c:	6833      	ldrmi	r3, [r6, #0]
 8002f4e:	3302      	addmi	r3, #2
 8002f50:	6033      	strmi	r3, [r6, #0]
 8002f52:	6825      	ldr	r5, [r4, #0]
 8002f54:	f015 0506 	ands.w	r5, r5, #6
 8002f58:	d106      	bne.n	8002f68 <_printf_common+0x48>
 8002f5a:	f104 0a19 	add.w	sl, r4, #25
 8002f5e:	68e3      	ldr	r3, [r4, #12]
 8002f60:	6832      	ldr	r2, [r6, #0]
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	42ab      	cmp	r3, r5
 8002f66:	dc26      	bgt.n	8002fb6 <_printf_common+0x96>
 8002f68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f6c:	6822      	ldr	r2, [r4, #0]
 8002f6e:	3b00      	subs	r3, #0
 8002f70:	bf18      	it	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	0692      	lsls	r2, r2, #26
 8002f76:	d42b      	bmi.n	8002fd0 <_printf_common+0xb0>
 8002f78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	4638      	mov	r0, r7
 8002f80:	47c8      	blx	r9
 8002f82:	3001      	adds	r0, #1
 8002f84:	d01e      	beq.n	8002fc4 <_printf_common+0xa4>
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	6922      	ldr	r2, [r4, #16]
 8002f8a:	f003 0306 	and.w	r3, r3, #6
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	bf02      	ittt	eq
 8002f92:	68e5      	ldreq	r5, [r4, #12]
 8002f94:	6833      	ldreq	r3, [r6, #0]
 8002f96:	1aed      	subeq	r5, r5, r3
 8002f98:	68a3      	ldr	r3, [r4, #8]
 8002f9a:	bf0c      	ite	eq
 8002f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fa0:	2500      	movne	r5, #0
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	bfc4      	itt	gt
 8002fa6:	1a9b      	subgt	r3, r3, r2
 8002fa8:	18ed      	addgt	r5, r5, r3
 8002faa:	2600      	movs	r6, #0
 8002fac:	341a      	adds	r4, #26
 8002fae:	42b5      	cmp	r5, r6
 8002fb0:	d11a      	bne.n	8002fe8 <_printf_common+0xc8>
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	e008      	b.n	8002fc8 <_printf_common+0xa8>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	4652      	mov	r2, sl
 8002fba:	4641      	mov	r1, r8
 8002fbc:	4638      	mov	r0, r7
 8002fbe:	47c8      	blx	r9
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	d103      	bne.n	8002fcc <_printf_common+0xac>
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fcc:	3501      	adds	r5, #1
 8002fce:	e7c6      	b.n	8002f5e <_printf_common+0x3e>
 8002fd0:	18e1      	adds	r1, r4, r3
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	2030      	movs	r0, #48	@ 0x30
 8002fd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002fda:	4422      	add	r2, r4
 8002fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002fe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	e7c7      	b.n	8002f78 <_printf_common+0x58>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	4622      	mov	r2, r4
 8002fec:	4641      	mov	r1, r8
 8002fee:	4638      	mov	r0, r7
 8002ff0:	47c8      	blx	r9
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	d0e6      	beq.n	8002fc4 <_printf_common+0xa4>
 8002ff6:	3601      	adds	r6, #1
 8002ff8:	e7d9      	b.n	8002fae <_printf_common+0x8e>
	...

08002ffc <_printf_i>:
 8002ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003000:	7e0f      	ldrb	r7, [r1, #24]
 8003002:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003004:	2f78      	cmp	r7, #120	@ 0x78
 8003006:	4691      	mov	r9, r2
 8003008:	4680      	mov	r8, r0
 800300a:	460c      	mov	r4, r1
 800300c:	469a      	mov	sl, r3
 800300e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003012:	d807      	bhi.n	8003024 <_printf_i+0x28>
 8003014:	2f62      	cmp	r7, #98	@ 0x62
 8003016:	d80a      	bhi.n	800302e <_printf_i+0x32>
 8003018:	2f00      	cmp	r7, #0
 800301a:	f000 80d2 	beq.w	80031c2 <_printf_i+0x1c6>
 800301e:	2f58      	cmp	r7, #88	@ 0x58
 8003020:	f000 80b9 	beq.w	8003196 <_printf_i+0x19a>
 8003024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003028:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800302c:	e03a      	b.n	80030a4 <_printf_i+0xa8>
 800302e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003032:	2b15      	cmp	r3, #21
 8003034:	d8f6      	bhi.n	8003024 <_printf_i+0x28>
 8003036:	a101      	add	r1, pc, #4	@ (adr r1, 800303c <_printf_i+0x40>)
 8003038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800303c:	08003095 	.word	0x08003095
 8003040:	080030a9 	.word	0x080030a9
 8003044:	08003025 	.word	0x08003025
 8003048:	08003025 	.word	0x08003025
 800304c:	08003025 	.word	0x08003025
 8003050:	08003025 	.word	0x08003025
 8003054:	080030a9 	.word	0x080030a9
 8003058:	08003025 	.word	0x08003025
 800305c:	08003025 	.word	0x08003025
 8003060:	08003025 	.word	0x08003025
 8003064:	08003025 	.word	0x08003025
 8003068:	080031a9 	.word	0x080031a9
 800306c:	080030d3 	.word	0x080030d3
 8003070:	08003163 	.word	0x08003163
 8003074:	08003025 	.word	0x08003025
 8003078:	08003025 	.word	0x08003025
 800307c:	080031cb 	.word	0x080031cb
 8003080:	08003025 	.word	0x08003025
 8003084:	080030d3 	.word	0x080030d3
 8003088:	08003025 	.word	0x08003025
 800308c:	08003025 	.word	0x08003025
 8003090:	0800316b 	.word	0x0800316b
 8003094:	6833      	ldr	r3, [r6, #0]
 8003096:	1d1a      	adds	r2, r3, #4
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6032      	str	r2, [r6, #0]
 800309c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030a4:	2301      	movs	r3, #1
 80030a6:	e09d      	b.n	80031e4 <_printf_i+0x1e8>
 80030a8:	6833      	ldr	r3, [r6, #0]
 80030aa:	6820      	ldr	r0, [r4, #0]
 80030ac:	1d19      	adds	r1, r3, #4
 80030ae:	6031      	str	r1, [r6, #0]
 80030b0:	0606      	lsls	r6, r0, #24
 80030b2:	d501      	bpl.n	80030b8 <_printf_i+0xbc>
 80030b4:	681d      	ldr	r5, [r3, #0]
 80030b6:	e003      	b.n	80030c0 <_printf_i+0xc4>
 80030b8:	0645      	lsls	r5, r0, #25
 80030ba:	d5fb      	bpl.n	80030b4 <_printf_i+0xb8>
 80030bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80030c0:	2d00      	cmp	r5, #0
 80030c2:	da03      	bge.n	80030cc <_printf_i+0xd0>
 80030c4:	232d      	movs	r3, #45	@ 0x2d
 80030c6:	426d      	negs	r5, r5
 80030c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030cc:	4859      	ldr	r0, [pc, #356]	@ (8003234 <_printf_i+0x238>)
 80030ce:	230a      	movs	r3, #10
 80030d0:	e011      	b.n	80030f6 <_printf_i+0xfa>
 80030d2:	6821      	ldr	r1, [r4, #0]
 80030d4:	6833      	ldr	r3, [r6, #0]
 80030d6:	0608      	lsls	r0, r1, #24
 80030d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80030dc:	d402      	bmi.n	80030e4 <_printf_i+0xe8>
 80030de:	0649      	lsls	r1, r1, #25
 80030e0:	bf48      	it	mi
 80030e2:	b2ad      	uxthmi	r5, r5
 80030e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80030e6:	4853      	ldr	r0, [pc, #332]	@ (8003234 <_printf_i+0x238>)
 80030e8:	6033      	str	r3, [r6, #0]
 80030ea:	bf14      	ite	ne
 80030ec:	230a      	movne	r3, #10
 80030ee:	2308      	moveq	r3, #8
 80030f0:	2100      	movs	r1, #0
 80030f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030f6:	6866      	ldr	r6, [r4, #4]
 80030f8:	60a6      	str	r6, [r4, #8]
 80030fa:	2e00      	cmp	r6, #0
 80030fc:	bfa2      	ittt	ge
 80030fe:	6821      	ldrge	r1, [r4, #0]
 8003100:	f021 0104 	bicge.w	r1, r1, #4
 8003104:	6021      	strge	r1, [r4, #0]
 8003106:	b90d      	cbnz	r5, 800310c <_printf_i+0x110>
 8003108:	2e00      	cmp	r6, #0
 800310a:	d04b      	beq.n	80031a4 <_printf_i+0x1a8>
 800310c:	4616      	mov	r6, r2
 800310e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003112:	fb03 5711 	mls	r7, r3, r1, r5
 8003116:	5dc7      	ldrb	r7, [r0, r7]
 8003118:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800311c:	462f      	mov	r7, r5
 800311e:	42bb      	cmp	r3, r7
 8003120:	460d      	mov	r5, r1
 8003122:	d9f4      	bls.n	800310e <_printf_i+0x112>
 8003124:	2b08      	cmp	r3, #8
 8003126:	d10b      	bne.n	8003140 <_printf_i+0x144>
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	07df      	lsls	r7, r3, #31
 800312c:	d508      	bpl.n	8003140 <_printf_i+0x144>
 800312e:	6923      	ldr	r3, [r4, #16]
 8003130:	6861      	ldr	r1, [r4, #4]
 8003132:	4299      	cmp	r1, r3
 8003134:	bfde      	ittt	le
 8003136:	2330      	movle	r3, #48	@ 0x30
 8003138:	f806 3c01 	strble.w	r3, [r6, #-1]
 800313c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003140:	1b92      	subs	r2, r2, r6
 8003142:	6122      	str	r2, [r4, #16]
 8003144:	f8cd a000 	str.w	sl, [sp]
 8003148:	464b      	mov	r3, r9
 800314a:	aa03      	add	r2, sp, #12
 800314c:	4621      	mov	r1, r4
 800314e:	4640      	mov	r0, r8
 8003150:	f7ff fee6 	bl	8002f20 <_printf_common>
 8003154:	3001      	adds	r0, #1
 8003156:	d14a      	bne.n	80031ee <_printf_i+0x1f2>
 8003158:	f04f 30ff 	mov.w	r0, #4294967295
 800315c:	b004      	add	sp, #16
 800315e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	f043 0320 	orr.w	r3, r3, #32
 8003168:	6023      	str	r3, [r4, #0]
 800316a:	4833      	ldr	r0, [pc, #204]	@ (8003238 <_printf_i+0x23c>)
 800316c:	2778      	movs	r7, #120	@ 0x78
 800316e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	6831      	ldr	r1, [r6, #0]
 8003176:	061f      	lsls	r7, r3, #24
 8003178:	f851 5b04 	ldr.w	r5, [r1], #4
 800317c:	d402      	bmi.n	8003184 <_printf_i+0x188>
 800317e:	065f      	lsls	r7, r3, #25
 8003180:	bf48      	it	mi
 8003182:	b2ad      	uxthmi	r5, r5
 8003184:	6031      	str	r1, [r6, #0]
 8003186:	07d9      	lsls	r1, r3, #31
 8003188:	bf44      	itt	mi
 800318a:	f043 0320 	orrmi.w	r3, r3, #32
 800318e:	6023      	strmi	r3, [r4, #0]
 8003190:	b11d      	cbz	r5, 800319a <_printf_i+0x19e>
 8003192:	2310      	movs	r3, #16
 8003194:	e7ac      	b.n	80030f0 <_printf_i+0xf4>
 8003196:	4827      	ldr	r0, [pc, #156]	@ (8003234 <_printf_i+0x238>)
 8003198:	e7e9      	b.n	800316e <_printf_i+0x172>
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	f023 0320 	bic.w	r3, r3, #32
 80031a0:	6023      	str	r3, [r4, #0]
 80031a2:	e7f6      	b.n	8003192 <_printf_i+0x196>
 80031a4:	4616      	mov	r6, r2
 80031a6:	e7bd      	b.n	8003124 <_printf_i+0x128>
 80031a8:	6833      	ldr	r3, [r6, #0]
 80031aa:	6825      	ldr	r5, [r4, #0]
 80031ac:	6961      	ldr	r1, [r4, #20]
 80031ae:	1d18      	adds	r0, r3, #4
 80031b0:	6030      	str	r0, [r6, #0]
 80031b2:	062e      	lsls	r6, r5, #24
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	d501      	bpl.n	80031bc <_printf_i+0x1c0>
 80031b8:	6019      	str	r1, [r3, #0]
 80031ba:	e002      	b.n	80031c2 <_printf_i+0x1c6>
 80031bc:	0668      	lsls	r0, r5, #25
 80031be:	d5fb      	bpl.n	80031b8 <_printf_i+0x1bc>
 80031c0:	8019      	strh	r1, [r3, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	6123      	str	r3, [r4, #16]
 80031c6:	4616      	mov	r6, r2
 80031c8:	e7bc      	b.n	8003144 <_printf_i+0x148>
 80031ca:	6833      	ldr	r3, [r6, #0]
 80031cc:	1d1a      	adds	r2, r3, #4
 80031ce:	6032      	str	r2, [r6, #0]
 80031d0:	681e      	ldr	r6, [r3, #0]
 80031d2:	6862      	ldr	r2, [r4, #4]
 80031d4:	2100      	movs	r1, #0
 80031d6:	4630      	mov	r0, r6
 80031d8:	f7fd f802 	bl	80001e0 <memchr>
 80031dc:	b108      	cbz	r0, 80031e2 <_printf_i+0x1e6>
 80031de:	1b80      	subs	r0, r0, r6
 80031e0:	6060      	str	r0, [r4, #4]
 80031e2:	6863      	ldr	r3, [r4, #4]
 80031e4:	6123      	str	r3, [r4, #16]
 80031e6:	2300      	movs	r3, #0
 80031e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031ec:	e7aa      	b.n	8003144 <_printf_i+0x148>
 80031ee:	6923      	ldr	r3, [r4, #16]
 80031f0:	4632      	mov	r2, r6
 80031f2:	4649      	mov	r1, r9
 80031f4:	4640      	mov	r0, r8
 80031f6:	47d0      	blx	sl
 80031f8:	3001      	adds	r0, #1
 80031fa:	d0ad      	beq.n	8003158 <_printf_i+0x15c>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	079b      	lsls	r3, r3, #30
 8003200:	d413      	bmi.n	800322a <_printf_i+0x22e>
 8003202:	68e0      	ldr	r0, [r4, #12]
 8003204:	9b03      	ldr	r3, [sp, #12]
 8003206:	4298      	cmp	r0, r3
 8003208:	bfb8      	it	lt
 800320a:	4618      	movlt	r0, r3
 800320c:	e7a6      	b.n	800315c <_printf_i+0x160>
 800320e:	2301      	movs	r3, #1
 8003210:	4632      	mov	r2, r6
 8003212:	4649      	mov	r1, r9
 8003214:	4640      	mov	r0, r8
 8003216:	47d0      	blx	sl
 8003218:	3001      	adds	r0, #1
 800321a:	d09d      	beq.n	8003158 <_printf_i+0x15c>
 800321c:	3501      	adds	r5, #1
 800321e:	68e3      	ldr	r3, [r4, #12]
 8003220:	9903      	ldr	r1, [sp, #12]
 8003222:	1a5b      	subs	r3, r3, r1
 8003224:	42ab      	cmp	r3, r5
 8003226:	dcf2      	bgt.n	800320e <_printf_i+0x212>
 8003228:	e7eb      	b.n	8003202 <_printf_i+0x206>
 800322a:	2500      	movs	r5, #0
 800322c:	f104 0619 	add.w	r6, r4, #25
 8003230:	e7f5      	b.n	800321e <_printf_i+0x222>
 8003232:	bf00      	nop
 8003234:	08005431 	.word	0x08005431
 8003238:	08005442 	.word	0x08005442

0800323c <_sbrk_r>:
 800323c:	b538      	push	{r3, r4, r5, lr}
 800323e:	4d06      	ldr	r5, [pc, #24]	@ (8003258 <_sbrk_r+0x1c>)
 8003240:	2300      	movs	r3, #0
 8003242:	4604      	mov	r4, r0
 8003244:	4608      	mov	r0, r1
 8003246:	602b      	str	r3, [r5, #0]
 8003248:	f7fd ff22 	bl	8001090 <_sbrk>
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	d102      	bne.n	8003256 <_sbrk_r+0x1a>
 8003250:	682b      	ldr	r3, [r5, #0]
 8003252:	b103      	cbz	r3, 8003256 <_sbrk_r+0x1a>
 8003254:	6023      	str	r3, [r4, #0]
 8003256:	bd38      	pop	{r3, r4, r5, pc}
 8003258:	20000644 	.word	0x20000644

0800325c <_realloc_r>:
 800325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003260:	4680      	mov	r8, r0
 8003262:	4615      	mov	r5, r2
 8003264:	460c      	mov	r4, r1
 8003266:	b921      	cbnz	r1, 8003272 <_realloc_r+0x16>
 8003268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800326c:	4611      	mov	r1, r2
 800326e:	f7ff bc73 	b.w	8002b58 <_malloc_r>
 8003272:	b92a      	cbnz	r2, 8003280 <_realloc_r+0x24>
 8003274:	f7ff fc04 	bl	8002a80 <_free_r>
 8003278:	2400      	movs	r4, #0
 800327a:	4620      	mov	r0, r4
 800327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003280:	f000 f81a 	bl	80032b8 <_malloc_usable_size_r>
 8003284:	4285      	cmp	r5, r0
 8003286:	4606      	mov	r6, r0
 8003288:	d802      	bhi.n	8003290 <_realloc_r+0x34>
 800328a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800328e:	d8f4      	bhi.n	800327a <_realloc_r+0x1e>
 8003290:	4629      	mov	r1, r5
 8003292:	4640      	mov	r0, r8
 8003294:	f7ff fc60 	bl	8002b58 <_malloc_r>
 8003298:	4607      	mov	r7, r0
 800329a:	2800      	cmp	r0, #0
 800329c:	d0ec      	beq.n	8003278 <_realloc_r+0x1c>
 800329e:	42b5      	cmp	r5, r6
 80032a0:	462a      	mov	r2, r5
 80032a2:	4621      	mov	r1, r4
 80032a4:	bf28      	it	cs
 80032a6:	4632      	movcs	r2, r6
 80032a8:	f7ff fbdc 	bl	8002a64 <memcpy>
 80032ac:	4621      	mov	r1, r4
 80032ae:	4640      	mov	r0, r8
 80032b0:	f7ff fbe6 	bl	8002a80 <_free_r>
 80032b4:	463c      	mov	r4, r7
 80032b6:	e7e0      	b.n	800327a <_realloc_r+0x1e>

080032b8 <_malloc_usable_size_r>:
 80032b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032bc:	1f18      	subs	r0, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bfbc      	itt	lt
 80032c2:	580b      	ldrlt	r3, [r1, r0]
 80032c4:	18c0      	addlt	r0, r0, r3
 80032c6:	4770      	bx	lr

080032c8 <_init>:
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ca:	bf00      	nop
 80032cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ce:	bc08      	pop	{r3}
 80032d0:	469e      	mov	lr, r3
 80032d2:	4770      	bx	lr

080032d4 <_fini>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	bf00      	nop
 80032d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032da:	bc08      	pop	{r3}
 80032dc:	469e      	mov	lr, r3
 80032de:	4770      	bx	lr
