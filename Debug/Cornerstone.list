
Cornerstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027cc  08003c64  08003c64  00004c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006430  08006430  0000809c  2**0
                  CONTENTS
  4 .ARM          00000008  08006430  08006430  00007430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006438  08006438  0000809c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006438  08006438  00007438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800643c  0800643c  0000743c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08006440  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  2000009c  080064dc  0000809c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  080064dc  00008694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a34  00000000  00000000  000080cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa8  00000000  00000000  00010b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  000125a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a1  00000000  00000000  00012e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001633f  00000000  00000000  00013509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfc8  00000000  00000000  00029848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086fa1  00000000  00000000  00035810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc7b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002814  00000000  00000000  000bc7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000bf008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c4c 	.word	0x08003c4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	08003c4c 	.word	0x08003c4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <getTimeFromMS>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getTimeFromMS(unsigned int *ms, int *clock) {
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	int hours = *ms / 3600000;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a10      	ldr	r2, [pc, #64]	@ (80005c0 <getTimeFromMS+0x50>)
 8000580:	fba2 2303 	umull	r2, r3, r2, r3
 8000584:	0d5b      	lsrs	r3, r3, #21
 8000586:	60fb      	str	r3, [r7, #12]
	int minutes = (*ms % 3600000) / 60000;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <getTimeFromMS+0x50>)
 800058e:	fba3 1302 	umull	r1, r3, r3, r2
 8000592:	0d5b      	lsrs	r3, r3, #21
 8000594:	490b      	ldr	r1, [pc, #44]	@ (80005c4 <getTimeFromMS+0x54>)
 8000596:	fb01 f303 	mul.w	r3, r1, r3
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	4a0a      	ldr	r2, [pc, #40]	@ (80005c8 <getTimeFromMS+0x58>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	0b9b      	lsrs	r3, r3, #14
 80005a4:	60bb      	str	r3, [r7, #8]
	//int seconds = ((*ms % 3600000) % 60000) / 1000;
	clock[0] = hours;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	601a      	str	r2, [r3, #0]
	clock[1] = minutes;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	3304      	adds	r3, #4
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	601a      	str	r2, [r3, #0]
	/*else if(hours == 0) {
		clock[0] = minutes;
		clock[1] = seconds;
	}*/
}
 80005b4:	bf00      	nop
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	95217cb1 	.word	0x95217cb1
 80005c4:	0036ee80 	.word	0x0036ee80
 80005c8:	45e7b273 	.word	0x45e7b273

080005cc <ApplyNewInterval>:

void ApplyNewInterval() {
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	Interval = NewInterval;
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <ApplyNewInterval+0x24>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <ApplyNewInterval+0x28>)
 80005d6:	6013      	str	r3, [r2, #0]

	TimePassed = 0;
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <ApplyNewInterval+0x2c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	TimeLeft = NewInterval;
 80005de:	4b04      	ldr	r3, [pc, #16]	@ (80005f0 <ApplyNewInterval+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <ApplyNewInterval+0x30>)
 80005e4:	6013      	str	r3, [r2, #0]
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	20000030 	.word	0x20000030
 80005f4:	2000002c 	.word	0x2000002c
 80005f8:	20000128 	.word	0x20000128
 80005fc:	2000003c 	.word	0x2000003c

08000600 <ApplyNewDuration>:

void ApplyNewDuration() {
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	Duration = NewDuration;
 8000604:	4b04      	ldr	r3, [pc, #16]	@ (8000618 <ApplyNewDuration+0x18>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a04      	ldr	r2, [pc, #16]	@ (800061c <ApplyNewDuration+0x1c>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000038 	.word	0x20000038
 800061c:	20000034 	.word	0x20000034

08000620 <ResetNewInterval>:

void ResetNewInterval() {
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	NewInterval = Interval;
 8000624:	4b04      	ldr	r3, [pc, #16]	@ (8000638 <ResetNewInterval+0x18>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a04      	ldr	r2, [pc, #16]	@ (800063c <ResetNewInterval+0x1c>)
 800062a:	6013      	str	r3, [r2, #0]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	2000002c 	.word	0x2000002c
 800063c:	20000030 	.word	0x20000030

08000640 <ResetNewDuration>:

void ResetNewDuration() {
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
	NewDuration = Duration;
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <ResetNewDuration+0x18>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <ResetNewDuration+0x1c>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000034 	.word	0x20000034
 800065c:	20000038 	.word	0x20000038

08000660 <UpdateLastTime>:

void UpdateLastTime() {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	if(WasPoured == false) {
 8000664:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <UpdateLastTime+0x48>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <UpdateLastTime+0x20>
		menu_list[3][0] = "noch nicht";
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <UpdateLastTime+0x4c>)
 8000674:	4a0e      	ldr	r2, [pc, #56]	@ (80006b0 <UpdateLastTime+0x50>)
 8000676:	619a      	str	r2, [r3, #24]
		menu_list[3][1] = "verwendet";
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <UpdateLastTime+0x4c>)
 800067a:	4a0e      	ldr	r2, [pc, #56]	@ (80006b4 <UpdateLastTime+0x54>)
 800067c:	61da      	str	r2, [r3, #28]
		getTimeFromMS(&TimePassed, &timeBar);
		sprintf(str, "vor %02d:%02d", timeBar[0], timeBar[1]);
		menu_list[3][0] = str;
		menu_list[3][1] = "verwendet";
	}
}
 800067e:	e011      	b.n	80006a4 <UpdateLastTime+0x44>
		getTimeFromMS(&TimePassed, &timeBar);
 8000680:	490d      	ldr	r1, [pc, #52]	@ (80006b8 <UpdateLastTime+0x58>)
 8000682:	480e      	ldr	r0, [pc, #56]	@ (80006bc <UpdateLastTime+0x5c>)
 8000684:	f7ff ff74 	bl	8000570 <getTimeFromMS>
		sprintf(str, "vor %02d:%02d", timeBar[0], timeBar[1]);
 8000688:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <UpdateLastTime+0x58>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <UpdateLastTime+0x58>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	490b      	ldr	r1, [pc, #44]	@ (80006c0 <UpdateLastTime+0x60>)
 8000692:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <UpdateLastTime+0x64>)
 8000694:	f002 fe3a 	bl	800330c <siprintf>
		menu_list[3][0] = str;
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <UpdateLastTime+0x4c>)
 800069a:	4a0a      	ldr	r2, [pc, #40]	@ (80006c4 <UpdateLastTime+0x64>)
 800069c:	619a      	str	r2, [r3, #24]
		menu_list[3][1] = "verwendet";
 800069e:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <UpdateLastTime+0x4c>)
 80006a0:	4a04      	ldr	r2, [pc, #16]	@ (80006b4 <UpdateLastTime+0x54>)
 80006a2:	61da      	str	r2, [r3, #28]
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000130 	.word	0x20000130
 80006ac:	20000000 	.word	0x20000000
 80006b0:	08003c64 	.word	0x08003c64
 80006b4:	08003c70 	.word	0x08003c70
 80006b8:	20000120 	.word	0x20000120
 80006bc:	20000128 	.word	0x20000128
 80006c0:	08003c7c 	.word	0x08003c7c
 80006c4:	2000010c 	.word	0x2000010c

080006c8 <UpdateNextTime>:

void UpdateNextTime() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	getTimeFromMS(&TimeLeft, &timeBar);
 80006cc:	4909      	ldr	r1, [pc, #36]	@ (80006f4 <UpdateNextTime+0x2c>)
 80006ce:	480a      	ldr	r0, [pc, #40]	@ (80006f8 <UpdateNextTime+0x30>)
 80006d0:	f7ff ff4e 	bl	8000570 <getTimeFromMS>
	sprintf(str, "noch %02d:%02d", timeBar[0], timeBar[1]);
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <UpdateNextTime+0x2c>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <UpdateNextTime+0x2c>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	4907      	ldr	r1, [pc, #28]	@ (80006fc <UpdateNextTime+0x34>)
 80006de:	4808      	ldr	r0, [pc, #32]	@ (8000700 <UpdateNextTime+0x38>)
 80006e0:	f002 fe14 	bl	800330c <siprintf>
	menu_list[4][0] = str;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <UpdateNextTime+0x3c>)
 80006e6:	4a06      	ldr	r2, [pc, #24]	@ (8000700 <UpdateNextTime+0x38>)
 80006e8:	621a      	str	r2, [r3, #32]
	menu_list[4][1] = "zum Giessen";
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <UpdateNextTime+0x3c>)
 80006ec:	4a06      	ldr	r2, [pc, #24]	@ (8000708 <UpdateNextTime+0x40>)
 80006ee:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000120 	.word	0x20000120
 80006f8:	2000003c 	.word	0x2000003c
 80006fc:	08003c8c 	.word	0x08003c8c
 8000700:	2000010c 	.word	0x2000010c
 8000704:	20000000 	.word	0x20000000
 8000708:	08003c9c 	.word	0x08003c9c

0800070c <WakeUp>:

void WakeUp() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	DisplayShutDownTime = 0;
 8000710:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <WakeUp+0x48>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
	if(menu_option == OFF) {
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <WakeUp+0x4c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800071e:	d116      	bne.n	800074e <WakeUp+0x42>
		menu_option = READY;
 8000720:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <WakeUp+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
		setting_option = MENU;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <WakeUp+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
		ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <WakeUp+0x4c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <WakeUp+0x54>)
 8000734:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000738:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <WakeUp+0x4c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a08      	ldr	r2, [pc, #32]	@ (8000760 <WakeUp+0x54>)
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	4413      	add	r3, r2
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <WakeUp+0x4c>)
 8000746:	6812      	ldr	r2, [r2, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	f000 ff03 	bl	8001554 <ssd1306_TestMenu>
	}
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000012c 	.word	0x2000012c
 8000758:	20000028 	.word	0x20000028
 800075c:	20000118 	.word	0x20000118
 8000760:	20000000 	.word	0x20000000

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f001 f9ac 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 fb0a 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f000 fb94 	bl	8000e9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000774:	f000 fb64 	bl	8000e40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000778:	f000 fc46 	bl	8001008 <ssd1306_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // UP - BEGIN
	  HAL_Delay(100);
 800077c:	2064      	movs	r0, #100	@ 0x64
 800077e:	f001 fa13 	bl	8001ba8 <HAL_Delay>
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET)
 8000782:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000786:	4897      	ldr	r0, [pc, #604]	@ (80009e4 <main+0x280>)
 8000788:	f001 fc9c 	bl	80020c4 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d103      	bne.n	800079a <main+0x36>
      {
		  pressedUpButton = true;
 8000792:	4b95      	ldr	r3, [pc, #596]	@ (80009e8 <main+0x284>)
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
		  continue;
 8000798:	e2df      	b.n	8000d5a <main+0x5f6>
      }
	  else if (pressedUpButton == true)
 800079a:	4b93      	ldr	r3, [pc, #588]	@ (80009e8 <main+0x284>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f000 808b 	beq.w	80008ba <main+0x156>
	  {
		  pressedUpButton = false;
 80007a4:	4b90      	ldr	r3, [pc, #576]	@ (80009e8 <main+0x284>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
		  DisplayShutDownTime = 0;
 80007aa:	4b90      	ldr	r3, [pc, #576]	@ (80009ec <main+0x288>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
		  if(menu_option == OFF) {
 80007b0:	4b8f      	ldr	r3, [pc, #572]	@ (80009f0 <main+0x28c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b8:	d102      	bne.n	80007c0 <main+0x5c>
			  WakeUp();
 80007ba:	f7ff ffa7 	bl	800070c <WakeUp>
			  continue;
 80007be:	e2cc      	b.n	8000d5a <main+0x5f6>
		  }

		  if(setting_option == MENU) {
 80007c0:	4b8c      	ldr	r3, [pc, #560]	@ (80009f4 <main+0x290>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d128      	bne.n	800081a <main+0xb6>
			  if(menu_option > 0) {
 80007c8:	4b89      	ldr	r3, [pc, #548]	@ (80009f0 <main+0x28c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	f000 82bd 	beq.w	8000d4c <main+0x5e8>
				  menu_option --;
 80007d2:	4b87      	ldr	r3, [pc, #540]	@ (80009f0 <main+0x28c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a85      	ldr	r2, [pc, #532]	@ (80009f0 <main+0x28c>)
 80007da:	6013      	str	r3, [r2, #0]
				  if(menu_option == 3) {
 80007dc:	4b84      	ldr	r3, [pc, #528]	@ (80009f0 <main+0x28c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d102      	bne.n	80007ea <main+0x86>
					  UpdateLastTime();
 80007e4:	f7ff ff3c 	bl	8000660 <UpdateLastTime>
 80007e8:	e005      	b.n	80007f6 <main+0x92>
				  }
				  else if(menu_option == 4) {
 80007ea:	4b81      	ldr	r3, [pc, #516]	@ (80009f0 <main+0x28c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	d101      	bne.n	80007f6 <main+0x92>
					  UpdateNextTime();
 80007f2:	f7ff ff69 	bl	80006c8 <UpdateNextTime>
				  }
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 80007f6:	4b7e      	ldr	r3, [pc, #504]	@ (80009f0 <main+0x28c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b7e      	ldr	r3, [pc, #504]	@ (80009f8 <main+0x294>)
 80007fe:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000802:	4b7b      	ldr	r3, [pc, #492]	@ (80009f0 <main+0x28c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a7c      	ldr	r2, [pc, #496]	@ (80009f8 <main+0x294>)
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	4413      	add	r3, r2
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	4a78      	ldr	r2, [pc, #480]	@ (80009f0 <main+0x28c>)
 8000810:	6812      	ldr	r2, [r2, #0]
 8000812:	4619      	mov	r1, r3
 8000814:	f000 fe9e 	bl	8001554 <ssd1306_TestMenu>
			  }

			  ssd1306_TestDurationSetting(&NewDuration);
		  }

		  continue;
 8000818:	e298      	b.n	8000d4c <main+0x5e8>
		  else if(setting_option == INTERVAL_SETTING) {
 800081a:	4b76      	ldr	r3, [pc, #472]	@ (80009f4 <main+0x290>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d131      	bne.n	8000886 <main+0x122>
			  if(intervalSection == HOURS) {
 8000822:	4b76      	ldr	r3, [pc, #472]	@ (80009fc <main+0x298>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d111      	bne.n	800084e <main+0xea>
				  if(NewInterval + 3600000 <= MaxInterval) {
 800082a:	4b75      	ldr	r3, [pc, #468]	@ (8000a00 <main+0x29c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f503 135b 	add.w	r3, r3, #3588096	@ 0x36c000
 8000832:	f503 533a 	add.w	r3, r3, #11904	@ 0x2e80
 8000836:	4a73      	ldr	r2, [pc, #460]	@ (8000a04 <main+0x2a0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d81b      	bhi.n	8000874 <main+0x110>
					  NewInterval += 3600000;
 800083c:	4b70      	ldr	r3, [pc, #448]	@ (8000a00 <main+0x29c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f503 135b 	add.w	r3, r3, #3588096	@ 0x36c000
 8000844:	f503 533a 	add.w	r3, r3, #11904	@ 0x2e80
 8000848:	4a6d      	ldr	r2, [pc, #436]	@ (8000a00 <main+0x29c>)
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	e012      	b.n	8000874 <main+0x110>
			  else if(intervalSection == MINUTES) {
 800084e:	4b6b      	ldr	r3, [pc, #428]	@ (80009fc <main+0x298>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d10e      	bne.n	8000874 <main+0x110>
				  if(NewInterval + 60000 <= MaxInterval) {
 8000856:	4b6a      	ldr	r3, [pc, #424]	@ (8000a00 <main+0x29c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 800085e:	3360      	adds	r3, #96	@ 0x60
 8000860:	4a68      	ldr	r2, [pc, #416]	@ (8000a04 <main+0x2a0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d806      	bhi.n	8000874 <main+0x110>
					  NewInterval += 60000;
 8000866:	4b66      	ldr	r3, [pc, #408]	@ (8000a00 <main+0x29c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 800086e:	3360      	adds	r3, #96	@ 0x60
 8000870:	4a63      	ldr	r2, [pc, #396]	@ (8000a00 <main+0x29c>)
 8000872:	6013      	str	r3, [r2, #0]
			  getTimeFromMS(&NewInterval, &timeBar);
 8000874:	4964      	ldr	r1, [pc, #400]	@ (8000a08 <main+0x2a4>)
 8000876:	4862      	ldr	r0, [pc, #392]	@ (8000a00 <main+0x29c>)
 8000878:	f7ff fe7a 	bl	8000570 <getTimeFromMS>
			  ssd1306_TestIntervalSetting(timeBar, &NewInterval);
 800087c:	4960      	ldr	r1, [pc, #384]	@ (8000a00 <main+0x29c>)
 800087e:	4862      	ldr	r0, [pc, #392]	@ (8000a08 <main+0x2a4>)
 8000880:	f000 feb2 	bl	80015e8 <ssd1306_TestIntervalSetting>
		  continue;
 8000884:	e262      	b.n	8000d4c <main+0x5e8>
		  else if(setting_option == DURATION_SETTING) {
 8000886:	4b5b      	ldr	r3, [pc, #364]	@ (80009f4 <main+0x290>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b02      	cmp	r3, #2
 800088c:	f040 825e 	bne.w	8000d4c <main+0x5e8>
			  if(durationSection == SECONDS) {
 8000890:	4b5e      	ldr	r3, [pc, #376]	@ (8000a0c <main+0x2a8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10c      	bne.n	80008b2 <main+0x14e>
				  if(NewDuration + 1000 <= MaxDuration) {
 8000898:	4b5d      	ldr	r3, [pc, #372]	@ (8000a10 <main+0x2ac>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80008a0:	4a5c      	ldr	r2, [pc, #368]	@ (8000a14 <main+0x2b0>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d805      	bhi.n	80008b2 <main+0x14e>
					  NewDuration += 1000;
 80008a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a10 <main+0x2ac>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80008ae:	4a58      	ldr	r2, [pc, #352]	@ (8000a10 <main+0x2ac>)
 80008b0:	6013      	str	r3, [r2, #0]
			  ssd1306_TestDurationSetting(&NewDuration);
 80008b2:	4857      	ldr	r0, [pc, #348]	@ (8000a10 <main+0x2ac>)
 80008b4:	f000 ff5e 	bl	8001774 <ssd1306_TestDurationSetting>
		  continue;
 80008b8:	e248      	b.n	8000d4c <main+0x5e8>
	  }
	  // UP - END

	  // DOWN - BEGIN
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 80008ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008be:	4849      	ldr	r0, [pc, #292]	@ (80009e4 <main+0x280>)
 80008c0:	f001 fc00 	bl	80020c4 <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d103      	bne.n	80008d2 <main+0x16e>
      {
		  pressedDownButton = true;
 80008ca:	4b53      	ldr	r3, [pc, #332]	@ (8000a18 <main+0x2b4>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
		  continue;
 80008d0:	e243      	b.n	8000d5a <main+0x5f6>
      }
	  else if (pressedDownButton == true)
 80008d2:	4b51      	ldr	r3, [pc, #324]	@ (8000a18 <main+0x2b4>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f000 80a2 	beq.w	8000a20 <main+0x2bc>
	  {
		  pressedDownButton = false;
 80008dc:	4b4e      	ldr	r3, [pc, #312]	@ (8000a18 <main+0x2b4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
		  DisplayShutDownTime = 0;
 80008e2:	4b42      	ldr	r3, [pc, #264]	@ (80009ec <main+0x288>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
		  if(menu_option == OFF) {
 80008e8:	4b41      	ldr	r3, [pc, #260]	@ (80009f0 <main+0x28c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f0:	d102      	bne.n	80008f8 <main+0x194>
			  WakeUp();
 80008f2:	f7ff ff0b 	bl	800070c <WakeUp>
			  continue;
 80008f6:	e230      	b.n	8000d5a <main+0x5f6>
		  }

		  if(setting_option == MENU) {
 80008f8:	4b3e      	ldr	r3, [pc, #248]	@ (80009f4 <main+0x290>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d129      	bne.n	8000954 <main+0x1f0>
			  if(menu_option < MENU_COUNT) {
 8000900:	4b3b      	ldr	r3, [pc, #236]	@ (80009f0 <main+0x28c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2204      	movs	r2, #4
 8000906:	4293      	cmp	r3, r2
 8000908:	f080 8222 	bcs.w	8000d50 <main+0x5ec>
				  menu_option ++;
 800090c:	4b38      	ldr	r3, [pc, #224]	@ (80009f0 <main+0x28c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	4a37      	ldr	r2, [pc, #220]	@ (80009f0 <main+0x28c>)
 8000914:	6013      	str	r3, [r2, #0]

				  if(menu_option == 3) {
 8000916:	4b36      	ldr	r3, [pc, #216]	@ (80009f0 <main+0x28c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d102      	bne.n	8000924 <main+0x1c0>
					  UpdateLastTime();
 800091e:	f7ff fe9f 	bl	8000660 <UpdateLastTime>
 8000922:	e005      	b.n	8000930 <main+0x1cc>
				  }
				  else if(menu_option == 4) {
 8000924:	4b32      	ldr	r3, [pc, #200]	@ (80009f0 <main+0x28c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b04      	cmp	r3, #4
 800092a:	d101      	bne.n	8000930 <main+0x1cc>
					  UpdateNextTime();
 800092c:	f7ff fecc 	bl	80006c8 <UpdateNextTime>
				  }
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000930:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <main+0x28c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b30      	ldr	r3, [pc, #192]	@ (80009f8 <main+0x294>)
 8000938:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800093c:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <main+0x28c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a2d      	ldr	r2, [pc, #180]	@ (80009f8 <main+0x294>)
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	4413      	add	r3, r2
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4a29      	ldr	r2, [pc, #164]	@ (80009f0 <main+0x28c>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f000 fe01 	bl	8001554 <ssd1306_TestMenu>
			  }

			  ssd1306_TestDurationSetting(&NewDuration);
		  }

		  continue;
 8000952:	e1fd      	b.n	8000d50 <main+0x5ec>
		  else if(setting_option == INTERVAL_SETTING) {
 8000954:	4b27      	ldr	r3, [pc, #156]	@ (80009f4 <main+0x290>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d12b      	bne.n	80009b4 <main+0x250>
			  if(intervalSection == HOURS) {
 800095c:	4b27      	ldr	r3, [pc, #156]	@ (80009fc <main+0x298>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d10d      	bne.n	8000980 <main+0x21c>
				  if(NewInterval >= 3600000) {
 8000964:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <main+0x29c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a2c      	ldr	r2, [pc, #176]	@ (8000a1c <main+0x2b8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d319      	bcc.n	80009a2 <main+0x23e>
					  NewInterval -= 3600000;
 800096e:	4b24      	ldr	r3, [pc, #144]	@ (8000a00 <main+0x29c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f5a3 135b 	sub.w	r3, r3, #3588096	@ 0x36c000
 8000976:	f5a3 533a 	sub.w	r3, r3, #11904	@ 0x2e80
 800097a:	4a21      	ldr	r2, [pc, #132]	@ (8000a00 <main+0x29c>)
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	e010      	b.n	80009a2 <main+0x23e>
			  else if(intervalSection == MINUTES) {
 8000980:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <main+0x298>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d10c      	bne.n	80009a2 <main+0x23e>
				  if(NewInterval >= 60000) {
 8000988:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <main+0x29c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000990:	4293      	cmp	r3, r2
 8000992:	d906      	bls.n	80009a2 <main+0x23e>
					  NewInterval -= 60000;
 8000994:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <main+0x29c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 800099c:	3b60      	subs	r3, #96	@ 0x60
 800099e:	4a18      	ldr	r2, [pc, #96]	@ (8000a00 <main+0x29c>)
 80009a0:	6013      	str	r3, [r2, #0]
			  getTimeFromMS(&NewInterval, &timeBar);
 80009a2:	4919      	ldr	r1, [pc, #100]	@ (8000a08 <main+0x2a4>)
 80009a4:	4816      	ldr	r0, [pc, #88]	@ (8000a00 <main+0x29c>)
 80009a6:	f7ff fde3 	bl	8000570 <getTimeFromMS>
			  ssd1306_TestIntervalSetting(timeBar, &NewInterval);
 80009aa:	4915      	ldr	r1, [pc, #84]	@ (8000a00 <main+0x29c>)
 80009ac:	4816      	ldr	r0, [pc, #88]	@ (8000a08 <main+0x2a4>)
 80009ae:	f000 fe1b 	bl	80015e8 <ssd1306_TestIntervalSetting>
		  continue;
 80009b2:	e1cd      	b.n	8000d50 <main+0x5ec>
		  else if(setting_option == DURATION_SETTING) {
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <main+0x290>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	f040 81c9 	bne.w	8000d50 <main+0x5ec>
			  if(durationSection == SECONDS) {
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <main+0x2a8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10a      	bne.n	80009dc <main+0x278>
				  if(NewDuration >= 1000) {
 80009c6:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <main+0x2ac>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009ce:	d305      	bcc.n	80009dc <main+0x278>
					  NewDuration -= 1000;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <main+0x2ac>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <main+0x2ac>)
 80009da:	6013      	str	r3, [r2, #0]
			  ssd1306_TestDurationSetting(&NewDuration);
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <main+0x2ac>)
 80009de:	f000 fec9 	bl	8001774 <ssd1306_TestDurationSetting>
		  continue;
 80009e2:	e1b5      	b.n	8000d50 <main+0x5ec>
 80009e4:	40020400 	.word	0x40020400
 80009e8:	2000011c 	.word	0x2000011c
 80009ec:	2000012c 	.word	0x2000012c
 80009f0:	20000028 	.word	0x20000028
 80009f4:	20000118 	.word	0x20000118
 80009f8:	20000000 	.word	0x20000000
 80009fc:	2000053c 	.word	0x2000053c
 8000a00:	20000030 	.word	0x20000030
 8000a04:	14997000 	.word	0x14997000
 8000a08:	20000120 	.word	0x20000120
 8000a0c:	20000540 	.word	0x20000540
 8000a10:	20000038 	.word	0x20000038
 8000a14:	000dbba0 	.word	0x000dbba0
 8000a18:	2000011d 	.word	0x2000011d
 8000a1c:	0036ee80 	.word	0x0036ee80
	  }
	  // DOWN - END

	  // LEFT (BACK) - BEGIN
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000a20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a24:	488e      	ldr	r0, [pc, #568]	@ (8000c60 <main+0x4fc>)
 8000a26:	f001 fb4d 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d103      	bne.n	8000a38 <main+0x2d4>
      {
		  pressedLeftButton = true;
 8000a30:	4b8c      	ldr	r3, [pc, #560]	@ (8000c64 <main+0x500>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
		  continue;
 8000a36:	e190      	b.n	8000d5a <main+0x5f6>
      }
	  else if (pressedLeftButton == true)
 8000a38:	4b8a      	ldr	r3, [pc, #552]	@ (8000c64 <main+0x500>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d06a      	beq.n	8000b16 <main+0x3b2>
	  {
		  pressedLeftButton = false;
 8000a40:	4b88      	ldr	r3, [pc, #544]	@ (8000c64 <main+0x500>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
		  DisplayShutDownTime = 0;
 8000a46:	4b88      	ldr	r3, [pc, #544]	@ (8000c68 <main+0x504>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
		  if(menu_option == OFF) {
 8000a4c:	4b87      	ldr	r3, [pc, #540]	@ (8000c6c <main+0x508>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a54:	d102      	bne.n	8000a5c <main+0x2f8>
			  WakeUp();
 8000a56:	f7ff fe59 	bl	800070c <WakeUp>
			  continue;
 8000a5a:	e17e      	b.n	8000d5a <main+0x5f6>
		  }

		  if(setting_option == MENU) {
 8000a5c:	4b84      	ldr	r3, [pc, #528]	@ (8000c70 <main+0x50c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f000 8177 	beq.w	8000d54 <main+0x5f0>
			  // nothing
		  }
		  else if(setting_option == INTERVAL_SETTING) {
 8000a66:	4b82      	ldr	r3, [pc, #520]	@ (8000c70 <main+0x50c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d127      	bne.n	8000abe <main+0x35a>
			  if(intervalSection > 0) {
 8000a6e:	4b81      	ldr	r3, [pc, #516]	@ (8000c74 <main+0x510>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d009      	beq.n	8000a8a <main+0x326>
				  intervalSection--;
 8000a76:	4b7f      	ldr	r3, [pc, #508]	@ (8000c74 <main+0x510>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	4a7d      	ldr	r2, [pc, #500]	@ (8000c74 <main+0x510>)
 8000a7e:	6013      	str	r3, [r2, #0]
				  ssd1306_TestIntervalSetting(timeBar, &NewInterval);
 8000a80:	497d      	ldr	r1, [pc, #500]	@ (8000c78 <main+0x514>)
 8000a82:	487e      	ldr	r0, [pc, #504]	@ (8000c7c <main+0x518>)
 8000a84:	f000 fdb0 	bl	80015e8 <ssd1306_TestIntervalSetting>
				  setting_option = MENU;
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
			  }
		  }

		  continue;
 8000a88:	e164      	b.n	8000d54 <main+0x5f0>
				  ResetNewInterval();
 8000a8a:	f7ff fdc9 	bl	8000620 <ResetNewInterval>
				  intervalSection = HOURS;
 8000a8e:	4b79      	ldr	r3, [pc, #484]	@ (8000c74 <main+0x510>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
				  setting_option = MENU;
 8000a94:	4b76      	ldr	r3, [pc, #472]	@ (8000c70 <main+0x50c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000a9a:	4b74      	ldr	r3, [pc, #464]	@ (8000c6c <main+0x508>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b77      	ldr	r3, [pc, #476]	@ (8000c80 <main+0x51c>)
 8000aa2:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000aa6:	4b71      	ldr	r3, [pc, #452]	@ (8000c6c <main+0x508>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a75      	ldr	r2, [pc, #468]	@ (8000c80 <main+0x51c>)
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	4413      	add	r3, r2
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	4a6e      	ldr	r2, [pc, #440]	@ (8000c6c <main+0x508>)
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f000 fd4c 	bl	8001554 <ssd1306_TestMenu>
		  continue;
 8000abc:	e14a      	b.n	8000d54 <main+0x5f0>
		  else if(setting_option == DURATION_SETTING) {
 8000abe:	4b6c      	ldr	r3, [pc, #432]	@ (8000c70 <main+0x50c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	f040 8146 	bne.w	8000d54 <main+0x5f0>
			  if(durationSection > 0) {
 8000ac8:	4b6e      	ldr	r3, [pc, #440]	@ (8000c84 <main+0x520>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d008      	beq.n	8000ae2 <main+0x37e>
				  durationSection--;
 8000ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8000c84 <main+0x520>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	4a6b      	ldr	r2, [pc, #428]	@ (8000c84 <main+0x520>)
 8000ad8:	6013      	str	r3, [r2, #0]
				  ssd1306_TestDurationSetting(&NewDuration);
 8000ada:	486b      	ldr	r0, [pc, #428]	@ (8000c88 <main+0x524>)
 8000adc:	f000 fe4a 	bl	8001774 <ssd1306_TestDurationSetting>
		  continue;
 8000ae0:	e138      	b.n	8000d54 <main+0x5f0>
				  ResetNewDuration();
 8000ae2:	f7ff fdad 	bl	8000640 <ResetNewDuration>
				  durationSection = SECONDS;
 8000ae6:	4b67      	ldr	r3, [pc, #412]	@ (8000c84 <main+0x520>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
				  setting_option = MENU;
 8000aec:	4b60      	ldr	r3, [pc, #384]	@ (8000c70 <main+0x50c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000af2:	4b5e      	ldr	r3, [pc, #376]	@ (8000c6c <main+0x508>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b61      	ldr	r3, [pc, #388]	@ (8000c80 <main+0x51c>)
 8000afa:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000afe:	4b5b      	ldr	r3, [pc, #364]	@ (8000c6c <main+0x508>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a5f      	ldr	r2, [pc, #380]	@ (8000c80 <main+0x51c>)
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	4413      	add	r3, r2
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	4a58      	ldr	r2, [pc, #352]	@ (8000c6c <main+0x508>)
 8000b0c:	6812      	ldr	r2, [r2, #0]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f000 fd20 	bl	8001554 <ssd1306_TestMenu>
		  continue;
 8000b14:	e11e      	b.n	8000d54 <main+0x5f0>
	  }
	  // LEFT (BACK) - END

	  // RIGHT (OKAY) - BEGIN
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET)
 8000b16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b1a:	4851      	ldr	r0, [pc, #324]	@ (8000c60 <main+0x4fc>)
 8000b1c:	f001 fad2 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d103      	bne.n	8000b2e <main+0x3ca>
      {
		  pressedRightButton = true;
 8000b26:	4b59      	ldr	r3, [pc, #356]	@ (8000c8c <main+0x528>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
		  continue;
 8000b2c:	e115      	b.n	8000d5a <main+0x5f6>
      }
	  else if (pressedRightButton == true)
 8000b2e:	4b57      	ldr	r3, [pc, #348]	@ (8000c8c <main+0x528>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 80ac 	beq.w	8000c90 <main+0x52c>
	  {
		  pressedRightButton = false;
 8000b38:	4b54      	ldr	r3, [pc, #336]	@ (8000c8c <main+0x528>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
		  DisplayShutDownTime = 0;
 8000b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8000c68 <main+0x504>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
		  if(menu_option == OFF) {
 8000b44:	4b49      	ldr	r3, [pc, #292]	@ (8000c6c <main+0x508>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b4c:	d102      	bne.n	8000b54 <main+0x3f0>
			  WakeUp();
 8000b4e:	f7ff fddd 	bl	800070c <WakeUp>
			  continue;
 8000b52:	e102      	b.n	8000d5a <main+0x5f6>
		  }

		  if(setting_option == MENU) {
 8000b54:	4b46      	ldr	r3, [pc, #280]	@ (8000c70 <main+0x50c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d129      	bne.n	8000bb0 <main+0x44c>

			  if(menu_option == READY) {
 8000b5c:	4b43      	ldr	r3, [pc, #268]	@ (8000c6c <main+0x508>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d106      	bne.n	8000b72 <main+0x40e>
				  menu_option = OFF;
 8000b64:	4b41      	ldr	r3, [pc, #260]	@ (8000c6c <main+0x508>)
 8000b66:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6a:	601a      	str	r2, [r3, #0]
				  ssd1306_TurnOff();
 8000b6c:	f000 fe8e 	bl	800188c <ssd1306_TurnOff>
				  durationSection = SECONDS;
				  setting_option = MENU;
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
			  }
		  }
		  continue;
 8000b70:	e0f2      	b.n	8000d58 <main+0x5f4>
			  else if(menu_option == INTERVAL) {
 8000b72:	4b3e      	ldr	r3, [pc, #248]	@ (8000c6c <main+0x508>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d10b      	bne.n	8000b92 <main+0x42e>
				  setting_option = INTERVAL_SETTING;
 8000b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c70 <main+0x50c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
				  getTimeFromMS(&NewInterval, &timeBar);
 8000b80:	493e      	ldr	r1, [pc, #248]	@ (8000c7c <main+0x518>)
 8000b82:	483d      	ldr	r0, [pc, #244]	@ (8000c78 <main+0x514>)
 8000b84:	f7ff fcf4 	bl	8000570 <getTimeFromMS>
				  ssd1306_TestIntervalSetting(timeBar, &NewInterval);
 8000b88:	493b      	ldr	r1, [pc, #236]	@ (8000c78 <main+0x514>)
 8000b8a:	483c      	ldr	r0, [pc, #240]	@ (8000c7c <main+0x518>)
 8000b8c:	f000 fd2c 	bl	80015e8 <ssd1306_TestIntervalSetting>
		  continue;
 8000b90:	e0e2      	b.n	8000d58 <main+0x5f4>
			  else if(menu_option == DURATION) {
 8000b92:	4b36      	ldr	r3, [pc, #216]	@ (8000c6c <main+0x508>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d106      	bne.n	8000ba8 <main+0x444>
				  setting_option = DURATION_SETTING;
 8000b9a:	4b35      	ldr	r3, [pc, #212]	@ (8000c70 <main+0x50c>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	601a      	str	r2, [r3, #0]
				  ssd1306_TestDurationSetting(&NewDuration);
 8000ba0:	4839      	ldr	r0, [pc, #228]	@ (8000c88 <main+0x524>)
 8000ba2:	f000 fde7 	bl	8001774 <ssd1306_TestDurationSetting>
		  continue;
 8000ba6:	e0d7      	b.n	8000d58 <main+0x5f4>
			  else if(menu_option == LAST_TIME) {
 8000ba8:	4b30      	ldr	r3, [pc, #192]	@ (8000c6c <main+0x508>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b03      	cmp	r3, #3
		  continue;
 8000bae:	e0d3      	b.n	8000d58 <main+0x5f4>
		  else if(setting_option == INTERVAL_SETTING) {
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c70 <main+0x50c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d127      	bne.n	8000c08 <main+0x4a4>
			  if(intervalSection < 2) {
 8000bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c74 <main+0x510>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d809      	bhi.n	8000bd4 <main+0x470>
				  intervalSection++;
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <main+0x510>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8000c74 <main+0x510>)
 8000bc8:	6013      	str	r3, [r2, #0]
				  ssd1306_TestIntervalSetting(timeBar, &NewInterval);
 8000bca:	492b      	ldr	r1, [pc, #172]	@ (8000c78 <main+0x514>)
 8000bcc:	482b      	ldr	r0, [pc, #172]	@ (8000c7c <main+0x518>)
 8000bce:	f000 fd0b 	bl	80015e8 <ssd1306_TestIntervalSetting>
		  continue;
 8000bd2:	e0c1      	b.n	8000d58 <main+0x5f4>
				  ApplyNewInterval();
 8000bd4:	f7ff fcfa 	bl	80005cc <ApplyNewInterval>
				  intervalSection = HOURS;
 8000bd8:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <main+0x510>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
				  setting_option = MENU;
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <main+0x50c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000be4:	4b21      	ldr	r3, [pc, #132]	@ (8000c6c <main+0x508>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b25      	ldr	r3, [pc, #148]	@ (8000c80 <main+0x51c>)
 8000bec:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c6c <main+0x508>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a22      	ldr	r2, [pc, #136]	@ (8000c80 <main+0x51c>)
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	4413      	add	r3, r2
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c6c <main+0x508>)
 8000bfe:	6812      	ldr	r2, [r2, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f000 fca7 	bl	8001554 <ssd1306_TestMenu>
		  continue;
 8000c06:	e0a7      	b.n	8000d58 <main+0x5f4>
		  else if(setting_option == DURATION_SETTING) {
 8000c08:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <main+0x50c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	f040 80a3 	bne.w	8000d58 <main+0x5f4>
			  if(durationSection < 1) {
 8000c12:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <main+0x520>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d108      	bne.n	8000c2c <main+0x4c8>
				  durationSection++;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <main+0x520>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a18      	ldr	r2, [pc, #96]	@ (8000c84 <main+0x520>)
 8000c22:	6013      	str	r3, [r2, #0]
				  ssd1306_TestDurationSetting(&NewDuration);
 8000c24:	4818      	ldr	r0, [pc, #96]	@ (8000c88 <main+0x524>)
 8000c26:	f000 fda5 	bl	8001774 <ssd1306_TestDurationSetting>
		  continue;
 8000c2a:	e095      	b.n	8000d58 <main+0x5f4>
				  ApplyNewDuration();
 8000c2c:	f7ff fce8 	bl	8000600 <ApplyNewDuration>
				  durationSection = SECONDS;
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <main+0x520>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
				  setting_option = MENU;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <main+0x50c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <main+0x508>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <main+0x51c>)
 8000c44:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <main+0x508>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c80 <main+0x51c>)
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	4413      	add	r3, r2
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <main+0x508>)
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f000 fc7b 	bl	8001554 <ssd1306_TestMenu>
		  continue;
 8000c5e:	e07b      	b.n	8000d58 <main+0x5f4>
 8000c60:	40020400 	.word	0x40020400
 8000c64:	2000011e 	.word	0x2000011e
 8000c68:	2000012c 	.word	0x2000012c
 8000c6c:	20000028 	.word	0x20000028
 8000c70:	20000118 	.word	0x20000118
 8000c74:	2000053c 	.word	0x2000053c
 8000c78:	20000030 	.word	0x20000030
 8000c7c:	20000120 	.word	0x20000120
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000540 	.word	0x20000540
 8000c88:	20000038 	.word	0x20000038
 8000c8c:	2000011f 	.word	0x2000011f


	  // TIME COUNT //
	 //     \/     //

	  if(IsPouring) {
 8000c90:	4b32      	ldr	r3, [pc, #200]	@ (8000d5c <main+0x5f8>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d029      	beq.n	8000cec <main+0x588>
		  // PA4 - VALVE // PA5 - PUMP //
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2110      	movs	r1, #16
 8000c9c:	4830      	ldr	r0, [pc, #192]	@ (8000d60 <main+0x5fc>)
 8000c9e:	f001 fa29 	bl	80020f4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000ca2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ca6:	f000 ff7f 	bl	8001ba8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2120      	movs	r1, #32
 8000cae:	482c      	ldr	r0, [pc, #176]	@ (8000d60 <main+0x5fc>)
 8000cb0:	f001 fa20 	bl	80020f4 <HAL_GPIO_WritePin>
		  HAL_Delay(Duration);
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d64 <main+0x600>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 ff75 	bl	8001ba8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	4827      	ldr	r0, [pc, #156]	@ (8000d60 <main+0x5fc>)
 8000cc4:	f001 fa16 	bl	80020f4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2120      	movs	r1, #32
 8000ccc:	4824      	ldr	r0, [pc, #144]	@ (8000d60 <main+0x5fc>)
 8000cce:	f001 fa11 	bl	80020f4 <HAL_GPIO_WritePin>

		  TimeLeft = Interval;
 8000cd2:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <main+0x604>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a25      	ldr	r2, [pc, #148]	@ (8000d6c <main+0x608>)
 8000cd8:	6013      	str	r3, [r2, #0]
		  TimePassed = 0;
 8000cda:	4b25      	ldr	r3, [pc, #148]	@ (8000d70 <main+0x60c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
		  WasPoured = true;
 8000ce0:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <main+0x610>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
		  IsPouring = false;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <main+0x5f8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
	  }

	  if(menu_option == OFF) {
 8000cec:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <main+0x614>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d110      	bne.n	8000d18 <main+0x5b4>
		  TimeLeft -= 100;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <main+0x608>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3b64      	subs	r3, #100	@ 0x64
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d6c <main+0x608>)
 8000cfe:	6013      	str	r3, [r2, #0]
		  TimePassed += 100;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <main+0x60c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3364      	adds	r3, #100	@ 0x64
 8000d06:	4a1a      	ldr	r2, [pc, #104]	@ (8000d70 <main+0x60c>)
 8000d08:	6013      	str	r3, [r2, #0]

		  if(TimeLeft == 0) {
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <main+0x608>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <main+0x5b4>
			  IsPouring = true;
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <main+0x5f8>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(DisplayShutDownTime == 199) {
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <main+0x618>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d1e:	d105      	bne.n	8000d2c <main+0x5c8>
		  menu_option = OFF;
 8000d20:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <main+0x614>)
 8000d22:	f04f 32ff 	mov.w	r2, #4294967295
 8000d26:	601a      	str	r2, [r3, #0]
		  ssd1306_TurnOff();
 8000d28:	f000 fdb0 	bl	800188c <ssd1306_TurnOff>
	  }
	  if(DisplayShutDownTime < 200 && setting_option == MENU) {
 8000d2c:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <main+0x618>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d32:	f73f ad23 	bgt.w	800077c <main+0x18>
 8000d36:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <main+0x61c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f47f ad1e 	bne.w	800077c <main+0x18>
		  DisplayShutDownTime++;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <main+0x618>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3301      	adds	r3, #1
 8000d46:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <main+0x618>)
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e517      	b.n	800077c <main+0x18>
		  continue;
 8000d4c:	bf00      	nop
 8000d4e:	e515      	b.n	800077c <main+0x18>
		  continue;
 8000d50:	bf00      	nop
 8000d52:	e513      	b.n	800077c <main+0x18>
		  continue;
 8000d54:	bf00      	nop
 8000d56:	e511      	b.n	800077c <main+0x18>
		  continue;
 8000d58:	bf00      	nop
	  HAL_Delay(100);
 8000d5a:	e50f      	b.n	800077c <main+0x18>
 8000d5c:	20000131 	.word	0x20000131
 8000d60:	40020000 	.word	0x40020000
 8000d64:	20000034 	.word	0x20000034
 8000d68:	2000002c 	.word	0x2000002c
 8000d6c:	2000003c 	.word	0x2000003c
 8000d70:	20000128 	.word	0x20000128
 8000d74:	20000130 	.word	0x20000130
 8000d78:	20000028 	.word	0x20000028
 8000d7c:	2000012c 	.word	0x2000012c
 8000d80:	20000118 	.word	0x20000118

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b094      	sub	sp, #80	@ 0x50
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	2230      	movs	r2, #48	@ 0x30
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 faf4 	bl	8003380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <SystemClock_Config+0xb4>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	4a21      	ldr	r2, [pc, #132]	@ (8000e38 <SystemClock_Config+0xb4>)
 8000db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <SystemClock_Config+0xb4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <SystemClock_Config+0xb8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e3c <SystemClock_Config+0xb8>)
 8000dce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <SystemClock_Config+0xb8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de8:	2310      	movs	r3, #16
 8000dea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0320 	add.w	r3, r7, #32
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fe45 	bl	8002a84 <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e00:	f000 f8c2 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	230f      	movs	r3, #15
 8000e06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 f8a8 	bl	8002f74 <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e2a:	f000 f8ad 	bl	8000f88 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3750      	adds	r7, #80	@ 0x50
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e46:	4a13      	ldr	r2, [pc, #76]	@ (8000e94 <MX_I2C1_Init+0x54>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e4c:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <MX_I2C1_Init+0x58>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <MX_I2C1_Init+0x50>)
 8000e7e:	f001 f953 	bl	8002128 <HAL_I2C_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e88:	f000 f87e 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000b8 	.word	0x200000b8
 8000e94:	40005400 	.word	0x40005400
 8000e98:	00061a80 	.word	0x00061a80

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b30      	ldr	r3, [pc, #192]	@ (8000f78 <MX_GPIO_Init+0xdc>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a2f      	ldr	r2, [pc, #188]	@ (8000f78 <MX_GPIO_Init+0xdc>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f78 <MX_GPIO_Init+0xdc>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b29      	ldr	r3, [pc, #164]	@ (8000f78 <MX_GPIO_Init+0xdc>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a28      	ldr	r2, [pc, #160]	@ (8000f78 <MX_GPIO_Init+0xdc>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <MX_GPIO_Init+0xdc>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b22      	ldr	r3, [pc, #136]	@ (8000f78 <MX_GPIO_Init+0xdc>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a21      	ldr	r2, [pc, #132]	@ (8000f78 <MX_GPIO_Init+0xdc>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <MX_GPIO_Init+0xdc>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f0c:	481b      	ldr	r0, [pc, #108]	@ (8000f7c <MX_GPIO_Init+0xe0>)
 8000f0e:	f001 f8f1 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Valve_Pin|Pump_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2130      	movs	r1, #48	@ 0x30
 8000f16:	481a      	ldr	r0, [pc, #104]	@ (8000f80 <MX_GPIO_Init+0xe4>)
 8000f18:	f001 f8ec 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Led_Pin */
  GPIO_InitStruct.Pin = Blue_Led_Pin;
 8000f1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Blue_Led_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	4619      	mov	r1, r3
 8000f34:	4811      	ldr	r0, [pc, #68]	@ (8000f7c <MX_GPIO_Init+0xe0>)
 8000f36:	f000 ff41 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Valve_Pin Pump_Pin */
  GPIO_InitStruct.Pin = Valve_Pin|Pump_Pin;
 8000f3a:	2330      	movs	r3, #48	@ 0x30
 8000f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <MX_GPIO_Init+0xe4>)
 8000f52:	f000 ff33 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Up_Pin Down_Pin Left_Pin Right_Pin */
  GPIO_InitStruct.Pin = Up_Pin|Down_Pin|Left_Pin|Right_Pin;
 8000f56:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000f6c:	f000 ff26 	bl	8001dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <Error_Handler+0x8>

08000f94 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af04      	add	r7, sp, #16
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2178      	movs	r1, #120	@ 0x78
 8000fc2:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <ssd1306_WriteCommand+0x2c>)
 8000fc4:	f001 f9f4 	bl	80023b0 <HAL_I2C_Mem_Write>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000b8 	.word	0x200000b8

08000fd4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af04      	add	r7, sp, #16
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe6:	9202      	str	r2, [sp, #8]
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	2240      	movs	r2, #64	@ 0x40
 8000ff2:	2178      	movs	r1, #120	@ 0x78
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <ssd1306_WriteData+0x30>)
 8000ff6:	f001 f9db 	bl	80023b0 <HAL_I2C_Mem_Write>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000b8 	.word	0x200000b8

08001008 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800100c:	f7ff ffc2 	bl	8000f94 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001010:	2064      	movs	r0, #100	@ 0x64
 8001012:	f000 fdc9 	bl	8001ba8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001016:	2000      	movs	r0, #0
 8001018:	f000 fa7e 	bl	8001518 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800101c:	2020      	movs	r0, #32
 800101e:	f7ff ffc1 	bl	8000fa4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff ffbe 	bl	8000fa4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001028:	20b0      	movs	r0, #176	@ 0xb0
 800102a:	f7ff ffbb 	bl	8000fa4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800102e:	20c8      	movs	r0, #200	@ 0xc8
 8001030:	f7ff ffb8 	bl	8000fa4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff ffb5 	bl	8000fa4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800103a:	2010      	movs	r0, #16
 800103c:	f7ff ffb2 	bl	8000fa4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001040:	2040      	movs	r0, #64	@ 0x40
 8001042:	f7ff ffaf 	bl	8000fa4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001046:	20ff      	movs	r0, #255	@ 0xff
 8001048:	f000 fa53 	bl	80014f2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800104c:	20a1      	movs	r0, #161	@ 0xa1
 800104e:	f7ff ffa9 	bl	8000fa4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001052:	20a6      	movs	r0, #166	@ 0xa6
 8001054:	f7ff ffa6 	bl	8000fa4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001058:	20a8      	movs	r0, #168	@ 0xa8
 800105a:	f7ff ffa3 	bl	8000fa4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800105e:	203f      	movs	r0, #63	@ 0x3f
 8001060:	f7ff ffa0 	bl	8000fa4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001064:	20a4      	movs	r0, #164	@ 0xa4
 8001066:	f7ff ff9d 	bl	8000fa4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800106a:	20d3      	movs	r0, #211	@ 0xd3
 800106c:	f7ff ff9a 	bl	8000fa4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ff97 	bl	8000fa4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001076:	20d5      	movs	r0, #213	@ 0xd5
 8001078:	f7ff ff94 	bl	8000fa4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800107c:	20f0      	movs	r0, #240	@ 0xf0
 800107e:	f7ff ff91 	bl	8000fa4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001082:	20d9      	movs	r0, #217	@ 0xd9
 8001084:	f7ff ff8e 	bl	8000fa4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001088:	2022      	movs	r0, #34	@ 0x22
 800108a:	f7ff ff8b 	bl	8000fa4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800108e:	20da      	movs	r0, #218	@ 0xda
 8001090:	f7ff ff88 	bl	8000fa4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001094:	2012      	movs	r0, #18
 8001096:	f7ff ff85 	bl	8000fa4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800109a:	20db      	movs	r0, #219	@ 0xdb
 800109c:	f7ff ff82 	bl	8000fa4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80010a0:	2020      	movs	r0, #32
 80010a2:	f7ff ff7f 	bl	8000fa4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80010a6:	208d      	movs	r0, #141	@ 0x8d
 80010a8:	f7ff ff7c 	bl	8000fa4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80010ac:	2014      	movs	r0, #20
 80010ae:	f7ff ff79 	bl	8000fa4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 fa30 	bl	8001518 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 f80f 	bl	80010dc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80010be:	f000 f825 	bl	800110c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80010c2:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <ssd1306_Init+0xd0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <ssd1306_Init+0xd0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80010ce:	4b02      	ldr	r3, [pc, #8]	@ (80010d8 <ssd1306_Init+0xd0>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	711a      	strb	r2, [r3, #4]
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000534 	.word	0x20000534

080010dc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <ssd1306_Fill+0x14>
 80010ec:	2300      	movs	r3, #0
 80010ee:	e000      	b.n	80010f2 <ssd1306_Fill+0x16>
 80010f0:	23ff      	movs	r3, #255	@ 0xff
 80010f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f6:	4619      	mov	r1, r3
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <ssd1306_Fill+0x2c>)
 80010fa:	f002 f941 	bl	8003380 <memset>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000134 	.word	0x20000134

0800110c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001112:	2300      	movs	r3, #0
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	e016      	b.n	8001146 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	3b50      	subs	r3, #80	@ 0x50
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff40 	bl	8000fa4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff ff3d 	bl	8000fa4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800112a:	2010      	movs	r0, #16
 800112c:	f7ff ff3a 	bl	8000fa4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	01db      	lsls	r3, r3, #7
 8001134:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <ssd1306_UpdateScreen+0x4c>)
 8001136:	4413      	add	r3, r2
 8001138:	2180      	movs	r1, #128	@ 0x80
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff4a 	bl	8000fd4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3301      	adds	r3, #1
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b07      	cmp	r3, #7
 800114a:	d9e5      	bls.n	8001118 <ssd1306_UpdateScreen+0xc>
    }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000134 	.word	0x20000134

0800115c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	460b      	mov	r3, r1
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db3d      	blt.n	80011f2 <ssd1306_DrawPixel+0x96>
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	2b3f      	cmp	r3, #63	@ 0x3f
 800117a:	d83a      	bhi.n	80011f2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800117c:	797b      	ldrb	r3, [r7, #5]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d11a      	bne.n	80011b8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	b2d8      	uxtb	r0, r3
 800118a:	4603      	mov	r3, r0
 800118c:	01db      	lsls	r3, r3, #7
 800118e:	4413      	add	r3, r2
 8001190:	4a1b      	ldr	r2, [pc, #108]	@ (8001200 <ssd1306_DrawPixel+0xa4>)
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	b25a      	sxtb	r2, r3
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	2101      	movs	r1, #1
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b259      	sxtb	r1, r3
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	4603      	mov	r3, r0
 80011ac:	01db      	lsls	r3, r3, #7
 80011ae:	4413      	add	r3, r2
 80011b0:	b2c9      	uxtb	r1, r1
 80011b2:	4a13      	ldr	r2, [pc, #76]	@ (8001200 <ssd1306_DrawPixel+0xa4>)
 80011b4:	54d1      	strb	r1, [r2, r3]
 80011b6:	e01d      	b.n	80011f4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011b8:	79fa      	ldrb	r2, [r7, #7]
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	08db      	lsrs	r3, r3, #3
 80011be:	b2d8      	uxtb	r0, r3
 80011c0:	4603      	mov	r3, r0
 80011c2:	01db      	lsls	r3, r3, #7
 80011c4:	4413      	add	r3, r2
 80011c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001200 <ssd1306_DrawPixel+0xa4>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	b25a      	sxtb	r2, r3
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	4013      	ands	r3, r2
 80011e0:	b259      	sxtb	r1, r3
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	4603      	mov	r3, r0
 80011e6:	01db      	lsls	r3, r3, #7
 80011e8:	4413      	add	r3, r2
 80011ea:	b2c9      	uxtb	r1, r1
 80011ec:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <ssd1306_DrawPixel+0xa4>)
 80011ee:	54d1      	strb	r1, [r2, r3]
 80011f0:	e000      	b.n	80011f4 <ssd1306_DrawPixel+0x98>
        return;
 80011f2:	bf00      	nop
    }
}
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000134 	.word	0x20000134

08001204 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b089      	sub	sp, #36	@ 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4604      	mov	r4, r0
 800120c:	4638      	mov	r0, r7
 800120e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001212:	4623      	mov	r3, r4
 8001214:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b1f      	cmp	r3, #31
 800121a:	d902      	bls.n	8001222 <ssd1306_WriteChar+0x1e>
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001220:	d901      	bls.n	8001226 <ssd1306_WriteChar+0x22>
        return 0;
 8001222:	2300      	movs	r3, #0
 8001224:	e077      	b.n	8001316 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001226:	4b3e      	ldr	r3, [pc, #248]	@ (8001320 <ssd1306_WriteChar+0x11c>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	783b      	ldrb	r3, [r7, #0]
 800122e:	4413      	add	r3, r2
 8001230:	2b80      	cmp	r3, #128	@ 0x80
 8001232:	dc06      	bgt.n	8001242 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001234:	4b3a      	ldr	r3, [pc, #232]	@ (8001320 <ssd1306_WriteChar+0x11c>)
 8001236:	885b      	ldrh	r3, [r3, #2]
 8001238:	461a      	mov	r2, r3
 800123a:	787b      	ldrb	r3, [r7, #1]
 800123c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800123e:	2b40      	cmp	r3, #64	@ 0x40
 8001240:	dd01      	ble.n	8001246 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001242:	2300      	movs	r3, #0
 8001244:	e067      	b.n	8001316 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e04e      	b.n	80012ea <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	3b20      	subs	r3, #32
 8001252:	7879      	ldrb	r1, [r7, #1]
 8001254:	fb01 f303 	mul.w	r3, r1, r3
 8001258:	4619      	mov	r1, r3
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	440b      	add	r3, r1
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	e036      	b.n	80012da <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800127c:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <ssd1306_WriteChar+0x11c>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4413      	add	r3, r2
 8001288:	b2d8      	uxtb	r0, r3
 800128a:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <ssd1306_WriteChar+0x11c>)
 800128c:	885b      	ldrh	r3, [r3, #2]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff ff5d 	bl	800115c <ssd1306_DrawPixel>
 80012a2:	e017      	b.n	80012d4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80012a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <ssd1306_WriteChar+0x11c>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	b2d8      	uxtb	r0, r3
 80012b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <ssd1306_WriteChar+0x11c>)
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4413      	add	r3, r2
 80012be:	b2d9      	uxtb	r1, r3
 80012c0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bf0c      	ite	eq
 80012c8:	2301      	moveq	r3, #1
 80012ca:	2300      	movne	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	f7ff ff44 	bl	800115c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	3301      	adds	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	783b      	ldrb	r3, [r7, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d3c3      	bcc.n	800126c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	3301      	adds	r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	787b      	ldrb	r3, [r7, #1]
 80012ec:	461a      	mov	r2, r3
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d3ab      	bcc.n	800124c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <ssd1306_WriteChar+0x11c>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	2a00      	cmp	r2, #0
 80012fc:	d005      	beq.n	800130a <ssd1306_WriteChar+0x106>
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	3a20      	subs	r2, #32
 8001304:	440a      	add	r2, r1
 8001306:	7812      	ldrb	r2, [r2, #0]
 8001308:	e000      	b.n	800130c <ssd1306_WriteChar+0x108>
 800130a:	783a      	ldrb	r2, [r7, #0]
 800130c:	4413      	add	r3, r2
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <ssd1306_WriteChar+0x11c>)
 8001312:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	@ 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
 800131e:	bf00      	nop
 8001320:	20000534 	.word	0x20000534

08001324 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af02      	add	r7, sp, #8
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	4638      	mov	r0, r7
 800132e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001332:	e013      	b.n	800135c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	7818      	ldrb	r0, [r3, #0]
 8001338:	7e3b      	ldrb	r3, [r7, #24]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	463b      	mov	r3, r7
 800133e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001340:	f7ff ff60 	bl	8001204 <ssd1306_WriteChar>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d002      	beq.n	8001356 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	e008      	b.n	8001368 <ssd1306_WriteString+0x44>
        }
        str++;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1e7      	bne.n	8001334 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	781b      	ldrb	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	460a      	mov	r2, r1
 800137a:	71fb      	strb	r3, [r7, #7]
 800137c:	4613      	mov	r3, r2
 800137e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <ssd1306_SetCursor+0x2c>)
 8001386:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <ssd1306_SetCursor+0x2c>)
 800138e:	805a      	strh	r2, [r3, #2]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	20000534 	.word	0x20000534

080013a0 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	4603      	mov	r3, r0
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	460b      	mov	r3, r1
 80013b8:	717b      	strb	r3, [r7, #5]
 80013ba:	4613      	mov	r3, r2
 80013bc:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	797b      	ldrb	r3, [r7, #5]
 80013c2:	4293      	cmp	r3, r2
 80013c4:	bf28      	it	cs
 80013c6:	4613      	movcs	r3, r2
 80013c8:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80013ca:	797a      	ldrb	r2, [r7, #5]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4293      	cmp	r3, r2
 80013d0:	bf38      	it	cc
 80013d2:	4613      	movcc	r3, r2
 80013d4:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80013d6:	79ba      	ldrb	r2, [r7, #6]
 80013d8:	793b      	ldrb	r3, [r7, #4]
 80013da:	4293      	cmp	r3, r2
 80013dc:	bf28      	it	cs
 80013de:	4613      	movcs	r3, r2
 80013e0:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80013e2:	793a      	ldrb	r2, [r7, #4]
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	4293      	cmp	r3, r2
 80013e8:	bf38      	it	cc
 80013ea:	4613      	movcc	r3, r2
 80013ec:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80013ee:	7afb      	ldrb	r3, [r7, #11]
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	e017      	b.n	8001424 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80013f4:	7b7b      	ldrb	r3, [r7, #13]
 80013f6:	73bb      	strb	r3, [r7, #14]
 80013f8:	e009      	b.n	800140e <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80013fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013fe:	7bf9      	ldrb	r1, [r7, #15]
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff feaa 	bl	800115c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001408:	7bbb      	ldrb	r3, [r7, #14]
 800140a:	3301      	adds	r3, #1
 800140c:	73bb      	strb	r3, [r7, #14]
 800140e:	7bba      	ldrb	r2, [r7, #14]
 8001410:	7b3b      	ldrb	r3, [r7, #12]
 8001412:	429a      	cmp	r2, r3
 8001414:	d803      	bhi.n	800141e <ssd1306_FillRectangle+0x7e>
 8001416:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800141a:	2b00      	cmp	r3, #0
 800141c:	daed      	bge.n	80013fa <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	3301      	adds	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	7abb      	ldrb	r3, [r7, #10]
 8001428:	429a      	cmp	r2, r3
 800142a:	d803      	bhi.n	8001434 <ssd1306_FillRectangle+0x94>
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001430:	d9e0      	bls.n	80013f4 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001432:	bf00      	nop
 8001434:	bf00      	nop
}
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bd90      	pop	{r4, r7, pc}

0800143c <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	603a      	str	r2, [r7, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	460b      	mov	r3, r1
 800144c:	71bb      	strb	r3, [r7, #6]
 800144e:	4613      	mov	r3, r2
 8001450:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001452:	797b      	ldrb	r3, [r7, #5]
 8001454:	3307      	adds	r3, #7
 8001456:	2b00      	cmp	r3, #0
 8001458:	da00      	bge.n	800145c <ssd1306_DrawBitmap+0x20>
 800145a:	3307      	adds	r3, #7
 800145c:	10db      	asrs	r3, r3, #3
 800145e:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db3e      	blt.n	80014ea <ssd1306_DrawBitmap+0xae>
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001470:	d83b      	bhi.n	80014ea <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001472:	2300      	movs	r3, #0
 8001474:	73bb      	strb	r3, [r7, #14]
 8001476:	e033      	b.n	80014e0 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001478:	2300      	movs	r3, #0
 800147a:	737b      	strb	r3, [r7, #13]
 800147c:	e026      	b.n	80014cc <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800147e:	7b7b      	ldrb	r3, [r7, #13]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e00d      	b.n	80014ac <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	7b7a      	ldrb	r2, [r7, #13]
 800149c:	08d2      	lsrs	r2, r2, #3
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80014ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da08      	bge.n	80014c6 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	7b7b      	ldrb	r3, [r7, #13]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	7f3a      	ldrb	r2, [r7, #28]
 80014be:	79b9      	ldrb	r1, [r7, #6]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe4b 	bl	800115c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80014c6:	7b7b      	ldrb	r3, [r7, #13]
 80014c8:	3301      	adds	r3, #1
 80014ca:	737b      	strb	r3, [r7, #13]
 80014cc:	7b7a      	ldrb	r2, [r7, #13]
 80014ce:	797b      	ldrb	r3, [r7, #5]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3d4      	bcc.n	800147e <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	3301      	adds	r3, #1
 80014d8:	73bb      	strb	r3, [r7, #14]
 80014da:	79bb      	ldrb	r3, [r7, #6]
 80014dc:	3301      	adds	r3, #1
 80014de:	71bb      	strb	r3, [r7, #6]
 80014e0:	7bba      	ldrb	r2, [r7, #14]
 80014e2:	7e3b      	ldrb	r3, [r7, #24]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3c7      	bcc.n	8001478 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80014e8:	e000      	b.n	80014ec <ssd1306_DrawBitmap+0xb0>
        return;
 80014ea:	bf00      	nop
}
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80014fc:	2381      	movs	r3, #129	@ 0x81
 80014fe:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd4e 	bl	8000fa4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fd4a 	bl	8000fa4 <ssd1306_WriteCommand>
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001528:	23af      	movs	r3, #175	@ 0xaf
 800152a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <ssd1306_SetDisplayOn+0x38>)
 800152e:	2201      	movs	r2, #1
 8001530:	715a      	strb	r2, [r3, #5]
 8001532:	e004      	b.n	800153e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001534:	23ae      	movs	r3, #174	@ 0xae
 8001536:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <ssd1306_SetDisplayOn+0x38>)
 800153a:	2200      	movs	r2, #0
 800153c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fd2f 	bl	8000fa4 <ssd1306_WriteCommand>
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000534 	.word	0x20000534

08001554 <ssd1306_TestMenu>:

//////////////////////////////
///////////////////


void ssd1306_TestMenu(char *first_row, char *second_row, Menu_Option *current_option) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
#ifdef SSD1306_INCLUDE_FONT_11x18

    ssd1306_Fill(Black);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff fdbb 	bl	80010dc <ssd1306_Fill>
    if(current_option != 0) {
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <ssd1306_TestMenu+0x2c>
    	ssd1306_DrawBitmap(32,0,bitmap_arrow_up_64x14,64,14,White);
 800156c:	2301      	movs	r3, #1
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	230e      	movs	r3, #14
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2340      	movs	r3, #64	@ 0x40
 8001576:	4a18      	ldr	r2, [pc, #96]	@ (80015d8 <ssd1306_TestMenu+0x84>)
 8001578:	2100      	movs	r1, #0
 800157a:	2020      	movs	r0, #32
 800157c:	f7ff ff5e 	bl	800143c <ssd1306_DrawBitmap>
    }
    //ssd1306_UpdateScreen();
    ssd1306_SetCursor(0, 14);
 8001580:	210e      	movs	r1, #14
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fef4 	bl	8001370 <ssd1306_SetCursor>
    ssd1306_WriteString(first_row, Font_11x18, White);
 8001588:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <ssd1306_TestMenu+0x88>)
 800158a:	2201      	movs	r2, #1
 800158c:	9200      	str	r2, [sp, #0]
 800158e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff fec7 	bl	8001324 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 14+18);
 8001596:	2120      	movs	r1, #32
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff fee9 	bl	8001370 <ssd1306_SetCursor>
    ssd1306_WriteString(second_row, Font_11x18, White);
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <ssd1306_TestMenu+0x88>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	9200      	str	r2, [sp, #0]
 80015a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f7ff febc 	bl	8001324 <ssd1306_WriteString>
    if(current_option < MENU_COUNT) {
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <ssd1306_TestMenu+0x8c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d209      	bcs.n	80015cc <ssd1306_TestMenu+0x78>
    	ssd1306_DrawBitmap(32,50,bitmap_arrow_down_64x14,64,14,White);
 80015b8:	2301      	movs	r3, #1
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	230e      	movs	r3, #14
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2340      	movs	r3, #64	@ 0x40
 80015c2:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <ssd1306_TestMenu+0x90>)
 80015c4:	2132      	movs	r1, #50	@ 0x32
 80015c6:	2020      	movs	r0, #32
 80015c8:	f7ff ff38 	bl	800143c <ssd1306_DrawBitmap>
    }
    ssd1306_UpdateScreen();
 80015cc:	f7ff fd9e 	bl	800110c <ssd1306_UpdateScreen>
#endif
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	08006374 	.word	0x08006374
 80015dc:	080062ec 	.word	0x080062ec
 80015e0:	08003dc0 	.word	0x08003dc0
 80015e4:	08006304 	.word	0x08006304

080015e8 <ssd1306_TestIntervalSetting>:


void ssd1306_TestIntervalSetting(int *timeBar, unsigned int *timeInterval) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]

	ssd1306_Fill(Black);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff fd72 	bl	80010dc <ssd1306_Fill>

	char str[2] = "";
 80015f8:	2300      	movs	r3, #0
 80015fa:	81bb      	strh	r3, [r7, #12]
	sprintf(str, "%02d", timeBar[0]);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4953      	ldr	r1, [pc, #332]	@ (8001754 <ssd1306_TestIntervalSetting+0x16c>)
 8001606:	4618      	mov	r0, r3
 8001608:	f001 fe80 	bl	800330c <siprintf>

	if(intervalSection == HOURS) {
 800160c:	4b52      	ldr	r3, [pc, #328]	@ (8001758 <ssd1306_TestIntervalSetting+0x170>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d11f      	bne.n	8001654 <ssd1306_TestIntervalSetting+0x6c>
		ssd1306_FillRectangle( 4, 20,  37, 44, White);
 8001614:	2301      	movs	r3, #1
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	232c      	movs	r3, #44	@ 0x2c
 800161a:	2225      	movs	r2, #37	@ 0x25
 800161c:	2114      	movs	r1, #20
 800161e:	2004      	movs	r0, #4
 8001620:	f7ff febe 	bl	80013a0 <ssd1306_FillRectangle>
		ssd1306_SetCursor(11, 10);
 8001624:	210a      	movs	r1, #10
 8001626:	200b      	movs	r0, #11
 8001628:	f7ff fea2 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(" h ", Font_6x8, Black);
 800162c:	4b4b      	ldr	r3, [pc, #300]	@ (800175c <ssd1306_TestIntervalSetting+0x174>)
 800162e:	2200      	movs	r2, #0
 8001630:	9200      	str	r2, [sp, #0]
 8001632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001634:	484a      	ldr	r0, [pc, #296]	@ (8001760 <ssd1306_TestIntervalSetting+0x178>)
 8001636:	f7ff fe75 	bl	8001324 <ssd1306_WriteString>
		ssd1306_SetCursor(5, 20);
 800163a:	2114      	movs	r1, #20
 800163c:	2005      	movs	r0, #5
 800163e:	f7ff fe97 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_16x24, Black);
 8001642:	4b48      	ldr	r3, [pc, #288]	@ (8001764 <ssd1306_TestIntervalSetting+0x17c>)
 8001644:	f107 000c 	add.w	r0, r7, #12
 8001648:	2200      	movs	r2, #0
 800164a:	9200      	str	r2, [sp, #0]
 800164c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800164e:	f7ff fe69 	bl	8001324 <ssd1306_WriteString>
 8001652:	e016      	b.n	8001682 <ssd1306_TestIntervalSetting+0x9a>
	}
	else {
		ssd1306_SetCursor(11, 10);// added
 8001654:	210a      	movs	r1, #10
 8001656:	200b      	movs	r0, #11
 8001658:	f7ff fe8a 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(" h ", Font_6x8, White);
 800165c:	4b3f      	ldr	r3, [pc, #252]	@ (800175c <ssd1306_TestIntervalSetting+0x174>)
 800165e:	2201      	movs	r2, #1
 8001660:	9200      	str	r2, [sp, #0]
 8001662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001664:	483e      	ldr	r0, [pc, #248]	@ (8001760 <ssd1306_TestIntervalSetting+0x178>)
 8001666:	f7ff fe5d 	bl	8001324 <ssd1306_WriteString>
		ssd1306_SetCursor(5, 20);
 800166a:	2114      	movs	r1, #20
 800166c:	2005      	movs	r0, #5
 800166e:	f7ff fe7f 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_16x24, White);
 8001672:	4b3c      	ldr	r3, [pc, #240]	@ (8001764 <ssd1306_TestIntervalSetting+0x17c>)
 8001674:	f107 000c 	add.w	r0, r7, #12
 8001678:	2201      	movs	r2, #1
 800167a:	9200      	str	r2, [sp, #0]
 800167c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800167e:	f7ff fe51 	bl	8001324 <ssd1306_WriteString>
	}

	ssd1306_WriteString(":", Font_16x24, White);
 8001682:	4b38      	ldr	r3, [pc, #224]	@ (8001764 <ssd1306_TestIntervalSetting+0x17c>)
 8001684:	2201      	movs	r2, #1
 8001686:	9200      	str	r2, [sp, #0]
 8001688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800168a:	4837      	ldr	r0, [pc, #220]	@ (8001768 <ssd1306_TestIntervalSetting+0x180>)
 800168c:	f7ff fe4a 	bl	8001324 <ssd1306_WriteString>
	sprintf(str, "%02d", timeBar[1]);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3304      	adds	r3, #4
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	492e      	ldr	r1, [pc, #184]	@ (8001754 <ssd1306_TestIntervalSetting+0x16c>)
 800169c:	4618      	mov	r0, r3
 800169e:	f001 fe35 	bl	800330c <siprintf>

	if(intervalSection == MINUTES) {
 80016a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <ssd1306_TestIntervalSetting+0x170>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d11b      	bne.n	80016e2 <ssd1306_TestIntervalSetting+0xfa>
		ssd1306_FillRectangle(52, 20,  85, 44, White);
 80016aa:	2301      	movs	r3, #1
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	232c      	movs	r3, #44	@ 0x2c
 80016b0:	2255      	movs	r2, #85	@ 0x55
 80016b2:	2114      	movs	r1, #20
 80016b4:	2034      	movs	r0, #52	@ 0x34
 80016b6:	f7ff fe73 	bl	80013a0 <ssd1306_FillRectangle>
		ssd1306_WriteString(str, Font_16x24, Black);
 80016ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001764 <ssd1306_TestIntervalSetting+0x17c>)
 80016bc:	f107 000c 	add.w	r0, r7, #12
 80016c0:	2200      	movs	r2, #0
 80016c2:	9200      	str	r2, [sp, #0]
 80016c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c6:	f7ff fe2d 	bl	8001324 <ssd1306_WriteString>
		ssd1306_SetCursor(53, 10);
 80016ca:	210a      	movs	r1, #10
 80016cc:	2035      	movs	r0, #53	@ 0x35
 80016ce:	f7ff fe4f 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(" min ", Font_6x8, Black);
 80016d2:	4b22      	ldr	r3, [pc, #136]	@ (800175c <ssd1306_TestIntervalSetting+0x174>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	9200      	str	r2, [sp, #0]
 80016d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016da:	4824      	ldr	r0, [pc, #144]	@ (800176c <ssd1306_TestIntervalSetting+0x184>)
 80016dc:	f7ff fe22 	bl	8001324 <ssd1306_WriteString>
 80016e0:	e012      	b.n	8001708 <ssd1306_TestIntervalSetting+0x120>
	}
	else {
		ssd1306_WriteString(str, Font_16x24, White);
 80016e2:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <ssd1306_TestIntervalSetting+0x17c>)
 80016e4:	f107 000c 	add.w	r0, r7, #12
 80016e8:	2201      	movs	r2, #1
 80016ea:	9200      	str	r2, [sp, #0]
 80016ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ee:	f7ff fe19 	bl	8001324 <ssd1306_WriteString>
		ssd1306_SetCursor(53, 10);
 80016f2:	210a      	movs	r1, #10
 80016f4:	2035      	movs	r0, #53	@ 0x35
 80016f6:	f7ff fe3b 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(" min ", Font_6x8, White);
 80016fa:	4b18      	ldr	r3, [pc, #96]	@ (800175c <ssd1306_TestIntervalSetting+0x174>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	9200      	str	r2, [sp, #0]
 8001700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001702:	481a      	ldr	r0, [pc, #104]	@ (800176c <ssd1306_TestIntervalSetting+0x184>)
 8001704:	f7ff fe0e 	bl	8001324 <ssd1306_WriteString>
	}

	ssd1306_SetCursor(92, 20);
 8001708:	2114      	movs	r1, #20
 800170a:	205c      	movs	r0, #92	@ 0x5c
 800170c:	f7ff fe30 	bl	8001370 <ssd1306_SetCursor>

	if(intervalSection == SET_INTERVAL) {
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <ssd1306_TestIntervalSetting+0x170>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d10f      	bne.n	8001738 <ssd1306_TestIntervalSetting+0x150>
		ssd1306_FillRectangle(91, 20, 124, 44, White);
 8001718:	2301      	movs	r3, #1
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	232c      	movs	r3, #44	@ 0x2c
 800171e:	227c      	movs	r2, #124	@ 0x7c
 8001720:	2114      	movs	r1, #20
 8001722:	205b      	movs	r0, #91	@ 0x5b
 8001724:	f7ff fe3c 	bl	80013a0 <ssd1306_FillRectangle>
		ssd1306_WriteString("OK", Font_16x24, Black);
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <ssd1306_TestIntervalSetting+0x17c>)
 800172a:	2200      	movs	r2, #0
 800172c:	9200      	str	r2, [sp, #0]
 800172e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001730:	480f      	ldr	r0, [pc, #60]	@ (8001770 <ssd1306_TestIntervalSetting+0x188>)
 8001732:	f7ff fdf7 	bl	8001324 <ssd1306_WriteString>
 8001736:	e006      	b.n	8001746 <ssd1306_TestIntervalSetting+0x15e>
	}
	else {
		ssd1306_WriteString("OK", Font_16x24, White);
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <ssd1306_TestIntervalSetting+0x17c>)
 800173a:	2201      	movs	r2, #1
 800173c:	9200      	str	r2, [sp, #0]
 800173e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001740:	480b      	ldr	r0, [pc, #44]	@ (8001770 <ssd1306_TestIntervalSetting+0x188>)
 8001742:	f7ff fdef 	bl	8001324 <ssd1306_WriteString>
	}

	ssd1306_UpdateScreen();
 8001746:	f7ff fce1 	bl	800110c <ssd1306_UpdateScreen>
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	08003d48 	.word	0x08003d48
 8001758:	2000053c 	.word	0x2000053c
 800175c:	080062e0 	.word	0x080062e0
 8001760:	08003d50 	.word	0x08003d50
 8001764:	080062f8 	.word	0x080062f8
 8001768:	08003d54 	.word	0x08003d54
 800176c:	08003d58 	.word	0x08003d58
 8001770:	08003d60 	.word	0x08003d60

08001774 <ssd1306_TestDurationSetting>:


void ssd1306_TestDurationSetting(unsigned int *timeDuration) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af02      	add	r7, sp, #8
 800177a:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fcad 	bl	80010dc <ssd1306_Fill>
	char str[3] = "";
 8001782:	4b3a      	ldr	r3, [pc, #232]	@ (800186c <ssd1306_TestDurationSetting+0xf8>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	723b      	strb	r3, [r7, #8]
 8001788:	f107 0309 	add.w	r3, r7, #9
 800178c:	2200      	movs	r2, #0
 800178e:	801a      	strh	r2, [r3, #0]
	unsigned int n = (*timeDuration) / 1000;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a36      	ldr	r2, [pc, #216]	@ (8001870 <ssd1306_TestDurationSetting+0xfc>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	099b      	lsrs	r3, r3, #6
 800179c:	60fb      	str	r3, [r7, #12]

	sprintf(str, "%d", n);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4933      	ldr	r1, [pc, #204]	@ (8001874 <ssd1306_TestDurationSetting+0x100>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 fdb0 	bl	800330c <siprintf>

	if(durationSection == SECONDS) {
 80017ac:	4b32      	ldr	r3, [pc, #200]	@ (8001878 <ssd1306_TestDurationSetting+0x104>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d11f      	bne.n	80017f4 <ssd1306_TestDurationSetting+0x80>
		ssd1306_FillRectangle(4, 20, 52, 44, White);
 80017b4:	2301      	movs	r3, #1
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	232c      	movs	r3, #44	@ 0x2c
 80017ba:	2234      	movs	r2, #52	@ 0x34
 80017bc:	2114      	movs	r1, #20
 80017be:	2004      	movs	r0, #4
 80017c0:	f7ff fdee 	bl	80013a0 <ssd1306_FillRectangle>
		ssd1306_SetCursor(19, 10);
 80017c4:	210a      	movs	r1, #10
 80017c6:	2013      	movs	r0, #19
 80017c8:	f7ff fdd2 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString("sec", Font_6x8, Black);
 80017cc:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <ssd1306_TestDurationSetting+0x108>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	9200      	str	r2, [sp, #0]
 80017d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d4:	482a      	ldr	r0, [pc, #168]	@ (8001880 <ssd1306_TestDurationSetting+0x10c>)
 80017d6:	f7ff fda5 	bl	8001324 <ssd1306_WriteString>
		ssd1306_SetCursor(5, 20);
 80017da:	2114      	movs	r1, #20
 80017dc:	2005      	movs	r0, #5
 80017de:	f7ff fdc7 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_16x24, Black);
 80017e2:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <ssd1306_TestDurationSetting+0x110>)
 80017e4:	f107 0008 	add.w	r0, r7, #8
 80017e8:	2200      	movs	r2, #0
 80017ea:	9200      	str	r2, [sp, #0]
 80017ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ee:	f7ff fd99 	bl	8001324 <ssd1306_WriteString>
 80017f2:	e016      	b.n	8001822 <ssd1306_TestDurationSetting+0xae>
	}
	else {
		ssd1306_SetCursor(19, 10);
 80017f4:	210a      	movs	r1, #10
 80017f6:	2013      	movs	r0, #19
 80017f8:	f7ff fdba 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString("sec", Font_6x8, White);
 80017fc:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <ssd1306_TestDurationSetting+0x108>)
 80017fe:	2201      	movs	r2, #1
 8001800:	9200      	str	r2, [sp, #0]
 8001802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001804:	481e      	ldr	r0, [pc, #120]	@ (8001880 <ssd1306_TestDurationSetting+0x10c>)
 8001806:	f7ff fd8d 	bl	8001324 <ssd1306_WriteString>
		ssd1306_SetCursor(5, 20);
 800180a:	2114      	movs	r1, #20
 800180c:	2005      	movs	r0, #5
 800180e:	f7ff fdaf 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_16x24, White);
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <ssd1306_TestDurationSetting+0x110>)
 8001814:	f107 0008 	add.w	r0, r7, #8
 8001818:	2201      	movs	r2, #1
 800181a:	9200      	str	r2, [sp, #0]
 800181c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800181e:	f7ff fd81 	bl	8001324 <ssd1306_WriteString>

	}

	ssd1306_SetCursor(92, 20);
 8001822:	2114      	movs	r1, #20
 8001824:	205c      	movs	r0, #92	@ 0x5c
 8001826:	f7ff fda3 	bl	8001370 <ssd1306_SetCursor>

	if(durationSection == SET_DURATION) {
 800182a:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <ssd1306_TestDurationSetting+0x104>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d10f      	bne.n	8001852 <ssd1306_TestDurationSetting+0xde>
		ssd1306_FillRectangle(91, 20, 124, 44, White);
 8001832:	2301      	movs	r3, #1
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	232c      	movs	r3, #44	@ 0x2c
 8001838:	227c      	movs	r2, #124	@ 0x7c
 800183a:	2114      	movs	r1, #20
 800183c:	205b      	movs	r0, #91	@ 0x5b
 800183e:	f7ff fdaf 	bl	80013a0 <ssd1306_FillRectangle>
		ssd1306_WriteString("OK", Font_16x24, Black);
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <ssd1306_TestDurationSetting+0x110>)
 8001844:	2200      	movs	r2, #0
 8001846:	9200      	str	r2, [sp, #0]
 8001848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184a:	480f      	ldr	r0, [pc, #60]	@ (8001888 <ssd1306_TestDurationSetting+0x114>)
 800184c:	f7ff fd6a 	bl	8001324 <ssd1306_WriteString>
 8001850:	e006      	b.n	8001860 <ssd1306_TestDurationSetting+0xec>
	}
	else {
		ssd1306_WriteString("OK", Font_16x24, White);
 8001852:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <ssd1306_TestDurationSetting+0x110>)
 8001854:	2201      	movs	r2, #1
 8001856:	9200      	str	r2, [sp, #0]
 8001858:	cb0e      	ldmia	r3, {r1, r2, r3}
 800185a:	480b      	ldr	r0, [pc, #44]	@ (8001888 <ssd1306_TestDurationSetting+0x114>)
 800185c:	f7ff fd62 	bl	8001324 <ssd1306_WriteString>
	}

	ssd1306_UpdateScreen();
 8001860:	f7ff fc54 	bl	800110c <ssd1306_UpdateScreen>
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	08003d6c 	.word	0x08003d6c
 8001870:	10624dd3 	.word	0x10624dd3
 8001874:	08003d64 	.word	0x08003d64
 8001878:	20000540 	.word	0x20000540
 800187c:	080062e0 	.word	0x080062e0
 8001880:	08003d68 	.word	0x08003d68
 8001884:	080062f8 	.word	0x080062f8
 8001888:	08003d60 	.word	0x08003d60

0800188c <ssd1306_TurnOff>:


void ssd1306_TurnOff() {
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff fc23 	bl	80010dc <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001896:	f7ff fc39 	bl	800110c <ssd1306_UpdateScreen>
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <HAL_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	4a0f      	ldr	r2, [pc, #60]	@ (80018ec <HAL_MspInit+0x4c>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b6:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_MspInit+0x4c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_MspInit+0x4c>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a19      	ldr	r2, [pc, #100]	@ (8001974 <HAL_I2C_MspInit+0x84>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d12b      	bne.n	800196a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_I2C_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a17      	ldr	r2, [pc, #92]	@ (8001978 <HAL_I2C_MspInit+0x88>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <HAL_I2C_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192e:	23c0      	movs	r3, #192	@ 0xc0
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001932:	2312      	movs	r3, #18
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800193e:	2304      	movs	r3, #4
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <HAL_I2C_MspInit+0x8c>)
 800194a:	f000 fa37 	bl	8001dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_I2C_MspInit+0x88>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	4a08      	ldr	r2, [pc, #32]	@ (8001978 <HAL_I2C_MspInit+0x88>)
 8001958:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800195c:	6413      	str	r3, [r2, #64]	@ 0x40
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_I2C_MspInit+0x88>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	@ 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40005400 	.word	0x40005400
 8001978:	40023800 	.word	0x40023800
 800197c:	40020400 	.word	0x40020400

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <NMI_Handler+0x4>

08001988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <MemManage_Handler+0x4>

08001998 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d6:	f000 f8c7 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f001 fcbe 	bl	8003390 <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <_sbrk+0x64>)
 8001a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20020000 	.word	0x20020000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	20000544 	.word	0x20000544
 8001a48:	20000698 	.word	0x20000698

08001a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <SystemInit+0x20>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <SystemInit+0x20>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a74:	f7ff ffea 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a78:	480c      	ldr	r0, [pc, #48]	@ (8001aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a7a:	490d      	ldr	r1, [pc, #52]	@ (8001ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a90:	4c0a      	ldr	r4, [pc, #40]	@ (8001abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f001 fc7d 	bl	800339c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aa2:	f7fe fe5f 	bl	8000764 <main>
  bx  lr    
 8001aa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001ab4:	08006440 	.word	0x08006440
  ldr r2, =_sbss
 8001ab8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001abc:	20000694 	.word	0x20000694

08001ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC_IRQHandler>
	...

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b04 <HAL_Init+0x40>)
 8001ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <HAL_Init+0x40>)
 8001ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	@ (8001b04 <HAL_Init+0x40>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f931 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	200f      	movs	r0, #15
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fed2 	bl	80018a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f93b 	bl	8001da2 <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f911 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	@ (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000040 	.word	0x20000040
 8001b60:	20000048 	.word	0x20000048
 8001b64:	20000044 	.word	0x20000044

08001b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000048 	.word	0x20000048
 8001b8c:	20000548 	.word	0x20000548

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b03      	ldr	r3, [pc, #12]	@ (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000548 	.word	0x20000548

08001ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff ffee 	bl	8001b90 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d005      	beq.n	8001bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <HAL_Delay+0x44>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bce:	bf00      	nop
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d8f7      	bhi.n	8001bd0 <HAL_Delay+0x28>
  {
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000048 	.word	0x20000048

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	@ (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	@ (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff8e 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff47 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff5c 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff8e 	bl	8001ca8 <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5d 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffb0 	bl	8001d10 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	e159      	b.n	800208c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 8148 	bne.w	8002086 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d005      	beq.n	8001e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d130      	bne.n	8001e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 0201 	and.w	r2, r3, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d017      	beq.n	8001eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d123      	bne.n	8001f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	08da      	lsrs	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3208      	adds	r2, #8
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	220f      	movs	r2, #15
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	69b9      	ldr	r1, [r7, #24]
 8001efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0203 	and.w	r2, r3, #3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80a2 	beq.w	8002086 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b57      	ldr	r3, [pc, #348]	@ (80020a4 <HAL_GPIO_Init+0x2e8>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	4a56      	ldr	r2, [pc, #344]	@ (80020a4 <HAL_GPIO_Init+0x2e8>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f52:	4b54      	ldr	r3, [pc, #336]	@ (80020a4 <HAL_GPIO_Init+0x2e8>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f5e:	4a52      	ldr	r2, [pc, #328]	@ (80020a8 <HAL_GPIO_Init+0x2ec>)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a49      	ldr	r2, [pc, #292]	@ (80020ac <HAL_GPIO_Init+0x2f0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d019      	beq.n	8001fbe <HAL_GPIO_Init+0x202>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a48      	ldr	r2, [pc, #288]	@ (80020b0 <HAL_GPIO_Init+0x2f4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_GPIO_Init+0x1fe>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a47      	ldr	r2, [pc, #284]	@ (80020b4 <HAL_GPIO_Init+0x2f8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00d      	beq.n	8001fb6 <HAL_GPIO_Init+0x1fa>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a46      	ldr	r2, [pc, #280]	@ (80020b8 <HAL_GPIO_Init+0x2fc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <HAL_GPIO_Init+0x1f6>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a45      	ldr	r2, [pc, #276]	@ (80020bc <HAL_GPIO_Init+0x300>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <HAL_GPIO_Init+0x1f2>
 8001faa:	2304      	movs	r3, #4
 8001fac:	e008      	b.n	8001fc0 <HAL_GPIO_Init+0x204>
 8001fae:	2307      	movs	r3, #7
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x204>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e004      	b.n	8001fc0 <HAL_GPIO_Init+0x204>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_Init+0x204>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_GPIO_Init+0x204>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	f002 0203 	and.w	r2, r2, #3
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	4093      	lsls	r3, r2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd0:	4935      	ldr	r1, [pc, #212]	@ (80020a8 <HAL_GPIO_Init+0x2ec>)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fde:	4b38      	ldr	r3, [pc, #224]	@ (80020c0 <HAL_GPIO_Init+0x304>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002002:	4a2f      	ldr	r2, [pc, #188]	@ (80020c0 <HAL_GPIO_Init+0x304>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002008:	4b2d      	ldr	r3, [pc, #180]	@ (80020c0 <HAL_GPIO_Init+0x304>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800202c:	4a24      	ldr	r2, [pc, #144]	@ (80020c0 <HAL_GPIO_Init+0x304>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002032:	4b23      	ldr	r3, [pc, #140]	@ (80020c0 <HAL_GPIO_Init+0x304>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002056:	4a1a      	ldr	r2, [pc, #104]	@ (80020c0 <HAL_GPIO_Init+0x304>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800205c:	4b18      	ldr	r3, [pc, #96]	@ (80020c0 <HAL_GPIO_Init+0x304>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002080:	4a0f      	ldr	r2, [pc, #60]	@ (80020c0 <HAL_GPIO_Init+0x304>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3301      	adds	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b0f      	cmp	r3, #15
 8002090:	f67f aea2 	bls.w	8001dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3724      	adds	r7, #36	@ 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40013800 	.word	0x40013800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020400 	.word	0x40020400
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40013c00 	.word	0x40013c00

080020c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	887b      	ldrh	r3, [r7, #2]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e001      	b.n	80020e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
 8002100:	4613      	mov	r3, r2
 8002102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002104:	787b      	ldrb	r3, [r7, #1]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002110:	e003      	b.n	800211a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	041a      	lsls	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e12b      	b.n	8002392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fbce 	bl	80018f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	@ 0x24
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800217a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800218a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800218c:	f001 f8aa 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 8002190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a81      	ldr	r2, [pc, #516]	@ (800239c <HAL_I2C_Init+0x274>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d807      	bhi.n	80021ac <HAL_I2C_Init+0x84>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a80      	ldr	r2, [pc, #512]	@ (80023a0 <HAL_I2C_Init+0x278>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	bf94      	ite	ls
 80021a4:	2301      	movls	r3, #1
 80021a6:	2300      	movhi	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e006      	b.n	80021ba <HAL_I2C_Init+0x92>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4a7d      	ldr	r2, [pc, #500]	@ (80023a4 <HAL_I2C_Init+0x27c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	bf94      	ite	ls
 80021b4:	2301      	movls	r3, #1
 80021b6:	2300      	movhi	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0e7      	b.n	8002392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4a78      	ldr	r2, [pc, #480]	@ (80023a8 <HAL_I2C_Init+0x280>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9b      	lsrs	r3, r3, #18
 80021cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a6a      	ldr	r2, [pc, #424]	@ (800239c <HAL_I2C_Init+0x274>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d802      	bhi.n	80021fc <HAL_I2C_Init+0xd4>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3301      	adds	r3, #1
 80021fa:	e009      	b.n	8002210 <HAL_I2C_Init+0xe8>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	4a69      	ldr	r2, [pc, #420]	@ (80023ac <HAL_I2C_Init+0x284>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	3301      	adds	r3, #1
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	430b      	orrs	r3, r1
 8002216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002222:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	495c      	ldr	r1, [pc, #368]	@ (800239c <HAL_I2C_Init+0x274>)
 800222c:	428b      	cmp	r3, r1
 800222e:	d819      	bhi.n	8002264 <HAL_I2C_Init+0x13c>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1e59      	subs	r1, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fbb1 f3f3 	udiv	r3, r1, r3
 800223e:	1c59      	adds	r1, r3, #1
 8002240:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002244:	400b      	ands	r3, r1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_I2C_Init+0x138>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e59      	subs	r1, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fbb1 f3f3 	udiv	r3, r1, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225e:	e051      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 8002260:	2304      	movs	r3, #4
 8002262:	e04f      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d111      	bne.n	8002290 <HAL_I2C_Init+0x168>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e58      	subs	r0, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	440b      	add	r3, r1
 800227a:	fbb0 f3f3 	udiv	r3, r0, r3
 800227e:	3301      	adds	r3, #1
 8002280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e012      	b.n	80022b6 <HAL_I2C_Init+0x18e>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	0099      	lsls	r1, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Init+0x196>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e022      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10e      	bne.n	80022e4 <HAL_I2C_Init+0x1bc>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e58      	subs	r0, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	440b      	add	r3, r1
 80022d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022e2:	e00f      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e58      	subs	r0, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	0099      	lsls	r1, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	6809      	ldr	r1, [r1, #0]
 8002308:	4313      	orrs	r3, r2
 800230a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002332:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6911      	ldr	r1, [r2, #16]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68d2      	ldr	r2, [r2, #12]
 800233e:	4311      	orrs	r1, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	430b      	orrs	r3, r1
 8002346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	000186a0 	.word	0x000186a0
 80023a0:	001e847f 	.word	0x001e847f
 80023a4:	003d08ff 	.word	0x003d08ff
 80023a8:	431bde83 	.word	0x431bde83
 80023ac:	10624dd3 	.word	0x10624dd3

080023b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	4608      	mov	r0, r1
 80023ba:	4611      	mov	r1, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	817b      	strh	r3, [r7, #10]
 80023c2:	460b      	mov	r3, r1
 80023c4:	813b      	strh	r3, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ca:	f7ff fbe1 	bl	8001b90 <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b20      	cmp	r3, #32
 80023da:	f040 80d9 	bne.w	8002590 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2319      	movs	r3, #25
 80023e4:	2201      	movs	r2, #1
 80023e6:	496d      	ldr	r1, [pc, #436]	@ (800259c <HAL_I2C_Mem_Write+0x1ec>)
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f971 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0cc      	b.n	8002592 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_I2C_Mem_Write+0x56>
 8002402:	2302      	movs	r3, #2
 8002404:	e0c5      	b.n	8002592 <HAL_I2C_Mem_Write+0x1e2>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b01      	cmp	r3, #1
 800241a:	d007      	beq.n	800242c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800243a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2221      	movs	r2, #33	@ 0x21
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2240      	movs	r2, #64	@ 0x40
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a3a      	ldr	r2, [r7, #32]
 8002456:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800245c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a4d      	ldr	r2, [pc, #308]	@ (80025a0 <HAL_I2C_Mem_Write+0x1f0>)
 800246c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800246e:	88f8      	ldrh	r0, [r7, #6]
 8002470:	893a      	ldrh	r2, [r7, #8]
 8002472:	8979      	ldrh	r1, [r7, #10]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	4603      	mov	r3, r0
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f890 	bl	80025a4 <I2C_RequestMemoryWrite>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d052      	beq.n	8002530 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e081      	b.n	8002592 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fa36 	bl	8002904 <I2C_WaitOnTXEFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00d      	beq.n	80024ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d107      	bne.n	80024b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06b      	b.n	8002592 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	781a      	ldrb	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d11b      	bne.n	8002530 <HAL_I2C_Mem_Write+0x180>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d017      	beq.n	8002530 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1aa      	bne.n	800248e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fa29 	bl	8002994 <I2C_WaitOnBTFFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00d      	beq.n	8002564 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	2b04      	cmp	r3, #4
 800254e:	d107      	bne.n	8002560 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e016      	b.n	8002592 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	00100002 	.word	0x00100002
 80025a0:	ffff0000 	.word	0xffff0000

080025a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	461a      	mov	r2, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	817b      	strh	r3, [r7, #10]
 80025b6:	460b      	mov	r3, r1
 80025b8:	813b      	strh	r3, [r7, #8]
 80025ba:	4613      	mov	r3, r2
 80025bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f878 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00d      	beq.n	8002602 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025f4:	d103      	bne.n	80025fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e05f      	b.n	80026c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002610:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	6a3a      	ldr	r2, [r7, #32]
 8002616:	492d      	ldr	r1, [pc, #180]	@ (80026cc <I2C_RequestMemoryWrite+0x128>)
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f8d3 	bl	80027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e04c      	b.n	80026c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800263e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002640:	6a39      	ldr	r1, [r7, #32]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f95e 	bl	8002904 <I2C_WaitOnTXEFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00d      	beq.n	800266a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	2b04      	cmp	r3, #4
 8002654:	d107      	bne.n	8002666 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002664:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e02b      	b.n	80026c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d105      	bne.n	800267c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002670:	893b      	ldrh	r3, [r7, #8]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	611a      	str	r2, [r3, #16]
 800267a:	e021      	b.n	80026c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800267c:	893b      	ldrh	r3, [r7, #8]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	b29b      	uxth	r3, r3
 8002682:	b2da      	uxtb	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800268a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800268c:	6a39      	ldr	r1, [r7, #32]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f938 	bl	8002904 <I2C_WaitOnTXEFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d107      	bne.n	80026b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e005      	b.n	80026c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026b6:	893b      	ldrh	r3, [r7, #8]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	00010002 	.word	0x00010002

080026d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e0:	e048      	b.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d044      	beq.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ea:	f7ff fa51 	bl	8001b90 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d302      	bcc.n	8002700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d139      	bne.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	0c1b      	lsrs	r3, r3, #16
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d10d      	bne.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x56>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	43da      	mvns	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4013      	ands	r3, r2
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	e00c      	b.n	8002740 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	43da      	mvns	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4013      	ands	r3, r2
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	429a      	cmp	r2, r3
 8002744:	d116      	bne.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e023      	b.n	80027bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	0c1b      	lsrs	r3, r3, #16
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10d      	bne.n	800279a <I2C_WaitOnFlagUntilTimeout+0xca>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	43da      	mvns	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4013      	ands	r3, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	e00c      	b.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	43da      	mvns	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d093      	beq.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027d2:	e071      	b.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e2:	d123      	bne.n	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e067      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d041      	beq.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002834:	f7ff f9ac 	bl	8001b90 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	d302      	bcc.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d136      	bne.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10c      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4013      	ands	r3, r2
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	e00b      	b.n	8002886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f043 0220 	orr.w	r2, r3, #32
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e021      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	0c1b      	lsrs	r3, r3, #16
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d10c      	bne.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	43da      	mvns	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e00b      	b.n	80028f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4013      	ands	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f af6d 	bne.w	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002910:	e034      	b.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f886 	bl	8002a24 <I2C_IsAcknowledgeFailed>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e034      	b.n	800298c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d028      	beq.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7ff f931 	bl	8001b90 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d11d      	bne.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294a:	2b80      	cmp	r3, #128	@ 0x80
 800294c:	d016      	beq.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f043 0220 	orr.w	r2, r3, #32
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e007      	b.n	800298c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d1c3      	bne.n	8002912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029a0:	e034      	b.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f83e 	bl	8002a24 <I2C_IsAcknowledgeFailed>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e034      	b.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d028      	beq.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7ff f8e9 	bl	8001b90 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d11d      	bne.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d016      	beq.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e007      	b.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d1c3      	bne.n	80029a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3a:	d11b      	bne.n	8002a74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f043 0204 	orr.w	r2, r3, #4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e267      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d075      	beq.n	8002b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aa2:	4b88      	ldr	r3, [pc, #544]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d00c      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aae:	4b85      	ldr	r3, [pc, #532]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d112      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aba:	4b82      	ldr	r3, [pc, #520]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	4b7e      	ldr	r3, [pc, #504]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d05b      	beq.n	8002b8c <HAL_RCC_OscConfig+0x108>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d157      	bne.n	8002b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e242      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCC_OscConfig+0x74>
 8002aea:	4b76      	ldr	r3, [pc, #472]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a75      	ldr	r2, [pc, #468]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e01d      	b.n	8002b34 <HAL_RCC_OscConfig+0xb0>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x98>
 8002b02:	4b70      	ldr	r3, [pc, #448]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a6f      	ldr	r2, [pc, #444]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6c      	ldr	r2, [pc, #432]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0xb0>
 8002b1c:	4b69      	ldr	r3, [pc, #420]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a68      	ldr	r2, [pc, #416]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b66      	ldr	r3, [pc, #408]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a65      	ldr	r2, [pc, #404]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff f828 	bl	8001b90 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b44:	f7ff f824 	bl	8001b90 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	@ 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e207      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0xc0>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7ff f814 	bl	8001b90 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7ff f810 	bl	8001b90 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1f3      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	4b51      	ldr	r3, [pc, #324]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0xe8>
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d063      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba6:	4b47      	ldr	r3, [pc, #284]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d11c      	bne.n	8002bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb2:	4b44      	ldr	r3, [pc, #272]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d116      	bne.n	8002bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	4b41      	ldr	r3, [pc, #260]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x152>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e1c7      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4937      	ldr	r1, [pc, #220]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	e03a      	b.n	8002c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf4:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <HAL_RCC_OscConfig+0x244>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe ffc9 	bl	8001b90 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fe ffc5 	bl	8001b90 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e1a8      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b28      	ldr	r3, [pc, #160]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4925      	ldr	r1, [pc, #148]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]
 8002c34:	e015      	b.n	8002c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b24      	ldr	r3, [pc, #144]	@ (8002cc8 <HAL_RCC_OscConfig+0x244>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe ffa8 	bl	8001b90 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe ffa4 	bl	8001b90 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e187      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d036      	beq.n	8002cdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d016      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <HAL_RCC_OscConfig+0x248>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe ff88 	bl	8001b90 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe ff84 	bl	8001b90 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e167      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <HAL_RCC_OscConfig+0x240>)
 8002c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x200>
 8002ca2:	e01b      	b.n	8002cdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <HAL_RCC_OscConfig+0x248>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002caa:	f7fe ff71 	bl	8001b90 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	e00e      	b.n	8002cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb2:	f7fe ff6d 	bl	8001b90 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d907      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e150      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	42470000 	.word	0x42470000
 8002ccc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	4b88      	ldr	r3, [pc, #544]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ea      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8097 	beq.w	8002e18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4b81      	ldr	r3, [pc, #516]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10f      	bne.n	8002d1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	4a7c      	ldr	r2, [pc, #496]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b77      	ldr	r3, [pc, #476]	@ (8002ef8 <HAL_RCC_OscConfig+0x474>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d118      	bne.n	8002d58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d26:	4b74      	ldr	r3, [pc, #464]	@ (8002ef8 <HAL_RCC_OscConfig+0x474>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a73      	ldr	r2, [pc, #460]	@ (8002ef8 <HAL_RCC_OscConfig+0x474>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d32:	f7fe ff2d 	bl	8001b90 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fe ff29 	bl	8001b90 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e10c      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef8 <HAL_RCC_OscConfig+0x474>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x2ea>
 8002d60:	4b64      	ldr	r3, [pc, #400]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d64:	4a63      	ldr	r2, [pc, #396]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6c:	e01c      	b.n	8002da8 <HAL_RCC_OscConfig+0x324>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b05      	cmp	r3, #5
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x30c>
 8002d76:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	f043 0304 	orr.w	r3, r3, #4
 8002d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d82:	4b5c      	ldr	r3, [pc, #368]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	4a5b      	ldr	r2, [pc, #364]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCC_OscConfig+0x324>
 8002d90:	4b58      	ldr	r3, [pc, #352]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d94:	4a57      	ldr	r2, [pc, #348]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9c:	4b55      	ldr	r3, [pc, #340]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da0:	4a54      	ldr	r2, [pc, #336]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002da2:	f023 0304 	bic.w	r3, r3, #4
 8002da6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d015      	beq.n	8002ddc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe feee 	bl	8001b90 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db8:	f7fe feea 	bl	8001b90 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e0cb      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dce:	4b49      	ldr	r3, [pc, #292]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0ee      	beq.n	8002db8 <HAL_RCC_OscConfig+0x334>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fed8 	bl	8001b90 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7fe fed4 	bl	8001b90 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0b5      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ee      	bne.n	8002de4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d105      	bne.n	8002e18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0c:	4b39      	ldr	r3, [pc, #228]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	4a38      	ldr	r2, [pc, #224]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80a1 	beq.w	8002f64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e22:	4b34      	ldr	r3, [pc, #208]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d05c      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d141      	bne.n	8002eba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e36:	4b31      	ldr	r3, [pc, #196]	@ (8002efc <HAL_RCC_OscConfig+0x478>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fea8 	bl	8001b90 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fea4 	bl	8001b90 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e087      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	4b27      	ldr	r3, [pc, #156]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	019b      	lsls	r3, r3, #6
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	061b      	lsls	r3, r3, #24
 8002e86:	491b      	ldr	r1, [pc, #108]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <HAL_RCC_OscConfig+0x478>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7fe fe7d 	bl	8001b90 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7fe fe79 	bl	8001b90 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e05c      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eac:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x416>
 8002eb8:	e054      	b.n	8002f64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <HAL_RCC_OscConfig+0x478>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fe66 	bl	8001b90 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe fe62 	bl	8001b90 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e045      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eda:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <HAL_RCC_OscConfig+0x470>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x444>
 8002ee6:	e03d      	b.n	8002f64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e038      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <HAL_RCC_OscConfig+0x4ec>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d028      	beq.n	8002f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d121      	bne.n	8002f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d11a      	bne.n	8002f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d111      	bne.n	8002f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d107      	bne.n	8002f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0cc      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b68      	ldr	r3, [pc, #416]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d90c      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b65      	ldr	r3, [pc, #404]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b63      	ldr	r3, [pc, #396]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0b8      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc8:	4b59      	ldr	r3, [pc, #356]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a58      	ldr	r2, [pc, #352]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe0:	4b53      	ldr	r3, [pc, #332]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a52      	ldr	r2, [pc, #328]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4b50      	ldr	r3, [pc, #320]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	494d      	ldr	r1, [pc, #308]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d044      	beq.n	8003094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003012:	4b47      	ldr	r3, [pc, #284]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d119      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e07f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d003      	beq.n	8003032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302e:	2b03      	cmp	r3, #3
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b3f      	ldr	r3, [pc, #252]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3b      	ldr	r3, [pc, #236]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e067      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b37      	ldr	r3, [pc, #220]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4934      	ldr	r1, [pc, #208]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	4313      	orrs	r3, r2
 8003062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7fe fd94 	bl	8001b90 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe fd90 	bl	8001b90 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e04f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2b      	ldr	r3, [pc, #172]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b25      	ldr	r3, [pc, #148]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d20c      	bcs.n	80030bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b22      	ldr	r3, [pc, #136]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b20      	ldr	r3, [pc, #128]	@ (800312c <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e032      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c8:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4916      	ldr	r1, [pc, #88]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e6:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	490e      	ldr	r1, [pc, #56]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030fa:	f000 f821 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030fe:	4602      	mov	r2, r0
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	490a      	ldr	r1, [pc, #40]	@ (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	5ccb      	ldrb	r3, [r1, r3]
 800310e:	fa22 f303 	lsr.w	r3, r2, r3
 8003112:	4a09      	ldr	r2, [pc, #36]	@ (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003116:	4b09      	ldr	r3, [pc, #36]	@ (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fcf4 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023c00 	.word	0x40023c00
 8003130:	40023800 	.word	0x40023800
 8003134:	080063e4 	.word	0x080063e4
 8003138:	20000040 	.word	0x20000040
 800313c:	20000044 	.word	0x20000044

08003140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003144:	b090      	sub	sp, #64	@ 0x40
 8003146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	637b      	str	r3, [r7, #52]	@ 0x34
 800314c:	2300      	movs	r3, #0
 800314e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003150:	2300      	movs	r3, #0
 8003152:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003158:	4b59      	ldr	r3, [pc, #356]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b08      	cmp	r3, #8
 8003162:	d00d      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x40>
 8003164:	2b08      	cmp	r3, #8
 8003166:	f200 80a1 	bhi.w	80032ac <HAL_RCC_GetSysClockFreq+0x16c>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x34>
 800316e:	2b04      	cmp	r3, #4
 8003170:	d003      	beq.n	800317a <HAL_RCC_GetSysClockFreq+0x3a>
 8003172:	e09b      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4b53      	ldr	r3, [pc, #332]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003176:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003178:	e09b      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800317a:	4b53      	ldr	r3, [pc, #332]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800317c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800317e:	e098      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003180:	4b4f      	ldr	r3, [pc, #316]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800318a:	4b4d      	ldr	r3, [pc, #308]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d028      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003196:	4b4a      	ldr	r3, [pc, #296]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	099b      	lsrs	r3, r3, #6
 800319c:	2200      	movs	r2, #0
 800319e:	623b      	str	r3, [r7, #32]
 80031a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031a8:	2100      	movs	r1, #0
 80031aa:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031ac:	fb03 f201 	mul.w	r2, r3, r1
 80031b0:	2300      	movs	r3, #0
 80031b2:	fb00 f303 	mul.w	r3, r0, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	4a43      	ldr	r2, [pc, #268]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031ba:	fba0 1202 	umull	r1, r2, r0, r2
 80031be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031c0:	460a      	mov	r2, r1
 80031c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80031c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031c6:	4413      	add	r3, r2
 80031c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031cc:	2200      	movs	r2, #0
 80031ce:	61bb      	str	r3, [r7, #24]
 80031d0:	61fa      	str	r2, [r7, #28]
 80031d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031da:	f7fd f851 	bl	8000280 <__aeabi_uldivmod>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4613      	mov	r3, r2
 80031e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031e6:	e053      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e8:	4b35      	ldr	r3, [pc, #212]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	2200      	movs	r2, #0
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	617a      	str	r2, [r7, #20]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031fa:	f04f 0b00 	mov.w	fp, #0
 80031fe:	4652      	mov	r2, sl
 8003200:	465b      	mov	r3, fp
 8003202:	f04f 0000 	mov.w	r0, #0
 8003206:	f04f 0100 	mov.w	r1, #0
 800320a:	0159      	lsls	r1, r3, #5
 800320c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003210:	0150      	lsls	r0, r2, #5
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	ebb2 080a 	subs.w	r8, r2, sl
 800321a:	eb63 090b 	sbc.w	r9, r3, fp
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800322a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800322e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003232:	ebb2 0408 	subs.w	r4, r2, r8
 8003236:	eb63 0509 	sbc.w	r5, r3, r9
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	00eb      	lsls	r3, r5, #3
 8003244:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003248:	00e2      	lsls	r2, r4, #3
 800324a:	4614      	mov	r4, r2
 800324c:	461d      	mov	r5, r3
 800324e:	eb14 030a 	adds.w	r3, r4, sl
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	eb45 030b 	adc.w	r3, r5, fp
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003266:	4629      	mov	r1, r5
 8003268:	028b      	lsls	r3, r1, #10
 800326a:	4621      	mov	r1, r4
 800326c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003270:	4621      	mov	r1, r4
 8003272:	028a      	lsls	r2, r1, #10
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327a:	2200      	movs	r2, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	60fa      	str	r2, [r7, #12]
 8003280:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003284:	f7fc fffc 	bl	8000280 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	3301      	adds	r3, #1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80032a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032aa:	e002      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80032ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3740      	adds	r7, #64	@ 0x40
 80032b8:	46bd      	mov	sp, r7
 80032ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	017d7840 	.word	0x017d7840

080032cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d0:	4b03      	ldr	r3, [pc, #12]	@ (80032e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000040 	.word	0x20000040

080032e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032e8:	f7ff fff0 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0a9b      	lsrs	r3, r3, #10
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4903      	ldr	r1, [pc, #12]	@ (8003308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	080063f4 	.word	0x080063f4

0800330c <siprintf>:
 800330c:	b40e      	push	{r1, r2, r3}
 800330e:	b500      	push	{lr}
 8003310:	b09c      	sub	sp, #112	@ 0x70
 8003312:	ab1d      	add	r3, sp, #116	@ 0x74
 8003314:	9002      	str	r0, [sp, #8]
 8003316:	9006      	str	r0, [sp, #24]
 8003318:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800331c:	4809      	ldr	r0, [pc, #36]	@ (8003344 <siprintf+0x38>)
 800331e:	9107      	str	r1, [sp, #28]
 8003320:	9104      	str	r1, [sp, #16]
 8003322:	4909      	ldr	r1, [pc, #36]	@ (8003348 <siprintf+0x3c>)
 8003324:	f853 2b04 	ldr.w	r2, [r3], #4
 8003328:	9105      	str	r1, [sp, #20]
 800332a:	6800      	ldr	r0, [r0, #0]
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	a902      	add	r1, sp, #8
 8003330:	f000 f9bc 	bl	80036ac <_svfiprintf_r>
 8003334:	9b02      	ldr	r3, [sp, #8]
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	b01c      	add	sp, #112	@ 0x70
 800333c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003340:	b003      	add	sp, #12
 8003342:	4770      	bx	lr
 8003344:	2000004c 	.word	0x2000004c
 8003348:	ffff0208 	.word	0xffff0208

0800334c <memmove>:
 800334c:	4288      	cmp	r0, r1
 800334e:	b510      	push	{r4, lr}
 8003350:	eb01 0402 	add.w	r4, r1, r2
 8003354:	d902      	bls.n	800335c <memmove+0x10>
 8003356:	4284      	cmp	r4, r0
 8003358:	4623      	mov	r3, r4
 800335a:	d807      	bhi.n	800336c <memmove+0x20>
 800335c:	1e43      	subs	r3, r0, #1
 800335e:	42a1      	cmp	r1, r4
 8003360:	d008      	beq.n	8003374 <memmove+0x28>
 8003362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800336a:	e7f8      	b.n	800335e <memmove+0x12>
 800336c:	4402      	add	r2, r0
 800336e:	4601      	mov	r1, r0
 8003370:	428a      	cmp	r2, r1
 8003372:	d100      	bne.n	8003376 <memmove+0x2a>
 8003374:	bd10      	pop	{r4, pc}
 8003376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800337a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800337e:	e7f7      	b.n	8003370 <memmove+0x24>

08003380 <memset>:
 8003380:	4402      	add	r2, r0
 8003382:	4603      	mov	r3, r0
 8003384:	4293      	cmp	r3, r2
 8003386:	d100      	bne.n	800338a <memset+0xa>
 8003388:	4770      	bx	lr
 800338a:	f803 1b01 	strb.w	r1, [r3], #1
 800338e:	e7f9      	b.n	8003384 <memset+0x4>

08003390 <__errno>:
 8003390:	4b01      	ldr	r3, [pc, #4]	@ (8003398 <__errno+0x8>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	2000004c 	.word	0x2000004c

0800339c <__libc_init_array>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	4d0d      	ldr	r5, [pc, #52]	@ (80033d4 <__libc_init_array+0x38>)
 80033a0:	4c0d      	ldr	r4, [pc, #52]	@ (80033d8 <__libc_init_array+0x3c>)
 80033a2:	1b64      	subs	r4, r4, r5
 80033a4:	10a4      	asrs	r4, r4, #2
 80033a6:	2600      	movs	r6, #0
 80033a8:	42a6      	cmp	r6, r4
 80033aa:	d109      	bne.n	80033c0 <__libc_init_array+0x24>
 80033ac:	4d0b      	ldr	r5, [pc, #44]	@ (80033dc <__libc_init_array+0x40>)
 80033ae:	4c0c      	ldr	r4, [pc, #48]	@ (80033e0 <__libc_init_array+0x44>)
 80033b0:	f000 fc4c 	bl	8003c4c <_init>
 80033b4:	1b64      	subs	r4, r4, r5
 80033b6:	10a4      	asrs	r4, r4, #2
 80033b8:	2600      	movs	r6, #0
 80033ba:	42a6      	cmp	r6, r4
 80033bc:	d105      	bne.n	80033ca <__libc_init_array+0x2e>
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c4:	4798      	blx	r3
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7ee      	b.n	80033a8 <__libc_init_array+0xc>
 80033ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ce:	4798      	blx	r3
 80033d0:	3601      	adds	r6, #1
 80033d2:	e7f2      	b.n	80033ba <__libc_init_array+0x1e>
 80033d4:	08006438 	.word	0x08006438
 80033d8:	08006438 	.word	0x08006438
 80033dc:	08006438 	.word	0x08006438
 80033e0:	0800643c 	.word	0x0800643c

080033e4 <__retarget_lock_acquire_recursive>:
 80033e4:	4770      	bx	lr

080033e6 <__retarget_lock_release_recursive>:
 80033e6:	4770      	bx	lr

080033e8 <memcpy>:
 80033e8:	440a      	add	r2, r1
 80033ea:	4291      	cmp	r1, r2
 80033ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80033f0:	d100      	bne.n	80033f4 <memcpy+0xc>
 80033f2:	4770      	bx	lr
 80033f4:	b510      	push	{r4, lr}
 80033f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033fe:	4291      	cmp	r1, r2
 8003400:	d1f9      	bne.n	80033f6 <memcpy+0xe>
 8003402:	bd10      	pop	{r4, pc}

08003404 <_free_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4605      	mov	r5, r0
 8003408:	2900      	cmp	r1, #0
 800340a:	d041      	beq.n	8003490 <_free_r+0x8c>
 800340c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003410:	1f0c      	subs	r4, r1, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	bfb8      	it	lt
 8003416:	18e4      	addlt	r4, r4, r3
 8003418:	f000 f8e0 	bl	80035dc <__malloc_lock>
 800341c:	4a1d      	ldr	r2, [pc, #116]	@ (8003494 <_free_r+0x90>)
 800341e:	6813      	ldr	r3, [r2, #0]
 8003420:	b933      	cbnz	r3, 8003430 <_free_r+0x2c>
 8003422:	6063      	str	r3, [r4, #4]
 8003424:	6014      	str	r4, [r2, #0]
 8003426:	4628      	mov	r0, r5
 8003428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800342c:	f000 b8dc 	b.w	80035e8 <__malloc_unlock>
 8003430:	42a3      	cmp	r3, r4
 8003432:	d908      	bls.n	8003446 <_free_r+0x42>
 8003434:	6820      	ldr	r0, [r4, #0]
 8003436:	1821      	adds	r1, r4, r0
 8003438:	428b      	cmp	r3, r1
 800343a:	bf01      	itttt	eq
 800343c:	6819      	ldreq	r1, [r3, #0]
 800343e:	685b      	ldreq	r3, [r3, #4]
 8003440:	1809      	addeq	r1, r1, r0
 8003442:	6021      	streq	r1, [r4, #0]
 8003444:	e7ed      	b.n	8003422 <_free_r+0x1e>
 8003446:	461a      	mov	r2, r3
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	b10b      	cbz	r3, 8003450 <_free_r+0x4c>
 800344c:	42a3      	cmp	r3, r4
 800344e:	d9fa      	bls.n	8003446 <_free_r+0x42>
 8003450:	6811      	ldr	r1, [r2, #0]
 8003452:	1850      	adds	r0, r2, r1
 8003454:	42a0      	cmp	r0, r4
 8003456:	d10b      	bne.n	8003470 <_free_r+0x6c>
 8003458:	6820      	ldr	r0, [r4, #0]
 800345a:	4401      	add	r1, r0
 800345c:	1850      	adds	r0, r2, r1
 800345e:	4283      	cmp	r3, r0
 8003460:	6011      	str	r1, [r2, #0]
 8003462:	d1e0      	bne.n	8003426 <_free_r+0x22>
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	6053      	str	r3, [r2, #4]
 800346a:	4408      	add	r0, r1
 800346c:	6010      	str	r0, [r2, #0]
 800346e:	e7da      	b.n	8003426 <_free_r+0x22>
 8003470:	d902      	bls.n	8003478 <_free_r+0x74>
 8003472:	230c      	movs	r3, #12
 8003474:	602b      	str	r3, [r5, #0]
 8003476:	e7d6      	b.n	8003426 <_free_r+0x22>
 8003478:	6820      	ldr	r0, [r4, #0]
 800347a:	1821      	adds	r1, r4, r0
 800347c:	428b      	cmp	r3, r1
 800347e:	bf04      	itt	eq
 8003480:	6819      	ldreq	r1, [r3, #0]
 8003482:	685b      	ldreq	r3, [r3, #4]
 8003484:	6063      	str	r3, [r4, #4]
 8003486:	bf04      	itt	eq
 8003488:	1809      	addeq	r1, r1, r0
 800348a:	6021      	streq	r1, [r4, #0]
 800348c:	6054      	str	r4, [r2, #4]
 800348e:	e7ca      	b.n	8003426 <_free_r+0x22>
 8003490:	bd38      	pop	{r3, r4, r5, pc}
 8003492:	bf00      	nop
 8003494:	20000690 	.word	0x20000690

08003498 <sbrk_aligned>:
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	4e0f      	ldr	r6, [pc, #60]	@ (80034d8 <sbrk_aligned+0x40>)
 800349c:	460c      	mov	r4, r1
 800349e:	6831      	ldr	r1, [r6, #0]
 80034a0:	4605      	mov	r5, r0
 80034a2:	b911      	cbnz	r1, 80034aa <sbrk_aligned+0x12>
 80034a4:	f000 fb8c 	bl	8003bc0 <_sbrk_r>
 80034a8:	6030      	str	r0, [r6, #0]
 80034aa:	4621      	mov	r1, r4
 80034ac:	4628      	mov	r0, r5
 80034ae:	f000 fb87 	bl	8003bc0 <_sbrk_r>
 80034b2:	1c43      	adds	r3, r0, #1
 80034b4:	d103      	bne.n	80034be <sbrk_aligned+0x26>
 80034b6:	f04f 34ff 	mov.w	r4, #4294967295
 80034ba:	4620      	mov	r0, r4
 80034bc:	bd70      	pop	{r4, r5, r6, pc}
 80034be:	1cc4      	adds	r4, r0, #3
 80034c0:	f024 0403 	bic.w	r4, r4, #3
 80034c4:	42a0      	cmp	r0, r4
 80034c6:	d0f8      	beq.n	80034ba <sbrk_aligned+0x22>
 80034c8:	1a21      	subs	r1, r4, r0
 80034ca:	4628      	mov	r0, r5
 80034cc:	f000 fb78 	bl	8003bc0 <_sbrk_r>
 80034d0:	3001      	adds	r0, #1
 80034d2:	d1f2      	bne.n	80034ba <sbrk_aligned+0x22>
 80034d4:	e7ef      	b.n	80034b6 <sbrk_aligned+0x1e>
 80034d6:	bf00      	nop
 80034d8:	2000068c 	.word	0x2000068c

080034dc <_malloc_r>:
 80034dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034e0:	1ccd      	adds	r5, r1, #3
 80034e2:	f025 0503 	bic.w	r5, r5, #3
 80034e6:	3508      	adds	r5, #8
 80034e8:	2d0c      	cmp	r5, #12
 80034ea:	bf38      	it	cc
 80034ec:	250c      	movcc	r5, #12
 80034ee:	2d00      	cmp	r5, #0
 80034f0:	4606      	mov	r6, r0
 80034f2:	db01      	blt.n	80034f8 <_malloc_r+0x1c>
 80034f4:	42a9      	cmp	r1, r5
 80034f6:	d904      	bls.n	8003502 <_malloc_r+0x26>
 80034f8:	230c      	movs	r3, #12
 80034fa:	6033      	str	r3, [r6, #0]
 80034fc:	2000      	movs	r0, #0
 80034fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035d8 <_malloc_r+0xfc>
 8003506:	f000 f869 	bl	80035dc <__malloc_lock>
 800350a:	f8d8 3000 	ldr.w	r3, [r8]
 800350e:	461c      	mov	r4, r3
 8003510:	bb44      	cbnz	r4, 8003564 <_malloc_r+0x88>
 8003512:	4629      	mov	r1, r5
 8003514:	4630      	mov	r0, r6
 8003516:	f7ff ffbf 	bl	8003498 <sbrk_aligned>
 800351a:	1c43      	adds	r3, r0, #1
 800351c:	4604      	mov	r4, r0
 800351e:	d158      	bne.n	80035d2 <_malloc_r+0xf6>
 8003520:	f8d8 4000 	ldr.w	r4, [r8]
 8003524:	4627      	mov	r7, r4
 8003526:	2f00      	cmp	r7, #0
 8003528:	d143      	bne.n	80035b2 <_malloc_r+0xd6>
 800352a:	2c00      	cmp	r4, #0
 800352c:	d04b      	beq.n	80035c6 <_malloc_r+0xea>
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	4639      	mov	r1, r7
 8003532:	4630      	mov	r0, r6
 8003534:	eb04 0903 	add.w	r9, r4, r3
 8003538:	f000 fb42 	bl	8003bc0 <_sbrk_r>
 800353c:	4581      	cmp	r9, r0
 800353e:	d142      	bne.n	80035c6 <_malloc_r+0xea>
 8003540:	6821      	ldr	r1, [r4, #0]
 8003542:	1a6d      	subs	r5, r5, r1
 8003544:	4629      	mov	r1, r5
 8003546:	4630      	mov	r0, r6
 8003548:	f7ff ffa6 	bl	8003498 <sbrk_aligned>
 800354c:	3001      	adds	r0, #1
 800354e:	d03a      	beq.n	80035c6 <_malloc_r+0xea>
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	442b      	add	r3, r5
 8003554:	6023      	str	r3, [r4, #0]
 8003556:	f8d8 3000 	ldr.w	r3, [r8]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	bb62      	cbnz	r2, 80035b8 <_malloc_r+0xdc>
 800355e:	f8c8 7000 	str.w	r7, [r8]
 8003562:	e00f      	b.n	8003584 <_malloc_r+0xa8>
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	1b52      	subs	r2, r2, r5
 8003568:	d420      	bmi.n	80035ac <_malloc_r+0xd0>
 800356a:	2a0b      	cmp	r2, #11
 800356c:	d917      	bls.n	800359e <_malloc_r+0xc2>
 800356e:	1961      	adds	r1, r4, r5
 8003570:	42a3      	cmp	r3, r4
 8003572:	6025      	str	r5, [r4, #0]
 8003574:	bf18      	it	ne
 8003576:	6059      	strne	r1, [r3, #4]
 8003578:	6863      	ldr	r3, [r4, #4]
 800357a:	bf08      	it	eq
 800357c:	f8c8 1000 	streq.w	r1, [r8]
 8003580:	5162      	str	r2, [r4, r5]
 8003582:	604b      	str	r3, [r1, #4]
 8003584:	4630      	mov	r0, r6
 8003586:	f000 f82f 	bl	80035e8 <__malloc_unlock>
 800358a:	f104 000b 	add.w	r0, r4, #11
 800358e:	1d23      	adds	r3, r4, #4
 8003590:	f020 0007 	bic.w	r0, r0, #7
 8003594:	1ac2      	subs	r2, r0, r3
 8003596:	bf1c      	itt	ne
 8003598:	1a1b      	subne	r3, r3, r0
 800359a:	50a3      	strne	r3, [r4, r2]
 800359c:	e7af      	b.n	80034fe <_malloc_r+0x22>
 800359e:	6862      	ldr	r2, [r4, #4]
 80035a0:	42a3      	cmp	r3, r4
 80035a2:	bf0c      	ite	eq
 80035a4:	f8c8 2000 	streq.w	r2, [r8]
 80035a8:	605a      	strne	r2, [r3, #4]
 80035aa:	e7eb      	b.n	8003584 <_malloc_r+0xa8>
 80035ac:	4623      	mov	r3, r4
 80035ae:	6864      	ldr	r4, [r4, #4]
 80035b0:	e7ae      	b.n	8003510 <_malloc_r+0x34>
 80035b2:	463c      	mov	r4, r7
 80035b4:	687f      	ldr	r7, [r7, #4]
 80035b6:	e7b6      	b.n	8003526 <_malloc_r+0x4a>
 80035b8:	461a      	mov	r2, r3
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	42a3      	cmp	r3, r4
 80035be:	d1fb      	bne.n	80035b8 <_malloc_r+0xdc>
 80035c0:	2300      	movs	r3, #0
 80035c2:	6053      	str	r3, [r2, #4]
 80035c4:	e7de      	b.n	8003584 <_malloc_r+0xa8>
 80035c6:	230c      	movs	r3, #12
 80035c8:	6033      	str	r3, [r6, #0]
 80035ca:	4630      	mov	r0, r6
 80035cc:	f000 f80c 	bl	80035e8 <__malloc_unlock>
 80035d0:	e794      	b.n	80034fc <_malloc_r+0x20>
 80035d2:	6005      	str	r5, [r0, #0]
 80035d4:	e7d6      	b.n	8003584 <_malloc_r+0xa8>
 80035d6:	bf00      	nop
 80035d8:	20000690 	.word	0x20000690

080035dc <__malloc_lock>:
 80035dc:	4801      	ldr	r0, [pc, #4]	@ (80035e4 <__malloc_lock+0x8>)
 80035de:	f7ff bf01 	b.w	80033e4 <__retarget_lock_acquire_recursive>
 80035e2:	bf00      	nop
 80035e4:	20000688 	.word	0x20000688

080035e8 <__malloc_unlock>:
 80035e8:	4801      	ldr	r0, [pc, #4]	@ (80035f0 <__malloc_unlock+0x8>)
 80035ea:	f7ff befc 	b.w	80033e6 <__retarget_lock_release_recursive>
 80035ee:	bf00      	nop
 80035f0:	20000688 	.word	0x20000688

080035f4 <__ssputs_r>:
 80035f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f8:	688e      	ldr	r6, [r1, #8]
 80035fa:	461f      	mov	r7, r3
 80035fc:	42be      	cmp	r6, r7
 80035fe:	680b      	ldr	r3, [r1, #0]
 8003600:	4682      	mov	sl, r0
 8003602:	460c      	mov	r4, r1
 8003604:	4690      	mov	r8, r2
 8003606:	d82d      	bhi.n	8003664 <__ssputs_r+0x70>
 8003608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800360c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003610:	d026      	beq.n	8003660 <__ssputs_r+0x6c>
 8003612:	6965      	ldr	r5, [r4, #20]
 8003614:	6909      	ldr	r1, [r1, #16]
 8003616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800361a:	eba3 0901 	sub.w	r9, r3, r1
 800361e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003622:	1c7b      	adds	r3, r7, #1
 8003624:	444b      	add	r3, r9
 8003626:	106d      	asrs	r5, r5, #1
 8003628:	429d      	cmp	r5, r3
 800362a:	bf38      	it	cc
 800362c:	461d      	movcc	r5, r3
 800362e:	0553      	lsls	r3, r2, #21
 8003630:	d527      	bpl.n	8003682 <__ssputs_r+0x8e>
 8003632:	4629      	mov	r1, r5
 8003634:	f7ff ff52 	bl	80034dc <_malloc_r>
 8003638:	4606      	mov	r6, r0
 800363a:	b360      	cbz	r0, 8003696 <__ssputs_r+0xa2>
 800363c:	6921      	ldr	r1, [r4, #16]
 800363e:	464a      	mov	r2, r9
 8003640:	f7ff fed2 	bl	80033e8 <memcpy>
 8003644:	89a3      	ldrh	r3, [r4, #12]
 8003646:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800364a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800364e:	81a3      	strh	r3, [r4, #12]
 8003650:	6126      	str	r6, [r4, #16]
 8003652:	6165      	str	r5, [r4, #20]
 8003654:	444e      	add	r6, r9
 8003656:	eba5 0509 	sub.w	r5, r5, r9
 800365a:	6026      	str	r6, [r4, #0]
 800365c:	60a5      	str	r5, [r4, #8]
 800365e:	463e      	mov	r6, r7
 8003660:	42be      	cmp	r6, r7
 8003662:	d900      	bls.n	8003666 <__ssputs_r+0x72>
 8003664:	463e      	mov	r6, r7
 8003666:	6820      	ldr	r0, [r4, #0]
 8003668:	4632      	mov	r2, r6
 800366a:	4641      	mov	r1, r8
 800366c:	f7ff fe6e 	bl	800334c <memmove>
 8003670:	68a3      	ldr	r3, [r4, #8]
 8003672:	1b9b      	subs	r3, r3, r6
 8003674:	60a3      	str	r3, [r4, #8]
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	4433      	add	r3, r6
 800367a:	6023      	str	r3, [r4, #0]
 800367c:	2000      	movs	r0, #0
 800367e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003682:	462a      	mov	r2, r5
 8003684:	f000 faac 	bl	8003be0 <_realloc_r>
 8003688:	4606      	mov	r6, r0
 800368a:	2800      	cmp	r0, #0
 800368c:	d1e0      	bne.n	8003650 <__ssputs_r+0x5c>
 800368e:	6921      	ldr	r1, [r4, #16]
 8003690:	4650      	mov	r0, sl
 8003692:	f7ff feb7 	bl	8003404 <_free_r>
 8003696:	230c      	movs	r3, #12
 8003698:	f8ca 3000 	str.w	r3, [sl]
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036a2:	81a3      	strh	r3, [r4, #12]
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	e7e9      	b.n	800367e <__ssputs_r+0x8a>
	...

080036ac <_svfiprintf_r>:
 80036ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b0:	4698      	mov	r8, r3
 80036b2:	898b      	ldrh	r3, [r1, #12]
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	b09d      	sub	sp, #116	@ 0x74
 80036b8:	4607      	mov	r7, r0
 80036ba:	460d      	mov	r5, r1
 80036bc:	4614      	mov	r4, r2
 80036be:	d510      	bpl.n	80036e2 <_svfiprintf_r+0x36>
 80036c0:	690b      	ldr	r3, [r1, #16]
 80036c2:	b973      	cbnz	r3, 80036e2 <_svfiprintf_r+0x36>
 80036c4:	2140      	movs	r1, #64	@ 0x40
 80036c6:	f7ff ff09 	bl	80034dc <_malloc_r>
 80036ca:	6028      	str	r0, [r5, #0]
 80036cc:	6128      	str	r0, [r5, #16]
 80036ce:	b930      	cbnz	r0, 80036de <_svfiprintf_r+0x32>
 80036d0:	230c      	movs	r3, #12
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	b01d      	add	sp, #116	@ 0x74
 80036da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036de:	2340      	movs	r3, #64	@ 0x40
 80036e0:	616b      	str	r3, [r5, #20]
 80036e2:	2300      	movs	r3, #0
 80036e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80036e6:	2320      	movs	r3, #32
 80036e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80036f0:	2330      	movs	r3, #48	@ 0x30
 80036f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003890 <_svfiprintf_r+0x1e4>
 80036f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036fa:	f04f 0901 	mov.w	r9, #1
 80036fe:	4623      	mov	r3, r4
 8003700:	469a      	mov	sl, r3
 8003702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003706:	b10a      	cbz	r2, 800370c <_svfiprintf_r+0x60>
 8003708:	2a25      	cmp	r2, #37	@ 0x25
 800370a:	d1f9      	bne.n	8003700 <_svfiprintf_r+0x54>
 800370c:	ebba 0b04 	subs.w	fp, sl, r4
 8003710:	d00b      	beq.n	800372a <_svfiprintf_r+0x7e>
 8003712:	465b      	mov	r3, fp
 8003714:	4622      	mov	r2, r4
 8003716:	4629      	mov	r1, r5
 8003718:	4638      	mov	r0, r7
 800371a:	f7ff ff6b 	bl	80035f4 <__ssputs_r>
 800371e:	3001      	adds	r0, #1
 8003720:	f000 80a7 	beq.w	8003872 <_svfiprintf_r+0x1c6>
 8003724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003726:	445a      	add	r2, fp
 8003728:	9209      	str	r2, [sp, #36]	@ 0x24
 800372a:	f89a 3000 	ldrb.w	r3, [sl]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 809f 	beq.w	8003872 <_svfiprintf_r+0x1c6>
 8003734:	2300      	movs	r3, #0
 8003736:	f04f 32ff 	mov.w	r2, #4294967295
 800373a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800373e:	f10a 0a01 	add.w	sl, sl, #1
 8003742:	9304      	str	r3, [sp, #16]
 8003744:	9307      	str	r3, [sp, #28]
 8003746:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800374a:	931a      	str	r3, [sp, #104]	@ 0x68
 800374c:	4654      	mov	r4, sl
 800374e:	2205      	movs	r2, #5
 8003750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003754:	484e      	ldr	r0, [pc, #312]	@ (8003890 <_svfiprintf_r+0x1e4>)
 8003756:	f7fc fd43 	bl	80001e0 <memchr>
 800375a:	9a04      	ldr	r2, [sp, #16]
 800375c:	b9d8      	cbnz	r0, 8003796 <_svfiprintf_r+0xea>
 800375e:	06d0      	lsls	r0, r2, #27
 8003760:	bf44      	itt	mi
 8003762:	2320      	movmi	r3, #32
 8003764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003768:	0711      	lsls	r1, r2, #28
 800376a:	bf44      	itt	mi
 800376c:	232b      	movmi	r3, #43	@ 0x2b
 800376e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003772:	f89a 3000 	ldrb.w	r3, [sl]
 8003776:	2b2a      	cmp	r3, #42	@ 0x2a
 8003778:	d015      	beq.n	80037a6 <_svfiprintf_r+0xfa>
 800377a:	9a07      	ldr	r2, [sp, #28]
 800377c:	4654      	mov	r4, sl
 800377e:	2000      	movs	r0, #0
 8003780:	f04f 0c0a 	mov.w	ip, #10
 8003784:	4621      	mov	r1, r4
 8003786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800378a:	3b30      	subs	r3, #48	@ 0x30
 800378c:	2b09      	cmp	r3, #9
 800378e:	d94b      	bls.n	8003828 <_svfiprintf_r+0x17c>
 8003790:	b1b0      	cbz	r0, 80037c0 <_svfiprintf_r+0x114>
 8003792:	9207      	str	r2, [sp, #28]
 8003794:	e014      	b.n	80037c0 <_svfiprintf_r+0x114>
 8003796:	eba0 0308 	sub.w	r3, r0, r8
 800379a:	fa09 f303 	lsl.w	r3, r9, r3
 800379e:	4313      	orrs	r3, r2
 80037a0:	9304      	str	r3, [sp, #16]
 80037a2:	46a2      	mov	sl, r4
 80037a4:	e7d2      	b.n	800374c <_svfiprintf_r+0xa0>
 80037a6:	9b03      	ldr	r3, [sp, #12]
 80037a8:	1d19      	adds	r1, r3, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	9103      	str	r1, [sp, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	bfbb      	ittet	lt
 80037b2:	425b      	neglt	r3, r3
 80037b4:	f042 0202 	orrlt.w	r2, r2, #2
 80037b8:	9307      	strge	r3, [sp, #28]
 80037ba:	9307      	strlt	r3, [sp, #28]
 80037bc:	bfb8      	it	lt
 80037be:	9204      	strlt	r2, [sp, #16]
 80037c0:	7823      	ldrb	r3, [r4, #0]
 80037c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80037c4:	d10a      	bne.n	80037dc <_svfiprintf_r+0x130>
 80037c6:	7863      	ldrb	r3, [r4, #1]
 80037c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80037ca:	d132      	bne.n	8003832 <_svfiprintf_r+0x186>
 80037cc:	9b03      	ldr	r3, [sp, #12]
 80037ce:	1d1a      	adds	r2, r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	9203      	str	r2, [sp, #12]
 80037d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037d8:	3402      	adds	r4, #2
 80037da:	9305      	str	r3, [sp, #20]
 80037dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80038a0 <_svfiprintf_r+0x1f4>
 80037e0:	7821      	ldrb	r1, [r4, #0]
 80037e2:	2203      	movs	r2, #3
 80037e4:	4650      	mov	r0, sl
 80037e6:	f7fc fcfb 	bl	80001e0 <memchr>
 80037ea:	b138      	cbz	r0, 80037fc <_svfiprintf_r+0x150>
 80037ec:	9b04      	ldr	r3, [sp, #16]
 80037ee:	eba0 000a 	sub.w	r0, r0, sl
 80037f2:	2240      	movs	r2, #64	@ 0x40
 80037f4:	4082      	lsls	r2, r0
 80037f6:	4313      	orrs	r3, r2
 80037f8:	3401      	adds	r4, #1
 80037fa:	9304      	str	r3, [sp, #16]
 80037fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003800:	4824      	ldr	r0, [pc, #144]	@ (8003894 <_svfiprintf_r+0x1e8>)
 8003802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003806:	2206      	movs	r2, #6
 8003808:	f7fc fcea 	bl	80001e0 <memchr>
 800380c:	2800      	cmp	r0, #0
 800380e:	d036      	beq.n	800387e <_svfiprintf_r+0x1d2>
 8003810:	4b21      	ldr	r3, [pc, #132]	@ (8003898 <_svfiprintf_r+0x1ec>)
 8003812:	bb1b      	cbnz	r3, 800385c <_svfiprintf_r+0x1b0>
 8003814:	9b03      	ldr	r3, [sp, #12]
 8003816:	3307      	adds	r3, #7
 8003818:	f023 0307 	bic.w	r3, r3, #7
 800381c:	3308      	adds	r3, #8
 800381e:	9303      	str	r3, [sp, #12]
 8003820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003822:	4433      	add	r3, r6
 8003824:	9309      	str	r3, [sp, #36]	@ 0x24
 8003826:	e76a      	b.n	80036fe <_svfiprintf_r+0x52>
 8003828:	fb0c 3202 	mla	r2, ip, r2, r3
 800382c:	460c      	mov	r4, r1
 800382e:	2001      	movs	r0, #1
 8003830:	e7a8      	b.n	8003784 <_svfiprintf_r+0xd8>
 8003832:	2300      	movs	r3, #0
 8003834:	3401      	adds	r4, #1
 8003836:	9305      	str	r3, [sp, #20]
 8003838:	4619      	mov	r1, r3
 800383a:	f04f 0c0a 	mov.w	ip, #10
 800383e:	4620      	mov	r0, r4
 8003840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003844:	3a30      	subs	r2, #48	@ 0x30
 8003846:	2a09      	cmp	r2, #9
 8003848:	d903      	bls.n	8003852 <_svfiprintf_r+0x1a6>
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0c6      	beq.n	80037dc <_svfiprintf_r+0x130>
 800384e:	9105      	str	r1, [sp, #20]
 8003850:	e7c4      	b.n	80037dc <_svfiprintf_r+0x130>
 8003852:	fb0c 2101 	mla	r1, ip, r1, r2
 8003856:	4604      	mov	r4, r0
 8003858:	2301      	movs	r3, #1
 800385a:	e7f0      	b.n	800383e <_svfiprintf_r+0x192>
 800385c:	ab03      	add	r3, sp, #12
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	462a      	mov	r2, r5
 8003862:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <_svfiprintf_r+0x1f0>)
 8003864:	a904      	add	r1, sp, #16
 8003866:	4638      	mov	r0, r7
 8003868:	f3af 8000 	nop.w
 800386c:	1c42      	adds	r2, r0, #1
 800386e:	4606      	mov	r6, r0
 8003870:	d1d6      	bne.n	8003820 <_svfiprintf_r+0x174>
 8003872:	89ab      	ldrh	r3, [r5, #12]
 8003874:	065b      	lsls	r3, r3, #25
 8003876:	f53f af2d 	bmi.w	80036d4 <_svfiprintf_r+0x28>
 800387a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800387c:	e72c      	b.n	80036d8 <_svfiprintf_r+0x2c>
 800387e:	ab03      	add	r3, sp, #12
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	462a      	mov	r2, r5
 8003884:	4b05      	ldr	r3, [pc, #20]	@ (800389c <_svfiprintf_r+0x1f0>)
 8003886:	a904      	add	r1, sp, #16
 8003888:	4638      	mov	r0, r7
 800388a:	f000 f879 	bl	8003980 <_printf_i>
 800388e:	e7ed      	b.n	800386c <_svfiprintf_r+0x1c0>
 8003890:	080063fc 	.word	0x080063fc
 8003894:	08006406 	.word	0x08006406
 8003898:	00000000 	.word	0x00000000
 800389c:	080035f5 	.word	0x080035f5
 80038a0:	08006402 	.word	0x08006402

080038a4 <_printf_common>:
 80038a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a8:	4616      	mov	r6, r2
 80038aa:	4698      	mov	r8, r3
 80038ac:	688a      	ldr	r2, [r1, #8]
 80038ae:	690b      	ldr	r3, [r1, #16]
 80038b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038b4:	4293      	cmp	r3, r2
 80038b6:	bfb8      	it	lt
 80038b8:	4613      	movlt	r3, r2
 80038ba:	6033      	str	r3, [r6, #0]
 80038bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038c0:	4607      	mov	r7, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	b10a      	cbz	r2, 80038ca <_printf_common+0x26>
 80038c6:	3301      	adds	r3, #1
 80038c8:	6033      	str	r3, [r6, #0]
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	0699      	lsls	r1, r3, #26
 80038ce:	bf42      	ittt	mi
 80038d0:	6833      	ldrmi	r3, [r6, #0]
 80038d2:	3302      	addmi	r3, #2
 80038d4:	6033      	strmi	r3, [r6, #0]
 80038d6:	6825      	ldr	r5, [r4, #0]
 80038d8:	f015 0506 	ands.w	r5, r5, #6
 80038dc:	d106      	bne.n	80038ec <_printf_common+0x48>
 80038de:	f104 0a19 	add.w	sl, r4, #25
 80038e2:	68e3      	ldr	r3, [r4, #12]
 80038e4:	6832      	ldr	r2, [r6, #0]
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	42ab      	cmp	r3, r5
 80038ea:	dc26      	bgt.n	800393a <_printf_common+0x96>
 80038ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038f0:	6822      	ldr	r2, [r4, #0]
 80038f2:	3b00      	subs	r3, #0
 80038f4:	bf18      	it	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	0692      	lsls	r2, r2, #26
 80038fa:	d42b      	bmi.n	8003954 <_printf_common+0xb0>
 80038fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003900:	4641      	mov	r1, r8
 8003902:	4638      	mov	r0, r7
 8003904:	47c8      	blx	r9
 8003906:	3001      	adds	r0, #1
 8003908:	d01e      	beq.n	8003948 <_printf_common+0xa4>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	6922      	ldr	r2, [r4, #16]
 800390e:	f003 0306 	and.w	r3, r3, #6
 8003912:	2b04      	cmp	r3, #4
 8003914:	bf02      	ittt	eq
 8003916:	68e5      	ldreq	r5, [r4, #12]
 8003918:	6833      	ldreq	r3, [r6, #0]
 800391a:	1aed      	subeq	r5, r5, r3
 800391c:	68a3      	ldr	r3, [r4, #8]
 800391e:	bf0c      	ite	eq
 8003920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003924:	2500      	movne	r5, #0
 8003926:	4293      	cmp	r3, r2
 8003928:	bfc4      	itt	gt
 800392a:	1a9b      	subgt	r3, r3, r2
 800392c:	18ed      	addgt	r5, r5, r3
 800392e:	2600      	movs	r6, #0
 8003930:	341a      	adds	r4, #26
 8003932:	42b5      	cmp	r5, r6
 8003934:	d11a      	bne.n	800396c <_printf_common+0xc8>
 8003936:	2000      	movs	r0, #0
 8003938:	e008      	b.n	800394c <_printf_common+0xa8>
 800393a:	2301      	movs	r3, #1
 800393c:	4652      	mov	r2, sl
 800393e:	4641      	mov	r1, r8
 8003940:	4638      	mov	r0, r7
 8003942:	47c8      	blx	r9
 8003944:	3001      	adds	r0, #1
 8003946:	d103      	bne.n	8003950 <_printf_common+0xac>
 8003948:	f04f 30ff 	mov.w	r0, #4294967295
 800394c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003950:	3501      	adds	r5, #1
 8003952:	e7c6      	b.n	80038e2 <_printf_common+0x3e>
 8003954:	18e1      	adds	r1, r4, r3
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	2030      	movs	r0, #48	@ 0x30
 800395a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800395e:	4422      	add	r2, r4
 8003960:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003968:	3302      	adds	r3, #2
 800396a:	e7c7      	b.n	80038fc <_printf_common+0x58>
 800396c:	2301      	movs	r3, #1
 800396e:	4622      	mov	r2, r4
 8003970:	4641      	mov	r1, r8
 8003972:	4638      	mov	r0, r7
 8003974:	47c8      	blx	r9
 8003976:	3001      	adds	r0, #1
 8003978:	d0e6      	beq.n	8003948 <_printf_common+0xa4>
 800397a:	3601      	adds	r6, #1
 800397c:	e7d9      	b.n	8003932 <_printf_common+0x8e>
	...

08003980 <_printf_i>:
 8003980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003984:	7e0f      	ldrb	r7, [r1, #24]
 8003986:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003988:	2f78      	cmp	r7, #120	@ 0x78
 800398a:	4691      	mov	r9, r2
 800398c:	4680      	mov	r8, r0
 800398e:	460c      	mov	r4, r1
 8003990:	469a      	mov	sl, r3
 8003992:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003996:	d807      	bhi.n	80039a8 <_printf_i+0x28>
 8003998:	2f62      	cmp	r7, #98	@ 0x62
 800399a:	d80a      	bhi.n	80039b2 <_printf_i+0x32>
 800399c:	2f00      	cmp	r7, #0
 800399e:	f000 80d2 	beq.w	8003b46 <_printf_i+0x1c6>
 80039a2:	2f58      	cmp	r7, #88	@ 0x58
 80039a4:	f000 80b9 	beq.w	8003b1a <_printf_i+0x19a>
 80039a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039b0:	e03a      	b.n	8003a28 <_printf_i+0xa8>
 80039b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039b6:	2b15      	cmp	r3, #21
 80039b8:	d8f6      	bhi.n	80039a8 <_printf_i+0x28>
 80039ba:	a101      	add	r1, pc, #4	@ (adr r1, 80039c0 <_printf_i+0x40>)
 80039bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039c0:	08003a19 	.word	0x08003a19
 80039c4:	08003a2d 	.word	0x08003a2d
 80039c8:	080039a9 	.word	0x080039a9
 80039cc:	080039a9 	.word	0x080039a9
 80039d0:	080039a9 	.word	0x080039a9
 80039d4:	080039a9 	.word	0x080039a9
 80039d8:	08003a2d 	.word	0x08003a2d
 80039dc:	080039a9 	.word	0x080039a9
 80039e0:	080039a9 	.word	0x080039a9
 80039e4:	080039a9 	.word	0x080039a9
 80039e8:	080039a9 	.word	0x080039a9
 80039ec:	08003b2d 	.word	0x08003b2d
 80039f0:	08003a57 	.word	0x08003a57
 80039f4:	08003ae7 	.word	0x08003ae7
 80039f8:	080039a9 	.word	0x080039a9
 80039fc:	080039a9 	.word	0x080039a9
 8003a00:	08003b4f 	.word	0x08003b4f
 8003a04:	080039a9 	.word	0x080039a9
 8003a08:	08003a57 	.word	0x08003a57
 8003a0c:	080039a9 	.word	0x080039a9
 8003a10:	080039a9 	.word	0x080039a9
 8003a14:	08003aef 	.word	0x08003aef
 8003a18:	6833      	ldr	r3, [r6, #0]
 8003a1a:	1d1a      	adds	r2, r3, #4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6032      	str	r2, [r6, #0]
 8003a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e09d      	b.n	8003b68 <_printf_i+0x1e8>
 8003a2c:	6833      	ldr	r3, [r6, #0]
 8003a2e:	6820      	ldr	r0, [r4, #0]
 8003a30:	1d19      	adds	r1, r3, #4
 8003a32:	6031      	str	r1, [r6, #0]
 8003a34:	0606      	lsls	r6, r0, #24
 8003a36:	d501      	bpl.n	8003a3c <_printf_i+0xbc>
 8003a38:	681d      	ldr	r5, [r3, #0]
 8003a3a:	e003      	b.n	8003a44 <_printf_i+0xc4>
 8003a3c:	0645      	lsls	r5, r0, #25
 8003a3e:	d5fb      	bpl.n	8003a38 <_printf_i+0xb8>
 8003a40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a44:	2d00      	cmp	r5, #0
 8003a46:	da03      	bge.n	8003a50 <_printf_i+0xd0>
 8003a48:	232d      	movs	r3, #45	@ 0x2d
 8003a4a:	426d      	negs	r5, r5
 8003a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a50:	4859      	ldr	r0, [pc, #356]	@ (8003bb8 <_printf_i+0x238>)
 8003a52:	230a      	movs	r3, #10
 8003a54:	e011      	b.n	8003a7a <_printf_i+0xfa>
 8003a56:	6821      	ldr	r1, [r4, #0]
 8003a58:	6833      	ldr	r3, [r6, #0]
 8003a5a:	0608      	lsls	r0, r1, #24
 8003a5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a60:	d402      	bmi.n	8003a68 <_printf_i+0xe8>
 8003a62:	0649      	lsls	r1, r1, #25
 8003a64:	bf48      	it	mi
 8003a66:	b2ad      	uxthmi	r5, r5
 8003a68:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a6a:	4853      	ldr	r0, [pc, #332]	@ (8003bb8 <_printf_i+0x238>)
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	bf14      	ite	ne
 8003a70:	230a      	movne	r3, #10
 8003a72:	2308      	moveq	r3, #8
 8003a74:	2100      	movs	r1, #0
 8003a76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a7a:	6866      	ldr	r6, [r4, #4]
 8003a7c:	60a6      	str	r6, [r4, #8]
 8003a7e:	2e00      	cmp	r6, #0
 8003a80:	bfa2      	ittt	ge
 8003a82:	6821      	ldrge	r1, [r4, #0]
 8003a84:	f021 0104 	bicge.w	r1, r1, #4
 8003a88:	6021      	strge	r1, [r4, #0]
 8003a8a:	b90d      	cbnz	r5, 8003a90 <_printf_i+0x110>
 8003a8c:	2e00      	cmp	r6, #0
 8003a8e:	d04b      	beq.n	8003b28 <_printf_i+0x1a8>
 8003a90:	4616      	mov	r6, r2
 8003a92:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a96:	fb03 5711 	mls	r7, r3, r1, r5
 8003a9a:	5dc7      	ldrb	r7, [r0, r7]
 8003a9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003aa0:	462f      	mov	r7, r5
 8003aa2:	42bb      	cmp	r3, r7
 8003aa4:	460d      	mov	r5, r1
 8003aa6:	d9f4      	bls.n	8003a92 <_printf_i+0x112>
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d10b      	bne.n	8003ac4 <_printf_i+0x144>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	07df      	lsls	r7, r3, #31
 8003ab0:	d508      	bpl.n	8003ac4 <_printf_i+0x144>
 8003ab2:	6923      	ldr	r3, [r4, #16]
 8003ab4:	6861      	ldr	r1, [r4, #4]
 8003ab6:	4299      	cmp	r1, r3
 8003ab8:	bfde      	ittt	le
 8003aba:	2330      	movle	r3, #48	@ 0x30
 8003abc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ac0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ac4:	1b92      	subs	r2, r2, r6
 8003ac6:	6122      	str	r2, [r4, #16]
 8003ac8:	f8cd a000 	str.w	sl, [sp]
 8003acc:	464b      	mov	r3, r9
 8003ace:	aa03      	add	r2, sp, #12
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	f7ff fee6 	bl	80038a4 <_printf_common>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d14a      	bne.n	8003b72 <_printf_i+0x1f2>
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	b004      	add	sp, #16
 8003ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	f043 0320 	orr.w	r3, r3, #32
 8003aec:	6023      	str	r3, [r4, #0]
 8003aee:	4833      	ldr	r0, [pc, #204]	@ (8003bbc <_printf_i+0x23c>)
 8003af0:	2778      	movs	r7, #120	@ 0x78
 8003af2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	6831      	ldr	r1, [r6, #0]
 8003afa:	061f      	lsls	r7, r3, #24
 8003afc:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b00:	d402      	bmi.n	8003b08 <_printf_i+0x188>
 8003b02:	065f      	lsls	r7, r3, #25
 8003b04:	bf48      	it	mi
 8003b06:	b2ad      	uxthmi	r5, r5
 8003b08:	6031      	str	r1, [r6, #0]
 8003b0a:	07d9      	lsls	r1, r3, #31
 8003b0c:	bf44      	itt	mi
 8003b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b12:	6023      	strmi	r3, [r4, #0]
 8003b14:	b11d      	cbz	r5, 8003b1e <_printf_i+0x19e>
 8003b16:	2310      	movs	r3, #16
 8003b18:	e7ac      	b.n	8003a74 <_printf_i+0xf4>
 8003b1a:	4827      	ldr	r0, [pc, #156]	@ (8003bb8 <_printf_i+0x238>)
 8003b1c:	e7e9      	b.n	8003af2 <_printf_i+0x172>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	f023 0320 	bic.w	r3, r3, #32
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	e7f6      	b.n	8003b16 <_printf_i+0x196>
 8003b28:	4616      	mov	r6, r2
 8003b2a:	e7bd      	b.n	8003aa8 <_printf_i+0x128>
 8003b2c:	6833      	ldr	r3, [r6, #0]
 8003b2e:	6825      	ldr	r5, [r4, #0]
 8003b30:	6961      	ldr	r1, [r4, #20]
 8003b32:	1d18      	adds	r0, r3, #4
 8003b34:	6030      	str	r0, [r6, #0]
 8003b36:	062e      	lsls	r6, r5, #24
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	d501      	bpl.n	8003b40 <_printf_i+0x1c0>
 8003b3c:	6019      	str	r1, [r3, #0]
 8003b3e:	e002      	b.n	8003b46 <_printf_i+0x1c6>
 8003b40:	0668      	lsls	r0, r5, #25
 8003b42:	d5fb      	bpl.n	8003b3c <_printf_i+0x1bc>
 8003b44:	8019      	strh	r1, [r3, #0]
 8003b46:	2300      	movs	r3, #0
 8003b48:	6123      	str	r3, [r4, #16]
 8003b4a:	4616      	mov	r6, r2
 8003b4c:	e7bc      	b.n	8003ac8 <_printf_i+0x148>
 8003b4e:	6833      	ldr	r3, [r6, #0]
 8003b50:	1d1a      	adds	r2, r3, #4
 8003b52:	6032      	str	r2, [r6, #0]
 8003b54:	681e      	ldr	r6, [r3, #0]
 8003b56:	6862      	ldr	r2, [r4, #4]
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f7fc fb40 	bl	80001e0 <memchr>
 8003b60:	b108      	cbz	r0, 8003b66 <_printf_i+0x1e6>
 8003b62:	1b80      	subs	r0, r0, r6
 8003b64:	6060      	str	r0, [r4, #4]
 8003b66:	6863      	ldr	r3, [r4, #4]
 8003b68:	6123      	str	r3, [r4, #16]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b70:	e7aa      	b.n	8003ac8 <_printf_i+0x148>
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	4632      	mov	r2, r6
 8003b76:	4649      	mov	r1, r9
 8003b78:	4640      	mov	r0, r8
 8003b7a:	47d0      	blx	sl
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d0ad      	beq.n	8003adc <_printf_i+0x15c>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	079b      	lsls	r3, r3, #30
 8003b84:	d413      	bmi.n	8003bae <_printf_i+0x22e>
 8003b86:	68e0      	ldr	r0, [r4, #12]
 8003b88:	9b03      	ldr	r3, [sp, #12]
 8003b8a:	4298      	cmp	r0, r3
 8003b8c:	bfb8      	it	lt
 8003b8e:	4618      	movlt	r0, r3
 8003b90:	e7a6      	b.n	8003ae0 <_printf_i+0x160>
 8003b92:	2301      	movs	r3, #1
 8003b94:	4632      	mov	r2, r6
 8003b96:	4649      	mov	r1, r9
 8003b98:	4640      	mov	r0, r8
 8003b9a:	47d0      	blx	sl
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d09d      	beq.n	8003adc <_printf_i+0x15c>
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	68e3      	ldr	r3, [r4, #12]
 8003ba4:	9903      	ldr	r1, [sp, #12]
 8003ba6:	1a5b      	subs	r3, r3, r1
 8003ba8:	42ab      	cmp	r3, r5
 8003baa:	dcf2      	bgt.n	8003b92 <_printf_i+0x212>
 8003bac:	e7eb      	b.n	8003b86 <_printf_i+0x206>
 8003bae:	2500      	movs	r5, #0
 8003bb0:	f104 0619 	add.w	r6, r4, #25
 8003bb4:	e7f5      	b.n	8003ba2 <_printf_i+0x222>
 8003bb6:	bf00      	nop
 8003bb8:	0800640d 	.word	0x0800640d
 8003bbc:	0800641e 	.word	0x0800641e

08003bc0 <_sbrk_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4d06      	ldr	r5, [pc, #24]	@ (8003bdc <_sbrk_r+0x1c>)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	4608      	mov	r0, r1
 8003bca:	602b      	str	r3, [r5, #0]
 8003bcc:	f7fd ff08 	bl	80019e0 <_sbrk>
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	d102      	bne.n	8003bda <_sbrk_r+0x1a>
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	b103      	cbz	r3, 8003bda <_sbrk_r+0x1a>
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	bd38      	pop	{r3, r4, r5, pc}
 8003bdc:	20000684 	.word	0x20000684

08003be0 <_realloc_r>:
 8003be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be4:	4680      	mov	r8, r0
 8003be6:	4615      	mov	r5, r2
 8003be8:	460c      	mov	r4, r1
 8003bea:	b921      	cbnz	r1, 8003bf6 <_realloc_r+0x16>
 8003bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	f7ff bc73 	b.w	80034dc <_malloc_r>
 8003bf6:	b92a      	cbnz	r2, 8003c04 <_realloc_r+0x24>
 8003bf8:	f7ff fc04 	bl	8003404 <_free_r>
 8003bfc:	2400      	movs	r4, #0
 8003bfe:	4620      	mov	r0, r4
 8003c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c04:	f000 f81a 	bl	8003c3c <_malloc_usable_size_r>
 8003c08:	4285      	cmp	r5, r0
 8003c0a:	4606      	mov	r6, r0
 8003c0c:	d802      	bhi.n	8003c14 <_realloc_r+0x34>
 8003c0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003c12:	d8f4      	bhi.n	8003bfe <_realloc_r+0x1e>
 8003c14:	4629      	mov	r1, r5
 8003c16:	4640      	mov	r0, r8
 8003c18:	f7ff fc60 	bl	80034dc <_malloc_r>
 8003c1c:	4607      	mov	r7, r0
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d0ec      	beq.n	8003bfc <_realloc_r+0x1c>
 8003c22:	42b5      	cmp	r5, r6
 8003c24:	462a      	mov	r2, r5
 8003c26:	4621      	mov	r1, r4
 8003c28:	bf28      	it	cs
 8003c2a:	4632      	movcs	r2, r6
 8003c2c:	f7ff fbdc 	bl	80033e8 <memcpy>
 8003c30:	4621      	mov	r1, r4
 8003c32:	4640      	mov	r0, r8
 8003c34:	f7ff fbe6 	bl	8003404 <_free_r>
 8003c38:	463c      	mov	r4, r7
 8003c3a:	e7e0      	b.n	8003bfe <_realloc_r+0x1e>

08003c3c <_malloc_usable_size_r>:
 8003c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c40:	1f18      	subs	r0, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bfbc      	itt	lt
 8003c46:	580b      	ldrlt	r3, [r1, r0]
 8003c48:	18c0      	addlt	r0, r0, r3
 8003c4a:	4770      	bx	lr

08003c4c <_init>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr

08003c58 <_fini>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr
