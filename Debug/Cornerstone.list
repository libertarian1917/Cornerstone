
Cornerstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003658  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002178  080037f8  080037f8  000047f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005970  08005970  000070a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005970  08005970  00006970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005978  08005978  000070a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005978  08005978  00006978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800597c  0800597c  0000697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08005980  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  200000a0  08005a20  000070a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08005a20  00007680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088a5  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5d  00000000  00000000  0000f975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  000113d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000068f  00000000  00000000  00011c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162d3  00000000  00000000  0001230f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c370  00000000  00000000  000285e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e52  00000000  00000000  00034952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb7a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c4  00000000  00000000  000bb7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000bdfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037e0 	.word	0x080037e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	080037e0 	.word	0x080037e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <getTimeFromMS>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getTimeFromMS(unsigned int *ms, int **clock) {
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	int hours = *ms / 3600000;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a1e      	ldr	r2, [pc, #120]	@ (80005f8 <getTimeFromMS+0x88>)
 8000580:	fba2 2303 	umull	r2, r3, r2, r3
 8000584:	0d5b      	lsrs	r3, r3, #21
 8000586:	617b      	str	r3, [r7, #20]
	int minutes = (*ms % 3600000) / 60000;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <getTimeFromMS+0x88>)
 800058e:	fba3 1302 	umull	r1, r3, r3, r2
 8000592:	0d5b      	lsrs	r3, r3, #21
 8000594:	4919      	ldr	r1, [pc, #100]	@ (80005fc <getTimeFromMS+0x8c>)
 8000596:	fb01 f303 	mul.w	r3, r1, r3
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	4a18      	ldr	r2, [pc, #96]	@ (8000600 <getTimeFromMS+0x90>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	0b9b      	lsrs	r3, r3, #14
 80005a4:	613b      	str	r3, [r7, #16]
	int days = *ms /86400000;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a16      	ldr	r2, [pc, #88]	@ (8000604 <getTimeFromMS+0x94>)
 80005ac:	fba2 2303 	umull	r2, r3, r2, r3
 80005b0:	0e1b      	lsrs	r3, r3, #24
 80005b2:	60fb      	str	r3, [r7, #12]
	//int seconds = ((*ms % 3600000) % 60000) / 1000;
	if(hours > 96) {
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	2b60      	cmp	r3, #96	@ 0x60
 80005b8:	dd0a      	ble.n	80005d0 <getTimeFromMS+0x60>
		clock[0] = days;
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	601a      	str	r2, [r3, #0]
		clock[1] = hours;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	3304      	adds	r3, #4
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	601a      	str	r2, [r3, #0]
		first_time_unit = D;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <getTimeFromMS+0x98>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
	}
	/*else if(hours == 0) {
		clock[0] = minutes;
		clock[1] = seconds;
	}*/
}
 80005ce:	e00c      	b.n	80005ea <getTimeFromMS+0x7a>
	else if(hours > 0) {
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dd09      	ble.n	80005ea <getTimeFromMS+0x7a>
		clock[0] = hours;
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	601a      	str	r2, [r3, #0]
		clock[1] = minutes;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	3304      	adds	r3, #4
 80005e0:	693a      	ldr	r2, [r7, #16]
 80005e2:	601a      	str	r2, [r3, #0]
		first_time_unit = H;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <getTimeFromMS+0x98>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	95217cb1 	.word	0x95217cb1
 80005fc:	0036ee80 	.word	0x0036ee80
 8000600:	45e7b273 	.word	0x45e7b273
 8000604:	31b5d43b 	.word	0x31b5d43b
 8000608:	20000020 	.word	0x20000020

0800060c <ApplyNewInterval>:

void ApplyNewInterval() {
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	Interval = NewInterval;
 8000610:	4b04      	ldr	r3, [pc, #16]	@ (8000624 <ApplyNewInterval+0x18>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <ApplyNewInterval+0x1c>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000028 	.word	0x20000028
 8000628:	20000024 	.word	0x20000024

0800062c <ApplyNewDuration>:

void ApplyNewDuration() {
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	Duration = NewDuration;
 8000630:	4b04      	ldr	r3, [pc, #16]	@ (8000644 <ApplyNewDuration+0x18>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <ApplyNewDuration+0x1c>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000034 	.word	0x20000034
 8000648:	20000030 	.word	0x20000030

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f001 f81c 	bl	800168c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 fa76 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 fb00 	bl	8000c5c <MX_GPIO_Init>
  MX_I2C1_Init();
 800065c:	f000 fad0 	bl	8000c00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000660:	f000 fb56 	bl	8000d10 <ssd1306_Init>
  while (1)
  {
	/* USER CODE BEGIN WHILE */

	  // UP - BEGIN
	  HAL_Delay(100);
 8000664:	2064      	movs	r0, #100	@ 0x64
 8000666:	f001 f883 	bl	8001770 <HAL_Delay>
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET)
 800066a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066e:	4894      	ldr	r0, [pc, #592]	@ (80008c0 <main+0x274>)
 8000670:	f001 fb0c 	bl	8001c8c <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d106      	bne.n	8000688 <main+0x3c>
      {
		  pressedUpButton = true;
 800067a:	4b92      	ldr	r3, [pc, #584]	@ (80008c4 <main+0x278>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
		  DisplayShutDownTime = 0;
 8000680:	4b91      	ldr	r3, [pc, #580]	@ (80008c8 <main+0x27c>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
		  continue;
 8000686:	e247      	b.n	8000b18 <main+0x4cc>
      }
	  else if (pressedUpButton == true)
 8000688:	4b8e      	ldr	r3, [pc, #568]	@ (80008c4 <main+0x278>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d077      	beq.n	8000780 <main+0x134>
	  {
		  pressedUpButton = false;
 8000690:	4b8c      	ldr	r3, [pc, #560]	@ (80008c4 <main+0x278>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]

		  if(setting_option == MENU) {
 8000696:	4b8d      	ldr	r3, [pc, #564]	@ (80008cc <main+0x280>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d11b      	bne.n	80006d6 <main+0x8a>
			  if(menu_option > 0) {
 800069e:	4b8c      	ldr	r3, [pc, #560]	@ (80008d0 <main+0x284>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f000 8231 	beq.w	8000b0a <main+0x4be>
				  menu_option --;
 80006a8:	4b89      	ldr	r3, [pc, #548]	@ (80008d0 <main+0x284>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	4a88      	ldr	r2, [pc, #544]	@ (80008d0 <main+0x284>)
 80006b0:	6013      	str	r3, [r2, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 80006b2:	4b87      	ldr	r3, [pc, #540]	@ (80008d0 <main+0x284>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b86      	ldr	r3, [pc, #536]	@ (80008d4 <main+0x288>)
 80006ba:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80006be:	4b84      	ldr	r3, [pc, #528]	@ (80008d0 <main+0x284>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a84      	ldr	r2, [pc, #528]	@ (80008d4 <main+0x288>)
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	4413      	add	r3, r2
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	4a81      	ldr	r2, [pc, #516]	@ (80008d0 <main+0x284>)
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	4619      	mov	r1, r3
 80006d0:	f000 fdc4 	bl	800125c <ssd1306_TestMenu>
			  }
			  getTimeFromMS(&Duration, timeBar);
			  ssd1306_TestDurationSetting(&Duration);
		  }

		  continue;
 80006d4:	e219      	b.n	8000b0a <main+0x4be>
		  else if(*setting_option == INTERVAL_SETTING) {
 80006d6:	4b7d      	ldr	r3, [pc, #500]	@ (80008cc <main+0x280>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d133      	bne.n	8000748 <main+0xfc>
			  if(intervalSection == HOURS) {
 80006e0:	4b7d      	ldr	r3, [pc, #500]	@ (80008d8 <main+0x28c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d112      	bne.n	800070e <main+0xc2>
				  if(Interval + 3600000 <= MaxInterval) {
 80006e8:	4b7c      	ldr	r3, [pc, #496]	@ (80008dc <main+0x290>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f503 135b 	add.w	r3, r3, #3588096	@ 0x36c000
 80006f0:	f503 533a 	add.w	r3, r3, #11904	@ 0x2e80
 80006f4:	4a7a      	ldr	r2, [pc, #488]	@ (80008e0 <main+0x294>)
 80006f6:	6812      	ldr	r2, [r2, #0]
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d81c      	bhi.n	8000736 <main+0xea>
					  Interval += 3600000;
 80006fc:	4b77      	ldr	r3, [pc, #476]	@ (80008dc <main+0x290>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f503 135b 	add.w	r3, r3, #3588096	@ 0x36c000
 8000704:	f503 533a 	add.w	r3, r3, #11904	@ 0x2e80
 8000708:	4a74      	ldr	r2, [pc, #464]	@ (80008dc <main+0x290>)
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	e013      	b.n	8000736 <main+0xea>
			  else if(intervalSection == MINUTES) {
 800070e:	4b72      	ldr	r3, [pc, #456]	@ (80008d8 <main+0x28c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d10f      	bne.n	8000736 <main+0xea>
				  if(Interval + 60000 <= MaxInterval) {
 8000716:	4b71      	ldr	r3, [pc, #452]	@ (80008dc <main+0x290>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 800071e:	3360      	adds	r3, #96	@ 0x60
 8000720:	4a6f      	ldr	r2, [pc, #444]	@ (80008e0 <main+0x294>)
 8000722:	6812      	ldr	r2, [r2, #0]
 8000724:	4293      	cmp	r3, r2
 8000726:	d806      	bhi.n	8000736 <main+0xea>
					  Interval += 60000;
 8000728:	4b6c      	ldr	r3, [pc, #432]	@ (80008dc <main+0x290>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8000730:	3360      	adds	r3, #96	@ 0x60
 8000732:	4a6a      	ldr	r2, [pc, #424]	@ (80008dc <main+0x290>)
 8000734:	6013      	str	r3, [r2, #0]
			  getTimeFromMS(&Interval, timeBar);
 8000736:	496b      	ldr	r1, [pc, #428]	@ (80008e4 <main+0x298>)
 8000738:	4868      	ldr	r0, [pc, #416]	@ (80008dc <main+0x290>)
 800073a:	f7ff ff19 	bl	8000570 <getTimeFromMS>
			  ssd1306_TestIntervalSetting(timeBar, &Interval);
 800073e:	4967      	ldr	r1, [pc, #412]	@ (80008dc <main+0x290>)
 8000740:	4868      	ldr	r0, [pc, #416]	@ (80008e4 <main+0x298>)
 8000742:	f000 fdd1 	bl	80012e8 <ssd1306_TestIntervalSetting>
		  continue;
 8000746:	e1e0      	b.n	8000b0a <main+0x4be>
		  else if(setting_option == DURATION_SETTING) {
 8000748:	4b60      	ldr	r3, [pc, #384]	@ (80008cc <main+0x280>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b02      	cmp	r3, #2
 800074e:	f040 81dc 	bne.w	8000b0a <main+0x4be>
			  if(durationSection == SECONDS) {
 8000752:	4b65      	ldr	r3, [pc, #404]	@ (80008e8 <main+0x29c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10a      	bne.n	8000770 <main+0x124>
				  if(Duration <= MaxDuration) {
 800075a:	4b64      	ldr	r3, [pc, #400]	@ (80008ec <main+0x2a0>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b64      	ldr	r3, [pc, #400]	@ (80008f0 <main+0x2a4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d804      	bhi.n	8000770 <main+0x124>
					  Duration ++;
 8000766:	4b61      	ldr	r3, [pc, #388]	@ (80008ec <main+0x2a0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	4a5f      	ldr	r2, [pc, #380]	@ (80008ec <main+0x2a0>)
 800076e:	6013      	str	r3, [r2, #0]
			  getTimeFromMS(&Duration, timeBar);
 8000770:	495c      	ldr	r1, [pc, #368]	@ (80008e4 <main+0x298>)
 8000772:	485e      	ldr	r0, [pc, #376]	@ (80008ec <main+0x2a0>)
 8000774:	f7ff fefc 	bl	8000570 <getTimeFromMS>
			  ssd1306_TestDurationSetting(&Duration);
 8000778:	485c      	ldr	r0, [pc, #368]	@ (80008ec <main+0x2a0>)
 800077a:	f000 fe19 	bl	80013b0 <ssd1306_TestDurationSetting>
		  continue;
 800077e:	e1c4      	b.n	8000b0a <main+0x4be>
	  }
	  // UP - END

	  // DOWN - BEGIN
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000780:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000784:	484e      	ldr	r0, [pc, #312]	@ (80008c0 <main+0x274>)
 8000786:	f001 fa81 	bl	8001c8c <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d106      	bne.n	800079e <main+0x152>
      {
		  pressedDownButton = true;
 8000790:	4b58      	ldr	r3, [pc, #352]	@ (80008f4 <main+0x2a8>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
		  DisplayShutDownTime = 0;
 8000796:	4b4c      	ldr	r3, [pc, #304]	@ (80008c8 <main+0x27c>)
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
		  continue;
 800079c:	e1bc      	b.n	8000b18 <main+0x4cc>
      }
	  else if (pressedDownButton == true)
 800079e:	4b55      	ldr	r3, [pc, #340]	@ (80008f4 <main+0x2a8>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d05e      	beq.n	8000864 <main+0x218>
	  {
		  pressedDownButton = false;
 80007a6:	4b53      	ldr	r3, [pc, #332]	@ (80008f4 <main+0x2a8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]

		  if(setting_option == MENU) {
 80007ac:	4b47      	ldr	r3, [pc, #284]	@ (80008cc <main+0x280>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d11c      	bne.n	80007ee <main+0x1a2>
			  if(menu_option < MENU_COUNT) {
 80007b4:	4b46      	ldr	r3, [pc, #280]	@ (80008d0 <main+0x284>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2203      	movs	r2, #3
 80007ba:	4293      	cmp	r3, r2
 80007bc:	f080 81a7 	bcs.w	8000b0e <main+0x4c2>
				  menu_option ++;
 80007c0:	4b43      	ldr	r3, [pc, #268]	@ (80008d0 <main+0x284>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a42      	ldr	r2, [pc, #264]	@ (80008d0 <main+0x284>)
 80007c8:	6013      	str	r3, [r2, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 80007ca:	4b41      	ldr	r3, [pc, #260]	@ (80008d0 <main+0x284>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b40      	ldr	r3, [pc, #256]	@ (80008d4 <main+0x288>)
 80007d2:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80007d6:	4b3e      	ldr	r3, [pc, #248]	@ (80008d0 <main+0x284>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a3e      	ldr	r2, [pc, #248]	@ (80008d4 <main+0x288>)
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4413      	add	r3, r2
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	4a3b      	ldr	r2, [pc, #236]	@ (80008d0 <main+0x284>)
 80007e4:	6812      	ldr	r2, [r2, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	f000 fd38 	bl	800125c <ssd1306_TestMenu>
			  }
			  getTimeFromMS(&Duration, timeBar);
			  ssd1306_TestDurationSetting(&Duration);
		  }

		  continue;
 80007ec:	e18f      	b.n	8000b0e <main+0x4c2>
		  else if(setting_option == INTERVAL_SETTING) {
 80007ee:	4b37      	ldr	r3, [pc, #220]	@ (80008cc <main+0x280>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d120      	bne.n	8000838 <main+0x1ec>
			  if(intervalSection == HOURS) {
 80007f6:	4b38      	ldr	r3, [pc, #224]	@ (80008d8 <main+0x28c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d108      	bne.n	8000810 <main+0x1c4>
					  Interval -= 3600000;
 80007fe:	4b37      	ldr	r3, [pc, #220]	@ (80008dc <main+0x290>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f5a3 135b 	sub.w	r3, r3, #3588096	@ 0x36c000
 8000806:	f5a3 533a 	sub.w	r3, r3, #11904	@ 0x2e80
 800080a:	4a34      	ldr	r2, [pc, #208]	@ (80008dc <main+0x290>)
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	e00a      	b.n	8000826 <main+0x1da>
			  else if(intervalSection == MINUTES) {
 8000810:	4b31      	ldr	r3, [pc, #196]	@ (80008d8 <main+0x28c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d106      	bne.n	8000826 <main+0x1da>
					  Interval -= 60000;
 8000818:	4b30      	ldr	r3, [pc, #192]	@ (80008dc <main+0x290>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8000820:	3b60      	subs	r3, #96	@ 0x60
 8000822:	4a2e      	ldr	r2, [pc, #184]	@ (80008dc <main+0x290>)
 8000824:	6013      	str	r3, [r2, #0]
			  getTimeFromMS(&Interval, timeBar);
 8000826:	492f      	ldr	r1, [pc, #188]	@ (80008e4 <main+0x298>)
 8000828:	482c      	ldr	r0, [pc, #176]	@ (80008dc <main+0x290>)
 800082a:	f7ff fea1 	bl	8000570 <getTimeFromMS>
			  ssd1306_TestIntervalSetting(timeBar, &Interval);
 800082e:	492b      	ldr	r1, [pc, #172]	@ (80008dc <main+0x290>)
 8000830:	482c      	ldr	r0, [pc, #176]	@ (80008e4 <main+0x298>)
 8000832:	f000 fd59 	bl	80012e8 <ssd1306_TestIntervalSetting>
		  continue;
 8000836:	e16a      	b.n	8000b0e <main+0x4c2>
		  else if(setting_option == DURATION_SETTING) {
 8000838:	4b24      	ldr	r3, [pc, #144]	@ (80008cc <main+0x280>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b02      	cmp	r3, #2
 800083e:	f040 8166 	bne.w	8000b0e <main+0x4c2>
			  if(durationSection == SECONDS) {
 8000842:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <main+0x29c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d104      	bne.n	8000854 <main+0x208>
					  Duration --;
 800084a:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <main+0x2a0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	3b01      	subs	r3, #1
 8000850:	4a26      	ldr	r2, [pc, #152]	@ (80008ec <main+0x2a0>)
 8000852:	6013      	str	r3, [r2, #0]
			  getTimeFromMS(&Duration, timeBar);
 8000854:	4923      	ldr	r1, [pc, #140]	@ (80008e4 <main+0x298>)
 8000856:	4825      	ldr	r0, [pc, #148]	@ (80008ec <main+0x2a0>)
 8000858:	f7ff fe8a 	bl	8000570 <getTimeFromMS>
			  ssd1306_TestDurationSetting(&Duration);
 800085c:	4823      	ldr	r0, [pc, #140]	@ (80008ec <main+0x2a0>)
 800085e:	f000 fda7 	bl	80013b0 <ssd1306_TestDurationSetting>
		  continue;
 8000862:	e154      	b.n	8000b0e <main+0x4c2>
	  }
	  // DOWN - END

	  // LEFT (BACK) - BEGIN
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000864:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000868:	4815      	ldr	r0, [pc, #84]	@ (80008c0 <main+0x274>)
 800086a:	f001 fa0f 	bl	8001c8c <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d106      	bne.n	8000882 <main+0x236>
      {
		  pressedLeftButton = true;
 8000874:	4b20      	ldr	r3, [pc, #128]	@ (80008f8 <main+0x2ac>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
		  DisplayShutDownTime = 0;
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <main+0x27c>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
		  continue;
 8000880:	e14a      	b.n	8000b18 <main+0x4cc>
      }
	  else if (pressedLeftButton == true)
 8000882:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <main+0x2ac>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d07f      	beq.n	800098a <main+0x33e>
	  {
		  pressedLeftButton = false;
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <main+0x2ac>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]

		  if(setting_option == MENU) {
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <main+0x280>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	f000 813c 	beq.w	8000b12 <main+0x4c6>
			  // nothing
		  }
		  else if(setting_option == INTERVAL_SETTING) {
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <main+0x280>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d146      	bne.n	8000930 <main+0x2e4>
			  if(intervalSection > 0) {
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <main+0x28c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d028      	beq.n	80008fc <main+0x2b0>
				  *intervalSection--;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <main+0x28c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	4a09      	ldr	r2, [pc, #36]	@ (80008d8 <main+0x28c>)
 80008b2:	6013      	str	r3, [r2, #0]
				  ssd1306_TestIntervalSetting(timeBar, &Interval);
 80008b4:	4909      	ldr	r1, [pc, #36]	@ (80008dc <main+0x290>)
 80008b6:	480b      	ldr	r0, [pc, #44]	@ (80008e4 <main+0x298>)
 80008b8:	f000 fd16 	bl	80012e8 <ssd1306_TestIntervalSetting>
				  *setting_option = MENU;
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
			  }
		  }

		  continue;
 80008bc:	e129      	b.n	8000b12 <main+0x4c6>
 80008be:	bf00      	nop
 80008c0:	40020400 	.word	0x40020400
 80008c4:	20000118 	.word	0x20000118
 80008c8:	2000011c 	.word	0x2000011c
 80008cc:	20000114 	.word	0x20000114
 80008d0:	20000110 	.word	0x20000110
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000528 	.word	0x20000528
 80008dc:	20000024 	.word	0x20000024
 80008e0:	2000002c 	.word	0x2000002c
 80008e4:	2000003c 	.word	0x2000003c
 80008e8:	2000052c 	.word	0x2000052c
 80008ec:	20000030 	.word	0x20000030
 80008f0:	20000038 	.word	0x20000038
 80008f4:	20000119 	.word	0x20000119
 80008f8:	2000011a 	.word	0x2000011a
				  *intervalSection = HOURS;
 80008fc:	4b87      	ldr	r3, [pc, #540]	@ (8000b1c <main+0x4d0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
				  *setting_option = MENU;
 8000904:	4b86      	ldr	r3, [pc, #536]	@ (8000b20 <main+0x4d4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 800090c:	4b85      	ldr	r3, [pc, #532]	@ (8000b24 <main+0x4d8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b85      	ldr	r3, [pc, #532]	@ (8000b28 <main+0x4dc>)
 8000914:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000918:	4b82      	ldr	r3, [pc, #520]	@ (8000b24 <main+0x4d8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a82      	ldr	r2, [pc, #520]	@ (8000b28 <main+0x4dc>)
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	4413      	add	r3, r2
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	4a7f      	ldr	r2, [pc, #508]	@ (8000b24 <main+0x4d8>)
 8000926:	6812      	ldr	r2, [r2, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f000 fc97 	bl	800125c <ssd1306_TestMenu>
		  continue;
 800092e:	e0f0      	b.n	8000b12 <main+0x4c6>
		  else if(setting_option == DURATION_SETTING) {
 8000930:	4b7b      	ldr	r3, [pc, #492]	@ (8000b20 <main+0x4d4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b02      	cmp	r3, #2
 8000936:	f040 80ec 	bne.w	8000b12 <main+0x4c6>
			  if(durationSection > 0) {
 800093a:	4b7c      	ldr	r3, [pc, #496]	@ (8000b2c <main+0x4e0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d009      	beq.n	8000956 <main+0x30a>
				  *durationSection--;
 8000942:	4b7a      	ldr	r3, [pc, #488]	@ (8000b2c <main+0x4e0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	4a78      	ldr	r2, [pc, #480]	@ (8000b2c <main+0x4e0>)
 800094a:	6013      	str	r3, [r2, #0]
				  ssd1306_TestIntervalSetting(timeBar, &Interval);
 800094c:	4978      	ldr	r1, [pc, #480]	@ (8000b30 <main+0x4e4>)
 800094e:	4879      	ldr	r0, [pc, #484]	@ (8000b34 <main+0x4e8>)
 8000950:	f000 fcca 	bl	80012e8 <ssd1306_TestIntervalSetting>
		  continue;
 8000954:	e0dd      	b.n	8000b12 <main+0x4c6>
				  *durationSection = SECONDS;
 8000956:	4b75      	ldr	r3, [pc, #468]	@ (8000b2c <main+0x4e0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
				  *setting_option = MENU;
 800095e:	4b70      	ldr	r3, [pc, #448]	@ (8000b20 <main+0x4d4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000966:	4b6f      	ldr	r3, [pc, #444]	@ (8000b24 <main+0x4d8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b6e      	ldr	r3, [pc, #440]	@ (8000b28 <main+0x4dc>)
 800096e:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000972:	4b6c      	ldr	r3, [pc, #432]	@ (8000b24 <main+0x4d8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a6c      	ldr	r2, [pc, #432]	@ (8000b28 <main+0x4dc>)
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	4413      	add	r3, r2
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	4a69      	ldr	r2, [pc, #420]	@ (8000b24 <main+0x4d8>)
 8000980:	6812      	ldr	r2, [r2, #0]
 8000982:	4619      	mov	r1, r3
 8000984:	f000 fc6a 	bl	800125c <ssd1306_TestMenu>
		  continue;
 8000988:	e0c3      	b.n	8000b12 <main+0x4c6>
	  }
	  // LEFT (BACK) - END

	  // RIGHT (OKAY) - BEGIN
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET)
 800098a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800098e:	486a      	ldr	r0, [pc, #424]	@ (8000b38 <main+0x4ec>)
 8000990:	f001 f97c 	bl	8001c8c <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d106      	bne.n	80009a8 <main+0x35c>
      {
		  pressedRightButton = true;
 800099a:	4b68      	ldr	r3, [pc, #416]	@ (8000b3c <main+0x4f0>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
		  DisplayShutDownTime = 0;
 80009a0:	4b67      	ldr	r3, [pc, #412]	@ (8000b40 <main+0x4f4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
		  continue;
 80009a6:	e0b7      	b.n	8000b18 <main+0x4cc>
      }
	  else if (pressedRightButton == true)
 80009a8:	4b64      	ldr	r3, [pc, #400]	@ (8000b3c <main+0x4f0>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	f000 809b 	beq.w	8000ae8 <main+0x49c>
	  {
		  pressedRightButton = false;
 80009b2:	4b62      	ldr	r3, [pc, #392]	@ (8000b3c <main+0x4f0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]

		  if(setting_option == MENU) {
 80009b8:	4b59      	ldr	r3, [pc, #356]	@ (8000b20 <main+0x4d4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d137      	bne.n	8000a30 <main+0x3e4>

			  if(menu_option == OFF) {
 80009c0:	4b58      	ldr	r3, [pc, #352]	@ (8000b24 <main+0x4d8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c8:	d115      	bne.n	80009f6 <main+0x3aa>
				  *menu_option = READY;
 80009ca:	4b56      	ldr	r3, [pc, #344]	@ (8000b24 <main+0x4d8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 80009d2:	4b54      	ldr	r3, [pc, #336]	@ (8000b24 <main+0x4d8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b53      	ldr	r3, [pc, #332]	@ (8000b28 <main+0x4dc>)
 80009da:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80009de:	4b51      	ldr	r3, [pc, #324]	@ (8000b24 <main+0x4d8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a51      	ldr	r2, [pc, #324]	@ (8000b28 <main+0x4dc>)
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	4a4e      	ldr	r2, [pc, #312]	@ (8000b24 <main+0x4d8>)
 80009ec:	6812      	ldr	r2, [r2, #0]
 80009ee:	4619      	mov	r1, r3
 80009f0:	f000 fc34 	bl	800125c <ssd1306_TestMenu>
				  *setting_option = MENU;
				  ApplyNewDuration();
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
			  }
		  }
		  continue;
 80009f4:	e08f      	b.n	8000b16 <main+0x4ca>
			  else if(menu_option == READY) {
 80009f6:	4b4b      	ldr	r3, [pc, #300]	@ (8000b24 <main+0x4d8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d106      	bne.n	8000a0c <main+0x3c0>
				  *menu_option = OFF;
 80009fe:	4b49      	ldr	r3, [pc, #292]	@ (8000b24 <main+0x4d8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	22ff      	movs	r2, #255	@ 0xff
 8000a04:	701a      	strb	r2, [r3, #0]
				  ssd1306_TurnOff();
 8000a06:	f000 fd25 	bl	8001454 <ssd1306_TurnOff>
		  continue;
 8000a0a:	e084      	b.n	8000b16 <main+0x4ca>
			  else if(menu_option == INTERVAL) {
 8000a0c:	4b45      	ldr	r3, [pc, #276]	@ (8000b24 <main+0x4d8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d104      	bne.n	8000a1e <main+0x3d2>
				  *setting_option = INTERVAL_SETTING;
 8000a14:	4b42      	ldr	r3, [pc, #264]	@ (8000b20 <main+0x4d4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
		  continue;
 8000a1c:	e07b      	b.n	8000b16 <main+0x4ca>
			  else if(menu_option == DURATION) {
 8000a1e:	4b41      	ldr	r3, [pc, #260]	@ (8000b24 <main+0x4d8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d177      	bne.n	8000b16 <main+0x4ca>
				  *setting_option = DURATION_SETTING;
 8000a26:	4b3e      	ldr	r3, [pc, #248]	@ (8000b20 <main+0x4d4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	701a      	strb	r2, [r3, #0]
		  continue;
 8000a2e:	e072      	b.n	8000b16 <main+0x4ca>
		  else if(setting_option == INTERVAL_SETTING) {
 8000a30:	4b3b      	ldr	r3, [pc, #236]	@ (8000b20 <main+0x4d4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d129      	bne.n	8000a8c <main+0x440>
			  if(intervalSection < 2) {
 8000a38:	4b38      	ldr	r3, [pc, #224]	@ (8000b1c <main+0x4d0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d809      	bhi.n	8000a54 <main+0x408>
				  *intervalSection++;
 8000a40:	4b36      	ldr	r3, [pc, #216]	@ (8000b1c <main+0x4d0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	4a35      	ldr	r2, [pc, #212]	@ (8000b1c <main+0x4d0>)
 8000a48:	6013      	str	r3, [r2, #0]
				  ssd1306_TestIntervalSetting(timeBar, &Interval);
 8000a4a:	4939      	ldr	r1, [pc, #228]	@ (8000b30 <main+0x4e4>)
 8000a4c:	4839      	ldr	r0, [pc, #228]	@ (8000b34 <main+0x4e8>)
 8000a4e:	f000 fc4b 	bl	80012e8 <ssd1306_TestIntervalSetting>
		  continue;
 8000a52:	e060      	b.n	8000b16 <main+0x4ca>
				  *intervalSection = HOURS;
 8000a54:	4b31      	ldr	r3, [pc, #196]	@ (8000b1c <main+0x4d0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
				  *setting_option = MENU;
 8000a5c:	4b30      	ldr	r3, [pc, #192]	@ (8000b20 <main+0x4d4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
				  ApplyNewInterval();
 8000a64:	f7ff fdd2 	bl	800060c <ApplyNewInterval>
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000a68:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <main+0x4d8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b28 <main+0x4dc>)
 8000a70:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000a74:	4b2b      	ldr	r3, [pc, #172]	@ (8000b24 <main+0x4d8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2b      	ldr	r2, [pc, #172]	@ (8000b28 <main+0x4dc>)
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	4a28      	ldr	r2, [pc, #160]	@ (8000b24 <main+0x4d8>)
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f000 fbe9 	bl	800125c <ssd1306_TestMenu>
		  continue;
 8000a8a:	e044      	b.n	8000b16 <main+0x4ca>
		  else if(setting_option == DURATION_SETTING) {
 8000a8c:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <main+0x4d4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d140      	bne.n	8000b16 <main+0x4ca>
			  if(durationSection < 1) {
 8000a94:	4b25      	ldr	r3, [pc, #148]	@ (8000b2c <main+0x4e0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d109      	bne.n	8000ab0 <main+0x464>
				  *durationSection++;
 8000a9c:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <main+0x4e0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <main+0x4e0>)
 8000aa4:	6013      	str	r3, [r2, #0]
				  ssd1306_TestIntervalSetting(timeBar, &Interval);
 8000aa6:	4922      	ldr	r1, [pc, #136]	@ (8000b30 <main+0x4e4>)
 8000aa8:	4822      	ldr	r0, [pc, #136]	@ (8000b34 <main+0x4e8>)
 8000aaa:	f000 fc1d 	bl	80012e8 <ssd1306_TestIntervalSetting>
		  continue;
 8000aae:	e032      	b.n	8000b16 <main+0x4ca>
				  *durationSection = SECONDS;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <main+0x4e0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
				  *setting_option = MENU;
 8000ab8:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <main+0x4d4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
				  ApplyNewDuration();
 8000ac0:	f7ff fdb4 	bl	800062c <ApplyNewDuration>
				  ssd1306_TestMenu(menu_list[(int)menu_option][0], menu_list[(int)menu_option][1], menu_option);
 8000ac4:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <main+0x4d8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <main+0x4dc>)
 8000acc:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <main+0x4d8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a14      	ldr	r2, [pc, #80]	@ (8000b28 <main+0x4dc>)
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	4413      	add	r3, r2
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	4a11      	ldr	r2, [pc, #68]	@ (8000b24 <main+0x4d8>)
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f000 fbbb 	bl	800125c <ssd1306_TestMenu>
		  continue;
 8000ae6:	e016      	b.n	8000b16 <main+0x4ca>
	  }
	  // RIGHT (OKAY) - END

	  if(DisplayShutDownTime == 199) {
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <main+0x4f4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2bc7      	cmp	r3, #199	@ 0xc7
 8000aee:	d101      	bne.n	8000af4 <main+0x4a8>
		  ssd1306_TurnOff();
 8000af0:	f000 fcb0 	bl	8001454 <ssd1306_TurnOff>
	  }
	  if(DisplayShutDownTime < 200) {
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <main+0x4f4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2bc7      	cmp	r3, #199	@ 0xc7
 8000afa:	f73f adb3 	bgt.w	8000664 <main+0x18>
		  DisplayShutDownTime++;
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <main+0x4f4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a0e      	ldr	r2, [pc, #56]	@ (8000b40 <main+0x4f4>)
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e5ac      	b.n	8000664 <main+0x18>
		  continue;
 8000b0a:	bf00      	nop
 8000b0c:	e5aa      	b.n	8000664 <main+0x18>
		  continue;
 8000b0e:	bf00      	nop
 8000b10:	e5a8      	b.n	8000664 <main+0x18>
		  continue;
 8000b12:	bf00      	nop
 8000b14:	e5a6      	b.n	8000664 <main+0x18>
		  continue;
 8000b16:	bf00      	nop
	  HAL_Delay(100);
 8000b18:	e5a4      	b.n	8000664 <main+0x18>
 8000b1a:	bf00      	nop
 8000b1c:	20000528 	.word	0x20000528
 8000b20:	20000114 	.word	0x20000114
 8000b24:	20000110 	.word	0x20000110
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	2000052c 	.word	0x2000052c
 8000b30:	20000024 	.word	0x20000024
 8000b34:	2000003c 	.word	0x2000003c
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	2000011b 	.word	0x2000011b
 8000b40:	2000011c 	.word	0x2000011c

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	@ 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	2230      	movs	r2, #48	@ 0x30
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 f9de 	bl	8002f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <SystemClock_Config+0xb4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	4a21      	ldr	r2, [pc, #132]	@ (8000bf8 <SystemClock_Config+0xb4>)
 8000b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <SystemClock_Config+0xb4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <SystemClock_Config+0xb8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bfc <SystemClock_Config+0xb8>)
 8000b8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <SystemClock_Config+0xb8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 fd2f 	bl	8002618 <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000bc0:	f000 f866 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 ff92 	bl	8002b08 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000bea:	f000 f851 	bl	8000c90 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	@ 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c06:	4a13      	ldr	r2, [pc, #76]	@ (8000c54 <MX_I2C1_Init+0x54>)
 8000c08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c0c:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <MX_I2C1_Init+0x58>)
 8000c0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c3e:	f001 f83d 	bl	8001cbc <HAL_I2C_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c48:	f000 f822 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200000bc 	.word	0x200000bc
 8000c54:	40005400 	.word	0x40005400
 8000c58:	00061a80 	.word	0x00061a80

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_GPIO_Init+0x30>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <MX_GPIO_Init+0x30>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_GPIO_Init+0x30>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af04      	add	r7, sp, #16
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	9302      	str	r3, [sp, #8]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	9301      	str	r3, [sp, #4]
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2178      	movs	r1, #120	@ 0x78
 8000cca:	4803      	ldr	r0, [pc, #12]	@ (8000cd8 <ssd1306_WriteCommand+0x2c>)
 8000ccc:	f001 f93a 	bl	8001f44 <HAL_I2C_Mem_Write>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200000bc 	.word	0x200000bc

08000cdc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af04      	add	r7, sp, #16
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	f04f 32ff 	mov.w	r2, #4294967295
 8000cee:	9202      	str	r2, [sp, #8]
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	2240      	movs	r2, #64	@ 0x40
 8000cfa:	2178      	movs	r1, #120	@ 0x78
 8000cfc:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <ssd1306_WriteData+0x30>)
 8000cfe:	f001 f921 	bl	8001f44 <HAL_I2C_Mem_Write>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200000bc 	.word	0x200000bc

08000d10 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000d14:	f7ff ffc2 	bl	8000c9c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000d18:	2064      	movs	r0, #100	@ 0x64
 8000d1a:	f000 fd29 	bl	8001770 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 fa7e 	bl	8001220 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000d24:	2020      	movs	r0, #32
 8000d26:	f7ff ffc1 	bl	8000cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff ffbe 	bl	8000cac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d30:	20b0      	movs	r0, #176	@ 0xb0
 8000d32:	f7ff ffbb 	bl	8000cac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000d36:	20c8      	movs	r0, #200	@ 0xc8
 8000d38:	f7ff ffb8 	bl	8000cac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff ffb5 	bl	8000cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000d42:	2010      	movs	r0, #16
 8000d44:	f7ff ffb2 	bl	8000cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000d48:	2040      	movs	r0, #64	@ 0x40
 8000d4a:	f7ff ffaf 	bl	8000cac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000d4e:	20ff      	movs	r0, #255	@ 0xff
 8000d50:	f000 fa53 	bl	80011fa <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000d54:	20a1      	movs	r0, #161	@ 0xa1
 8000d56:	f7ff ffa9 	bl	8000cac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000d5a:	20a6      	movs	r0, #166	@ 0xa6
 8000d5c:	f7ff ffa6 	bl	8000cac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000d60:	20a8      	movs	r0, #168	@ 0xa8
 8000d62:	f7ff ffa3 	bl	8000cac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000d66:	203f      	movs	r0, #63	@ 0x3f
 8000d68:	f7ff ffa0 	bl	8000cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d6c:	20a4      	movs	r0, #164	@ 0xa4
 8000d6e:	f7ff ff9d 	bl	8000cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000d72:	20d3      	movs	r0, #211	@ 0xd3
 8000d74:	f7ff ff9a 	bl	8000cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff ff97 	bl	8000cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d7e:	20d5      	movs	r0, #213	@ 0xd5
 8000d80:	f7ff ff94 	bl	8000cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000d84:	20f0      	movs	r0, #240	@ 0xf0
 8000d86:	f7ff ff91 	bl	8000cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000d8a:	20d9      	movs	r0, #217	@ 0xd9
 8000d8c:	f7ff ff8e 	bl	8000cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000d90:	2022      	movs	r0, #34	@ 0x22
 8000d92:	f7ff ff8b 	bl	8000cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000d96:	20da      	movs	r0, #218	@ 0xda
 8000d98:	f7ff ff88 	bl	8000cac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000d9c:	2012      	movs	r0, #18
 8000d9e:	f7ff ff85 	bl	8000cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000da2:	20db      	movs	r0, #219	@ 0xdb
 8000da4:	f7ff ff82 	bl	8000cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000da8:	2020      	movs	r0, #32
 8000daa:	f7ff ff7f 	bl	8000cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000dae:	208d      	movs	r0, #141	@ 0x8d
 8000db0:	f7ff ff7c 	bl	8000cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000db4:	2014      	movs	r0, #20
 8000db6:	f7ff ff79 	bl	8000cac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fa30 	bl	8001220 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f000 f80f 	bl	8000de4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000dc6:	f000 f825 	bl	8000e14 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000dca:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <ssd1306_Init+0xd0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	@ (8000de0 <ssd1306_Init+0xd0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000dd6:	4b02      	ldr	r3, [pc, #8]	@ (8000de0 <ssd1306_Init+0xd0>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	711a      	strb	r2, [r3, #4]
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000520 	.word	0x20000520

08000de4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <ssd1306_Fill+0x14>
 8000df4:	2300      	movs	r3, #0
 8000df6:	e000      	b.n	8000dfa <ssd1306_Fill+0x16>
 8000df8:	23ff      	movs	r3, #255	@ 0xff
 8000dfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <ssd1306_Fill+0x2c>)
 8000e02:	f002 f887 	bl	8002f14 <memset>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000120 	.word	0x20000120

08000e14 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]
 8000e1e:	e016      	b.n	8000e4e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	3b50      	subs	r3, #80	@ 0x50
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff40 	bl	8000cac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff3d 	bl	8000cac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000e32:	2010      	movs	r0, #16
 8000e34:	f7ff ff3a 	bl	8000cac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	01db      	lsls	r3, r3, #7
 8000e3c:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <ssd1306_UpdateScreen+0x4c>)
 8000e3e:	4413      	add	r3, r2
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff4a 	bl	8000cdc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	d9e5      	bls.n	8000e20 <ssd1306_UpdateScreen+0xc>
    }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000120 	.word	0x20000120

08000e64 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	71bb      	strb	r3, [r7, #6]
 8000e72:	4613      	mov	r3, r2
 8000e74:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db3d      	blt.n	8000efa <ssd1306_DrawPixel+0x96>
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e82:	d83a      	bhi.n	8000efa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000e84:	797b      	ldrb	r3, [r7, #5]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d11a      	bne.n	8000ec0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e8a:	79fa      	ldrb	r2, [r7, #7]
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	b2d8      	uxtb	r0, r3
 8000e92:	4603      	mov	r3, r0
 8000e94:	01db      	lsls	r3, r3, #7
 8000e96:	4413      	add	r3, r2
 8000e98:	4a1b      	ldr	r2, [pc, #108]	@ (8000f08 <ssd1306_DrawPixel+0xa4>)
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	79bb      	ldrb	r3, [r7, #6]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b259      	sxtb	r1, r3
 8000eb0:	79fa      	ldrb	r2, [r7, #7]
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	01db      	lsls	r3, r3, #7
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b2c9      	uxtb	r1, r1
 8000eba:	4a13      	ldr	r2, [pc, #76]	@ (8000f08 <ssd1306_DrawPixel+0xa4>)
 8000ebc:	54d1      	strb	r1, [r2, r3]
 8000ebe:	e01d      	b.n	8000efc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ec0:	79fa      	ldrb	r2, [r7, #7]
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	b2d8      	uxtb	r0, r3
 8000ec8:	4603      	mov	r3, r0
 8000eca:	01db      	lsls	r3, r3, #7
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <ssd1306_DrawPixel+0xa4>)
 8000ed0:	5cd3      	ldrb	r3, [r2, r3]
 8000ed2:	b25a      	sxtb	r2, r3
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	2101      	movs	r1, #1
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	b259      	sxtb	r1, r3
 8000eea:	79fa      	ldrb	r2, [r7, #7]
 8000eec:	4603      	mov	r3, r0
 8000eee:	01db      	lsls	r3, r3, #7
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b2c9      	uxtb	r1, r1
 8000ef4:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <ssd1306_DrawPixel+0xa4>)
 8000ef6:	54d1      	strb	r1, [r2, r3]
 8000ef8:	e000      	b.n	8000efc <ssd1306_DrawPixel+0x98>
        return;
 8000efa:	bf00      	nop
    }
}
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000120 	.word	0x20000120

08000f0c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b089      	sub	sp, #36	@ 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4604      	mov	r4, r0
 8000f14:	4638      	mov	r0, r7
 8000f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	2b1f      	cmp	r3, #31
 8000f22:	d902      	bls.n	8000f2a <ssd1306_WriteChar+0x1e>
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f28:	d901      	bls.n	8000f2e <ssd1306_WriteChar+0x22>
        return 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e077      	b.n	800101e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001028 <ssd1306_WriteChar+0x11c>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	783b      	ldrb	r3, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	2b80      	cmp	r3, #128	@ 0x80
 8000f3a:	dc06      	bgt.n	8000f4a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001028 <ssd1306_WriteChar+0x11c>)
 8000f3e:	885b      	ldrh	r3, [r3, #2]
 8000f40:	461a      	mov	r2, r3
 8000f42:	787b      	ldrb	r3, [r7, #1]
 8000f44:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000f46:	2b40      	cmp	r3, #64	@ 0x40
 8000f48:	dd01      	ble.n	8000f4e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e067      	b.n	800101e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e04e      	b.n	8000ff2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	3b20      	subs	r3, #32
 8000f5a:	7879      	ldrb	r1, [r7, #1]
 8000f5c:	fb01 f303 	mul.w	r3, r1, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	440b      	add	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	e036      	b.n	8000fe2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d013      	beq.n	8000fac <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <ssd1306_WriteChar+0x11c>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4413      	add	r3, r2
 8000f90:	b2d8      	uxtb	r0, r3
 8000f92:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <ssd1306_WriteChar+0x11c>)
 8000f94:	885b      	ldrh	r3, [r3, #2]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <ssd1306_DrawPixel>
 8000faa:	e017      	b.n	8000fdc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000fac:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <ssd1306_WriteChar+0x11c>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b2d8      	uxtb	r0, r3
 8000fba:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <ssd1306_WriteChar+0x11c>)
 8000fbc:	885b      	ldrh	r3, [r3, #2]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b2d9      	uxtb	r1, r3
 8000fc8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf0c      	ite	eq
 8000fd0:	2301      	moveq	r3, #1
 8000fd2:	2300      	movne	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	f7ff ff44 	bl	8000e64 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	783b      	ldrb	r3, [r7, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d3c3      	bcc.n	8000f74 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	787b      	ldrb	r3, [r7, #1]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d3ab      	bcc.n	8000f54 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <ssd1306_WriteChar+0x11c>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	2a00      	cmp	r2, #0
 8001004:	d005      	beq.n	8001012 <ssd1306_WriteChar+0x106>
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	3a20      	subs	r2, #32
 800100c:	440a      	add	r2, r1
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	e000      	b.n	8001014 <ssd1306_WriteChar+0x108>
 8001012:	783a      	ldrb	r2, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <ssd1306_WriteChar+0x11c>)
 800101a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	@ 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}
 8001026:	bf00      	nop
 8001028:	20000520 	.word	0x20000520

0800102c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	4638      	mov	r0, r7
 8001036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800103a:	e013      	b.n	8001064 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	7818      	ldrb	r0, [r3, #0]
 8001040:	7e3b      	ldrb	r3, [r7, #24]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	463b      	mov	r3, r7
 8001046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001048:	f7ff ff60 	bl	8000f0c <ssd1306_WriteChar>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d002      	beq.n	800105e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	e008      	b.n	8001070 <ssd1306_WriteString+0x44>
        }
        str++;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e7      	bne.n	800103c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	781b      	ldrb	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	460a      	mov	r2, r1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	4613      	mov	r3, r2
 8001086:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <ssd1306_SetCursor+0x2c>)
 800108e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <ssd1306_SetCursor+0x2c>)
 8001096:	805a      	strh	r2, [r3, #2]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20000520 	.word	0x20000520

080010a8 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4604      	mov	r4, r0
 80010b0:	4608      	mov	r0, r1
 80010b2:	4611      	mov	r1, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	4623      	mov	r3, r4
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	4603      	mov	r3, r0
 80010bc:	71bb      	strb	r3, [r7, #6]
 80010be:	460b      	mov	r3, r1
 80010c0:	717b      	strb	r3, [r7, #5]
 80010c2:	4613      	mov	r3, r2
 80010c4:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80010c6:	79fa      	ldrb	r2, [r7, #7]
 80010c8:	797b      	ldrb	r3, [r7, #5]
 80010ca:	4293      	cmp	r3, r2
 80010cc:	bf28      	it	cs
 80010ce:	4613      	movcs	r3, r2
 80010d0:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80010d2:	797a      	ldrb	r2, [r7, #5]
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4293      	cmp	r3, r2
 80010d8:	bf38      	it	cc
 80010da:	4613      	movcc	r3, r2
 80010dc:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80010de:	79ba      	ldrb	r2, [r7, #6]
 80010e0:	793b      	ldrb	r3, [r7, #4]
 80010e2:	4293      	cmp	r3, r2
 80010e4:	bf28      	it	cs
 80010e6:	4613      	movcs	r3, r2
 80010e8:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80010ea:	793a      	ldrb	r2, [r7, #4]
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	4293      	cmp	r3, r2
 80010f0:	bf38      	it	cc
 80010f2:	4613      	movcc	r3, r2
 80010f4:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e017      	b.n	800112c <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80010fc:	7b7b      	ldrb	r3, [r7, #13]
 80010fe:	73bb      	strb	r3, [r7, #14]
 8001100:	e009      	b.n	8001116 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001102:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001106:	7bf9      	ldrb	r1, [r7, #15]
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff feaa 	bl	8000e64 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	3301      	adds	r3, #1
 8001114:	73bb      	strb	r3, [r7, #14]
 8001116:	7bba      	ldrb	r2, [r7, #14]
 8001118:	7b3b      	ldrb	r3, [r7, #12]
 800111a:	429a      	cmp	r2, r3
 800111c:	d803      	bhi.n	8001126 <ssd1306_FillRectangle+0x7e>
 800111e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001122:	2b00      	cmp	r3, #0
 8001124:	daed      	bge.n	8001102 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	3301      	adds	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	7abb      	ldrb	r3, [r7, #10]
 8001130:	429a      	cmp	r2, r3
 8001132:	d803      	bhi.n	800113c <ssd1306_FillRectangle+0x94>
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b3f      	cmp	r3, #63	@ 0x3f
 8001138:	d9e0      	bls.n	80010fc <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800113a:	bf00      	nop
 800113c:	bf00      	nop
}
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bd90      	pop	{r4, r7, pc}

08001144 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	603a      	str	r2, [r7, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	460b      	mov	r3, r1
 8001154:	71bb      	strb	r3, [r7, #6]
 8001156:	4613      	mov	r3, r2
 8001158:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800115a:	797b      	ldrb	r3, [r7, #5]
 800115c:	3307      	adds	r3, #7
 800115e:	2b00      	cmp	r3, #0
 8001160:	da00      	bge.n	8001164 <ssd1306_DrawBitmap+0x20>
 8001162:	3307      	adds	r3, #7
 8001164:	10db      	asrs	r3, r3, #3
 8001166:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db3e      	blt.n	80011f2 <ssd1306_DrawBitmap+0xae>
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	2b3f      	cmp	r3, #63	@ 0x3f
 8001178:	d83b      	bhi.n	80011f2 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800117a:	2300      	movs	r3, #0
 800117c:	73bb      	strb	r3, [r7, #14]
 800117e:	e033      	b.n	80011e8 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001180:	2300      	movs	r3, #0
 8001182:	737b      	strb	r3, [r7, #13]
 8001184:	e026      	b.n	80011d4 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001186:	7b7b      	ldrb	r3, [r7, #13]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e00d      	b.n	80011b4 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	7b7a      	ldrb	r2, [r7, #13]
 80011a4:	08d2      	lsrs	r2, r2, #3
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	4413      	add	r3, r2
 80011aa:	461a      	mov	r2, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80011b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da08      	bge.n	80011ce <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	7b7b      	ldrb	r3, [r7, #13]
 80011c0:	4413      	add	r3, r2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	7f3a      	ldrb	r2, [r7, #28]
 80011c6:	79b9      	ldrb	r1, [r7, #6]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fe4b 	bl	8000e64 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80011ce:	7b7b      	ldrb	r3, [r7, #13]
 80011d0:	3301      	adds	r3, #1
 80011d2:	737b      	strb	r3, [r7, #13]
 80011d4:	7b7a      	ldrb	r2, [r7, #13]
 80011d6:	797b      	ldrb	r3, [r7, #5]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d3d4      	bcc.n	8001186 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	3301      	adds	r3, #1
 80011e0:	73bb      	strb	r3, [r7, #14]
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	3301      	adds	r3, #1
 80011e6:	71bb      	strb	r3, [r7, #6]
 80011e8:	7bba      	ldrb	r2, [r7, #14]
 80011ea:	7e3b      	ldrb	r3, [r7, #24]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3c7      	bcc.n	8001180 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80011f0:	e000      	b.n	80011f4 <ssd1306_DrawBitmap+0xb0>
        return;
 80011f2:	bf00      	nop
}
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001204:	2381      	movs	r3, #129	@ 0x81
 8001206:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fd4e 	bl	8000cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fd4a 	bl	8000cac <ssd1306_WriteCommand>
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001230:	23af      	movs	r3, #175	@ 0xaf
 8001232:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <ssd1306_SetDisplayOn+0x38>)
 8001236:	2201      	movs	r2, #1
 8001238:	715a      	strb	r2, [r3, #5]
 800123a:	e004      	b.n	8001246 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800123c:	23ae      	movs	r3, #174	@ 0xae
 800123e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <ssd1306_SetDisplayOn+0x38>)
 8001242:	2200      	movs	r2, #0
 8001244:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fd2f 	bl	8000cac <ssd1306_WriteCommand>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000520 	.word	0x20000520

0800125c <ssd1306_TestMenu>:

//////////////////////////////
///////////////////


void ssd1306_TestMenu(char *first_row, char *second_row, Menu_Option *current_option) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af02      	add	r7, sp, #8
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
#ifdef SSD1306_INCLUDE_FONT_11x18

    ssd1306_Fill(Black);
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff fdbb 	bl	8000de4 <ssd1306_Fill>
    if(current_option != 0) {
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d009      	beq.n	8001288 <ssd1306_TestMenu+0x2c>
    	ssd1306_DrawBitmap(32,0,bitmap_arrow_up_64x14,64,14,White);
 8001274:	2301      	movs	r3, #1
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	230e      	movs	r3, #14
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2340      	movs	r3, #64	@ 0x40
 800127e:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <ssd1306_TestMenu+0x80>)
 8001280:	2100      	movs	r1, #0
 8001282:	2020      	movs	r0, #32
 8001284:	f7ff ff5e 	bl	8001144 <ssd1306_DrawBitmap>
    }
    //ssd1306_UpdateScreen();
    ssd1306_SetCursor(0, 14);
 8001288:	210e      	movs	r1, #14
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fef4 	bl	8001078 <ssd1306_SetCursor>
    ssd1306_WriteString(first_row, Font_11x18, White);
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <ssd1306_TestMenu+0x84>)
 8001292:	2201      	movs	r2, #1
 8001294:	9200      	str	r2, [sp, #0]
 8001296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f7ff fec7 	bl	800102c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 14+18);
 800129e:	2120      	movs	r1, #32
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff fee9 	bl	8001078 <ssd1306_SetCursor>
    ssd1306_WriteString(second_row, Font_11x18, White);
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <ssd1306_TestMenu+0x84>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ae:	68b8      	ldr	r0, [r7, #8]
 80012b0:	f7ff febc 	bl	800102c <ssd1306_WriteString>
    if(current_option <= 2) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d809      	bhi.n	80012ce <ssd1306_TestMenu+0x72>
    	ssd1306_DrawBitmap(32,50,bitmap_arrow_down_64x14,64,14,White);
 80012ba:	2301      	movs	r3, #1
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	230e      	movs	r3, #14
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2340      	movs	r3, #64	@ 0x40
 80012c4:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <ssd1306_TestMenu+0x88>)
 80012c6:	2132      	movs	r1, #50	@ 0x32
 80012c8:	2020      	movs	r0, #32
 80012ca:	f7ff ff3b 	bl	8001144 <ssd1306_DrawBitmap>
    }
    ssd1306_UpdateScreen();
 80012ce:	f7ff fda1 	bl	8000e14 <ssd1306_UpdateScreen>
#endif
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	080058b4 	.word	0x080058b4
 80012e0:	0800582c 	.word	0x0800582c
 80012e4:	08005844 	.word	0x08005844

080012e8 <ssd1306_TestIntervalSetting>:


void ssd1306_TestIntervalSetting(int **timeBar, unsigned int *timeInterval) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]

	ssd1306_Fill(Black);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff fd76 	bl	8000de4 <ssd1306_Fill>

	ssd1306_FillRectangle( 4, 20,  36, 44, White);
 80012f8:	2301      	movs	r3, #1
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	232c      	movs	r3, #44	@ 0x2c
 80012fe:	2224      	movs	r2, #36	@ 0x24
 8001300:	2114      	movs	r1, #20
 8001302:	2004      	movs	r0, #4
 8001304:	f7ff fed0 	bl	80010a8 <ssd1306_FillRectangle>

	ssd1306_FillRectangle(51, 20,  84, 44, White);
 8001308:	2301      	movs	r3, #1
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	232c      	movs	r3, #44	@ 0x2c
 800130e:	2254      	movs	r2, #84	@ 0x54
 8001310:	2114      	movs	r1, #20
 8001312:	2033      	movs	r0, #51	@ 0x33
 8001314:	f7ff fec8 	bl	80010a8 <ssd1306_FillRectangle>

	ssd1306_FillRectangle(93, 20, 124, 44, White);
 8001318:	2301      	movs	r3, #1
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	232c      	movs	r3, #44	@ 0x2c
 800131e:	227c      	movs	r2, #124	@ 0x7c
 8001320:	2114      	movs	r1, #20
 8001322:	205d      	movs	r0, #93	@ 0x5d
 8001324:	f7ff fec0 	bl	80010a8 <ssd1306_FillRectangle>

	char str[2] = "";
 8001328:	2300      	movs	r3, #0
 800132a:	81bb      	strh	r3, [r7, #12]

	ssd1306_SetCursor(4, 20);
 800132c:	2114      	movs	r1, #20
 800132e:	2004      	movs	r0, #4
 8001330:	f7ff fea2 	bl	8001078 <ssd1306_SetCursor>
	sprintf(str, "%02d", timeBar[0]);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4918      	ldr	r1, [pc, #96]	@ (80013a0 <ssd1306_TestIntervalSetting+0xb8>)
 800133e:	4618      	mov	r0, r3
 8001340:	f001 fdae 	bl	8002ea0 <siprintf>
	ssd1306_WriteString(str, Font_16x24, Black);
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <ssd1306_TestIntervalSetting+0xbc>)
 8001346:	f107 000c 	add.w	r0, r7, #12
 800134a:	2200      	movs	r2, #0
 800134c:	9200      	str	r2, [sp, #0]
 800134e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001350:	f7ff fe6c 	bl	800102c <ssd1306_WriteString>

	ssd1306_WriteString(":", Font_16x24, Black);
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <ssd1306_TestIntervalSetting+0xbc>)
 8001356:	2200      	movs	r2, #0
 8001358:	9200      	str	r2, [sp, #0]
 800135a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800135c:	4812      	ldr	r0, [pc, #72]	@ (80013a8 <ssd1306_TestIntervalSetting+0xc0>)
 800135e:	f7ff fe65 	bl	800102c <ssd1306_WriteString>

	sprintf(str, "%02d", timeBar[1]);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3304      	adds	r3, #4
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	490c      	ldr	r1, [pc, #48]	@ (80013a0 <ssd1306_TestIntervalSetting+0xb8>)
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fd96 	bl	8002ea0 <siprintf>
	ssd1306_WriteString(str, Font_16x24, Black);
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <ssd1306_TestIntervalSetting+0xbc>)
 8001376:	f107 000c 	add.w	r0, r7, #12
 800137a:	2200      	movs	r2, #0
 800137c:	9200      	str	r2, [sp, #0]
 800137e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001380:	f7ff fe54 	bl	800102c <ssd1306_WriteString>

	ssd1306_WriteString("OK", Font_16x24, Black);
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <ssd1306_TestIntervalSetting+0xbc>)
 8001386:	2200      	movs	r2, #0
 8001388:	9200      	str	r2, [sp, #0]
 800138a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800138c:	4807      	ldr	r0, [pc, #28]	@ (80013ac <ssd1306_TestIntervalSetting+0xc4>)
 800138e:	f7ff fe4d 	bl	800102c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001392:	f7ff fd3f 	bl	8000e14 <ssd1306_UpdateScreen>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	080038a0 	.word	0x080038a0
 80013a4:	08005838 	.word	0x08005838
 80013a8:	080038a8 	.word	0x080038a8
 80013ac:	080038ac 	.word	0x080038ac

080013b0 <ssd1306_TestDurationSetting>:


void ssd1306_TestDurationSetting(unsigned int *timeDuration) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff fd13 	bl	8000de4 <ssd1306_Fill>

	ssd1306_FillRectangle(4, 20, 52, 44, White);
 80013be:	2301      	movs	r3, #1
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	232c      	movs	r3, #44	@ 0x2c
 80013c4:	2234      	movs	r2, #52	@ 0x34
 80013c6:	2114      	movs	r1, #20
 80013c8:	2004      	movs	r0, #4
 80013ca:	f7ff fe6d 	bl	80010a8 <ssd1306_FillRectangle>

	ssd1306_FillRectangle(93, 20, 124, 44, White);
 80013ce:	2301      	movs	r3, #1
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	232c      	movs	r3, #44	@ 0x2c
 80013d4:	227c      	movs	r2, #124	@ 0x7c
 80013d6:	2114      	movs	r1, #20
 80013d8:	205d      	movs	r0, #93	@ 0x5d
 80013da:	f7ff fe65 	bl	80010a8 <ssd1306_FillRectangle>

	char str[2] = "";
 80013de:	2300      	movs	r3, #0
 80013e0:	813b      	strh	r3, [r7, #8]

	unsigned int n = (*timeDuration) / 1000;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a16      	ldr	r2, [pc, #88]	@ (8001440 <ssd1306_TestDurationSetting+0x90>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	099b      	lsrs	r3, r3, #6
 80013ee:	60fb      	str	r3, [r7, #12]

	if(durationSection == SECONDS) {
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <ssd1306_TestDurationSetting+0x94>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d11f      	bne.n	8001438 <ssd1306_TestDurationSetting+0x88>
		ssd1306_SetCursor(4, 20);
 80013f8:	2114      	movs	r1, #20
 80013fa:	2004      	movs	r0, #4
 80013fc:	f7ff fe3c 	bl	8001078 <ssd1306_SetCursor>
		sprintf(str, "%02d", n);
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4910      	ldr	r1, [pc, #64]	@ (8001448 <ssd1306_TestDurationSetting+0x98>)
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fd49 	bl	8002ea0 <siprintf>
		ssd1306_WriteString(str, Font_16x24, Black);
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <ssd1306_TestDurationSetting+0x9c>)
 8001410:	f107 0008 	add.w	r0, r7, #8
 8001414:	2200      	movs	r2, #0
 8001416:	9200      	str	r2, [sp, #0]
 8001418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141a:	f7ff fe07 	bl	800102c <ssd1306_WriteString>

		ssd1306_SetCursor(93, 20);
 800141e:	2114      	movs	r1, #20
 8001420:	205d      	movs	r0, #93	@ 0x5d
 8001422:	f7ff fe29 	bl	8001078 <ssd1306_SetCursor>
		ssd1306_WriteString("OK", Font_16x24, Black);
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <ssd1306_TestDurationSetting+0x9c>)
 8001428:	2200      	movs	r2, #0
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800142e:	4808      	ldr	r0, [pc, #32]	@ (8001450 <ssd1306_TestDurationSetting+0xa0>)
 8001430:	f7ff fdfc 	bl	800102c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001434:	f7ff fcee 	bl	8000e14 <ssd1306_UpdateScreen>
	}
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	10624dd3 	.word	0x10624dd3
 8001444:	2000052c 	.word	0x2000052c
 8001448:	080038a0 	.word	0x080038a0
 800144c:	08005838 	.word	0x08005838
 8001450:	080038ac 	.word	0x080038ac

08001454 <ssd1306_TurnOff>:


void ssd1306_TurnOff() {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff fcc3 	bl	8000de4 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 800145e:	f7ff fcd9 	bl	8000e14 <ssd1306_UpdateScreen>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a0f      	ldr	r2, [pc, #60]	@ (80014b4 <HAL_MspInit+0x4c>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <HAL_MspInit+0x4c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <HAL_MspInit+0x4c>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	@ 0x40
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_MspInit+0x4c>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a19      	ldr	r2, [pc, #100]	@ (800153c <HAL_I2C_MspInit+0x84>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d12b      	bne.n	8001532 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <HAL_I2C_MspInit+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a17      	ldr	r2, [pc, #92]	@ (8001540 <HAL_I2C_MspInit+0x88>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_I2C_MspInit+0x88>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f6:	23c0      	movs	r3, #192	@ 0xc0
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fa:	2312      	movs	r3, #18
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001506:	2304      	movs	r3, #4
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <HAL_I2C_MspInit+0x8c>)
 8001512:	f000 fa37 	bl	8001984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <HAL_I2C_MspInit+0x88>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	4a08      	ldr	r2, [pc, #32]	@ (8001540 <HAL_I2C_MspInit+0x88>)
 8001520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001524:	6413      	str	r3, [r2, #64]	@ 0x40
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_I2C_MspInit+0x88>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	@ 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40005400 	.word	0x40005400
 8001540:	40023800 	.word	0x40023800
 8001544:	40020400 	.word	0x40020400

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <NMI_Handler+0x4>

08001550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <MemManage_Handler+0x4>

08001560 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <BusFault_Handler+0x4>

08001568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <UsageFault_Handler+0x4>

08001570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159e:	f000 f8c7 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	@ (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	@ (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f001 fca4 	bl	8002f24 <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20020000 	.word	0x20020000
 8001608:	00000400 	.word	0x00000400
 800160c:	20000530 	.word	0x20000530
 8001610:	20000680 	.word	0x20000680

08001614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001638:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001670 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163c:	f7ff ffea 	bl	8001614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001640:	480c      	ldr	r0, [pc, #48]	@ (8001674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001642:	490d      	ldr	r1, [pc, #52]	@ (8001678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001644:	4a0d      	ldr	r2, [pc, #52]	@ (800167c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001658:	4c0a      	ldr	r4, [pc, #40]	@ (8001684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001666:	f001 fc63 	bl	8002f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166a:	f7fe ffef 	bl	800064c <main>
  bx  lr    
 800166e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800167c:	08005980 	.word	0x08005980
  ldr r2, =_sbss
 8001680:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001684:	20000680 	.word	0x20000680

08001688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC_IRQHandler>
	...

0800168c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001690:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <HAL_Init+0x40>)
 8001696:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800169a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800169c:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <HAL_Init+0x40>)
 80016a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <HAL_Init+0x40>)
 80016ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f000 f931 	bl	800191c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ba:	200f      	movs	r0, #15
 80016bc:	f000 f808 	bl	80016d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c0:	f7ff fed2 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023c00 	.word	0x40023c00

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_InitTick+0x54>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_InitTick+0x58>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f93b 	bl	800196a <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f000 f911 	bl	8001932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	@ (800172c <HAL_InitTick+0x5c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000044 	.word	0x20000044
 8001728:	2000004c 	.word	0x2000004c
 800172c:	20000048 	.word	0x20000048

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2000004c 	.word	0x2000004c
 8001754:	20000534 	.word	0x20000534

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000534 	.word	0x20000534

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000004c 	.word	0x2000004c

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	@ (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	@ (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	@ 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	@ 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e8:	d301      	bcc.n	80018ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00f      	b.n	800190e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <SysTick_Config+0x40>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f6:	210f      	movs	r1, #15
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f7ff ff8e 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <SysTick_Config+0x40>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001906:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <SysTick_Config+0x40>)
 8001908:	2207      	movs	r2, #7
 800190a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	e000e010 	.word	0xe000e010

0800191c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff47 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001944:	f7ff ff5c 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	f7ff ff8e 	bl	8001870 <NVIC_EncodePriority>
 8001954:	4602      	mov	r2, r0
 8001956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff5d 	bl	800181c <__NVIC_SetPriority>
}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffb0 	bl	80018d8 <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	@ 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	e159      	b.n	8001c54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f040 8148 	bne.w	8001c4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d005      	beq.n	80019d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d130      	bne.n	8001a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 0201 	and.w	r2, r3, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d017      	beq.n	8001a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d123      	bne.n	8001ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	69b9      	ldr	r1, [r7, #24]
 8001ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80a2 	beq.w	8001c4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b57      	ldr	r3, [pc, #348]	@ (8001c6c <HAL_GPIO_Init+0x2e8>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	4a56      	ldr	r2, [pc, #344]	@ (8001c6c <HAL_GPIO_Init+0x2e8>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1a:	4b54      	ldr	r3, [pc, #336]	@ (8001c6c <HAL_GPIO_Init+0x2e8>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b26:	4a52      	ldr	r2, [pc, #328]	@ (8001c70 <HAL_GPIO_Init+0x2ec>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a49      	ldr	r2, [pc, #292]	@ (8001c74 <HAL_GPIO_Init+0x2f0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d019      	beq.n	8001b86 <HAL_GPIO_Init+0x202>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a48      	ldr	r2, [pc, #288]	@ (8001c78 <HAL_GPIO_Init+0x2f4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <HAL_GPIO_Init+0x1fe>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a47      	ldr	r2, [pc, #284]	@ (8001c7c <HAL_GPIO_Init+0x2f8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00d      	beq.n	8001b7e <HAL_GPIO_Init+0x1fa>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a46      	ldr	r2, [pc, #280]	@ (8001c80 <HAL_GPIO_Init+0x2fc>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d007      	beq.n	8001b7a <HAL_GPIO_Init+0x1f6>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a45      	ldr	r2, [pc, #276]	@ (8001c84 <HAL_GPIO_Init+0x300>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_GPIO_Init+0x1f2>
 8001b72:	2304      	movs	r3, #4
 8001b74:	e008      	b.n	8001b88 <HAL_GPIO_Init+0x204>
 8001b76:	2307      	movs	r3, #7
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x204>
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e004      	b.n	8001b88 <HAL_GPIO_Init+0x204>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_Init+0x204>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_GPIO_Init+0x204>
 8001b86:	2300      	movs	r3, #0
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	f002 0203 	and.w	r2, r2, #3
 8001b8e:	0092      	lsls	r2, r2, #2
 8001b90:	4093      	lsls	r3, r2
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b98:	4935      	ldr	r1, [pc, #212]	@ (8001c70 <HAL_GPIO_Init+0x2ec>)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba6:	4b38      	ldr	r3, [pc, #224]	@ (8001c88 <HAL_GPIO_Init+0x304>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bca:	4a2f      	ldr	r2, [pc, #188]	@ (8001c88 <HAL_GPIO_Init+0x304>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c88 <HAL_GPIO_Init+0x304>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf4:	4a24      	ldr	r2, [pc, #144]	@ (8001c88 <HAL_GPIO_Init+0x304>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <HAL_GPIO_Init+0x304>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c88 <HAL_GPIO_Init+0x304>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c24:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <HAL_GPIO_Init+0x304>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c48:	4a0f      	ldr	r2, [pc, #60]	@ (8001c88 <HAL_GPIO_Init+0x304>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3301      	adds	r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	f67f aea2 	bls.w	80019a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3724      	adds	r7, #36	@ 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40013800 	.word	0x40013800
 8001c74:	40020000 	.word	0x40020000
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	40020800 	.word	0x40020800
 8001c80:	40020c00 	.word	0x40020c00
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40013c00 	.word	0x40013c00

08001c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e12b      	b.n	8001f26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fbe8 	bl	80014b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2224      	movs	r2, #36	@ 0x24
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d20:	f001 f8aa 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8001d24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4a81      	ldr	r2, [pc, #516]	@ (8001f30 <HAL_I2C_Init+0x274>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d807      	bhi.n	8001d40 <HAL_I2C_Init+0x84>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4a80      	ldr	r2, [pc, #512]	@ (8001f34 <HAL_I2C_Init+0x278>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	bf94      	ite	ls
 8001d38:	2301      	movls	r3, #1
 8001d3a:	2300      	movhi	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	e006      	b.n	8001d4e <HAL_I2C_Init+0x92>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4a7d      	ldr	r2, [pc, #500]	@ (8001f38 <HAL_I2C_Init+0x27c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	bf94      	ite	ls
 8001d48:	2301      	movls	r3, #1
 8001d4a:	2300      	movhi	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0e7      	b.n	8001f26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4a78      	ldr	r2, [pc, #480]	@ (8001f3c <HAL_I2C_Init+0x280>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0c9b      	lsrs	r3, r3, #18
 8001d60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4a6a      	ldr	r2, [pc, #424]	@ (8001f30 <HAL_I2C_Init+0x274>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d802      	bhi.n	8001d90 <HAL_I2C_Init+0xd4>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	e009      	b.n	8001da4 <HAL_I2C_Init+0xe8>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	4a69      	ldr	r2, [pc, #420]	@ (8001f40 <HAL_I2C_Init+0x284>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	099b      	lsrs	r3, r3, #6
 8001da2:	3301      	adds	r3, #1
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	430b      	orrs	r3, r1
 8001daa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001db6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	495c      	ldr	r1, [pc, #368]	@ (8001f30 <HAL_I2C_Init+0x274>)
 8001dc0:	428b      	cmp	r3, r1
 8001dc2:	d819      	bhi.n	8001df8 <HAL_I2C_Init+0x13c>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1e59      	subs	r1, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd2:	1c59      	adds	r1, r3, #1
 8001dd4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001dd8:	400b      	ands	r3, r1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00a      	beq.n	8001df4 <HAL_I2C_Init+0x138>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1e59      	subs	r1, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df2:	e051      	b.n	8001e98 <HAL_I2C_Init+0x1dc>
 8001df4:	2304      	movs	r3, #4
 8001df6:	e04f      	b.n	8001e98 <HAL_I2C_Init+0x1dc>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d111      	bne.n	8001e24 <HAL_I2C_Init+0x168>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1e58      	subs	r0, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	440b      	add	r3, r1
 8001e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	e012      	b.n	8001e4a <HAL_I2C_Init+0x18e>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e58      	subs	r0, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	0099      	lsls	r1, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Init+0x196>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e022      	b.n	8001e98 <HAL_I2C_Init+0x1dc>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10e      	bne.n	8001e78 <HAL_I2C_Init+0x1bc>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1e58      	subs	r0, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6859      	ldr	r1, [r3, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	440b      	add	r3, r1
 8001e68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e76:	e00f      	b.n	8001e98 <HAL_I2C_Init+0x1dc>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1e58      	subs	r0, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	0099      	lsls	r1, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	6809      	ldr	r1, [r1, #0]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69da      	ldr	r2, [r3, #28]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ec6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6911      	ldr	r1, [r2, #16]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68d2      	ldr	r2, [r2, #12]
 8001ed2:	4311      	orrs	r1, r2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	000186a0 	.word	0x000186a0
 8001f34:	001e847f 	.word	0x001e847f
 8001f38:	003d08ff 	.word	0x003d08ff
 8001f3c:	431bde83 	.word	0x431bde83
 8001f40:	10624dd3 	.word	0x10624dd3

08001f44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	817b      	strh	r3, [r7, #10]
 8001f56:	460b      	mov	r3, r1
 8001f58:	813b      	strh	r3, [r7, #8]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f5e:	f7ff fbfb 	bl	8001758 <HAL_GetTick>
 8001f62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	f040 80d9 	bne.w	8002124 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2319      	movs	r3, #25
 8001f78:	2201      	movs	r2, #1
 8001f7a:	496d      	ldr	r1, [pc, #436]	@ (8002130 <HAL_I2C_Mem_Write+0x1ec>)
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f971 	bl	8002264 <I2C_WaitOnFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e0cc      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_I2C_Mem_Write+0x56>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e0c5      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d007      	beq.n	8001fc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2221      	movs	r2, #33	@ 0x21
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2240      	movs	r2, #64	@ 0x40
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a3a      	ldr	r2, [r7, #32]
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a4d      	ldr	r2, [pc, #308]	@ (8002134 <HAL_I2C_Mem_Write+0x1f0>)
 8002000:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002002:	88f8      	ldrh	r0, [r7, #6]
 8002004:	893a      	ldrh	r2, [r7, #8]
 8002006:	8979      	ldrh	r1, [r7, #10]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4603      	mov	r3, r0
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f890 	bl	8002138 <I2C_RequestMemoryWrite>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d052      	beq.n	80020c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e081      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 fa36 	bl	8002498 <I2C_WaitOnTXEFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00d      	beq.n	800204e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	2b04      	cmp	r3, #4
 8002038:	d107      	bne.n	800204a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002048:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06b      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b04      	cmp	r3, #4
 800208a:	d11b      	bne.n	80020c4 <HAL_I2C_Mem_Write+0x180>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	d017      	beq.n	80020c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1aa      	bne.n	8002022 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fa29 	bl	8002528 <I2C_WaitOnBTFFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00d      	beq.n	80020f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d107      	bne.n	80020f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e016      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	00100002 	.word	0x00100002
 8002134:	ffff0000 	.word	0xffff0000

08002138 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4603      	mov	r3, r0
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	460b      	mov	r3, r1
 800214c:	813b      	strh	r3, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002160:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	2200      	movs	r2, #0
 800216a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f878 	bl	8002264 <I2C_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002188:	d103      	bne.n	8002192 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002190:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e05f      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002196:	897b      	ldrh	r3, [r7, #10]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	6a3a      	ldr	r2, [r7, #32]
 80021aa:	492d      	ldr	r1, [pc, #180]	@ (8002260 <I2C_RequestMemoryWrite+0x128>)
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f8d3 	bl	8002358 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e04c      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d4:	6a39      	ldr	r1, [r7, #32]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f95e 	bl	8002498 <I2C_WaitOnTXEFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d107      	bne.n	80021fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e02b      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002204:	893b      	ldrh	r3, [r7, #8]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	e021      	b.n	8002254 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002210:	893b      	ldrh	r3, [r7, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	b29b      	uxth	r3, r3
 8002216:	b2da      	uxtb	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800221e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002220:	6a39      	ldr	r1, [r7, #32]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f938 	bl	8002498 <I2C_WaitOnTXEFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	2b04      	cmp	r3, #4
 8002234:	d107      	bne.n	8002246 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002244:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e005      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800224a:	893b      	ldrh	r3, [r7, #8]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	00010002 	.word	0x00010002

08002264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002274:	e048      	b.n	8002308 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d044      	beq.n	8002308 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227e:	f7ff fa6b 	bl	8001758 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d302      	bcc.n	8002294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d139      	bne.n	8002308 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0c1b      	lsrs	r3, r3, #16
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d10d      	bne.n	80022ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	43da      	mvns	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	e00c      	b.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	43da      	mvns	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4013      	ands	r3, r2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d116      	bne.n	8002308 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f043 0220 	orr.w	r2, r3, #32
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e023      	b.n	8002350 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	0c1b      	lsrs	r3, r3, #16
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d10d      	bne.n	800232e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	43da      	mvns	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4013      	ands	r3, r2
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	e00c      	b.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	43da      	mvns	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	4013      	ands	r3, r2
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	429a      	cmp	r2, r3
 800234c:	d093      	beq.n	8002276 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002366:	e071      	b.n	800244c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002376:	d123      	bne.n	80023c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002386:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002390:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	f043 0204 	orr.w	r2, r3, #4
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e067      	b.n	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c6:	d041      	beq.n	800244c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c8:	f7ff f9c6 	bl	8001758 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d302      	bcc.n	80023de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d136      	bne.n	800244c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d10c      	bne.n	8002402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4013      	ands	r3, r2
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	bf14      	ite	ne
 80023fa:	2301      	movne	r3, #1
 80023fc:	2300      	moveq	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	e00b      	b.n	800241a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	43da      	mvns	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	4013      	ands	r3, r2
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf14      	ite	ne
 8002414:	2301      	movne	r3, #1
 8002416:	2300      	moveq	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	f043 0220 	orr.w	r2, r3, #32
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e021      	b.n	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d10c      	bne.n	8002470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	43da      	mvns	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	4013      	ands	r3, r2
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e00b      	b.n	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4013      	ands	r3, r2
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	f47f af6d 	bne.w	8002368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024a4:	e034      	b.n	8002510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f886 	bl	80025b8 <I2C_IsAcknowledgeFailed>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e034      	b.n	8002520 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d028      	beq.n	8002510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024be:	f7ff f94b 	bl	8001758 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d302      	bcc.n	80024d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d11d      	bne.n	8002510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024de:	2b80      	cmp	r3, #128	@ 0x80
 80024e0:	d016      	beq.n	8002510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e007      	b.n	8002520 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251a:	2b80      	cmp	r3, #128	@ 0x80
 800251c:	d1c3      	bne.n	80024a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002534:	e034      	b.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f83e 	bl	80025b8 <I2C_IsAcknowledgeFailed>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e034      	b.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d028      	beq.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254e:	f7ff f903 	bl	8001758 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d11d      	bne.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b04      	cmp	r3, #4
 8002570:	d016      	beq.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e007      	b.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d1c3      	bne.n	8002536 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ce:	d11b      	bne.n	8002608 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f043 0204 	orr.w	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e267      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d075      	beq.n	8002722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002636:	4b88      	ldr	r3, [pc, #544]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b04      	cmp	r3, #4
 8002640:	d00c      	beq.n	800265c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b85      	ldr	r3, [pc, #532]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	2b08      	cmp	r3, #8
 800264c:	d112      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4b82      	ldr	r3, [pc, #520]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002656:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800265a:	d10b      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	4b7e      	ldr	r3, [pc, #504]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05b      	beq.n	8002720 <HAL_RCC_OscConfig+0x108>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d157      	bne.n	8002720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e242      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0x74>
 800267e:	4b76      	ldr	r3, [pc, #472]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a75      	ldr	r2, [pc, #468]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b70      	ldr	r3, [pc, #448]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6f      	ldr	r2, [pc, #444]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6c      	ldr	r2, [pc, #432]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 80026b0:	4b69      	ldr	r3, [pc, #420]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a68      	ldr	r2, [pc, #416]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b66      	ldr	r3, [pc, #408]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a65      	ldr	r2, [pc, #404]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff f842 	bl	8001758 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff f83e 	bl	8001758 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	@ 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e207      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xc0>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff f82e 	bl	8001758 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff f82a 	bl	8001758 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1f3      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0xe8>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272e:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b47      	ldr	r3, [pc, #284]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b44      	ldr	r3, [pc, #272]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b41      	ldr	r3, [pc, #260]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1c7      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4937      	ldr	r1, [pc, #220]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b34      	ldr	r3, [pc, #208]	@ (800285c <HAL_RCC_OscConfig+0x244>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe ffe3 	bl	8001758 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe ffdf 	bl	8001758 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1a8      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4925      	ldr	r1, [pc, #148]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b24      	ldr	r3, [pc, #144]	@ (800285c <HAL_RCC_OscConfig+0x244>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe ffc2 	bl	8001758 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe ffbe 	bl	8001758 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e187      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d036      	beq.n	8002870 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_RCC_OscConfig+0x248>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fe ffa2 	bl	8001758 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe ff9e 	bl	8001758 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e167      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800282c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x200>
 8002836:	e01b      	b.n	8002870 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HAL_RCC_OscConfig+0x248>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fe ff8b 	bl	8001758 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	e00e      	b.n	8002864 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002846:	f7fe ff87 	bl	8001758 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d907      	bls.n	8002864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e150      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
 8002858:	40023800 	.word	0x40023800
 800285c:	42470000 	.word	0x42470000
 8002860:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002864:	4b88      	ldr	r3, [pc, #544]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ea      	bne.n	8002846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8097 	beq.w	80029ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002882:	4b81      	ldr	r3, [pc, #516]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b7d      	ldr	r3, [pc, #500]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	4a7c      	ldr	r2, [pc, #496]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	@ 0x40
 800289e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b77      	ldr	r3, [pc, #476]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d118      	bne.n	80028ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b74      	ldr	r3, [pc, #464]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a73      	ldr	r2, [pc, #460]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c6:	f7fe ff47 	bl	8001758 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7fe ff43 	bl	8001758 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e10c      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x2ea>
 80028f4:	4b64      	ldr	r3, [pc, #400]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a63      	ldr	r2, [pc, #396]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002900:	e01c      	b.n	800293c <HAL_RCC_OscConfig+0x324>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x30c>
 800290a:	4b5f      	ldr	r3, [pc, #380]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290e:	4a5e      	ldr	r2, [pc, #376]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6713      	str	r3, [r2, #112]	@ 0x70
 8002916:	4b5c      	ldr	r3, [pc, #368]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	4a5b      	ldr	r2, [pc, #364]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6713      	str	r3, [r2, #112]	@ 0x70
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0x324>
 8002924:	4b58      	ldr	r3, [pc, #352]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	4a57      	ldr	r2, [pc, #348]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002930:	4b55      	ldr	r3, [pc, #340]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002934:	4a54      	ldr	r2, [pc, #336]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002936:	f023 0304 	bic.w	r3, r3, #4
 800293a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe ff08 	bl	8001758 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	e00a      	b.n	8002962 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7fe ff04 	bl	8001758 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0cb      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002962:	4b49      	ldr	r3, [pc, #292]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ee      	beq.n	800294c <HAL_RCC_OscConfig+0x334>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7fe fef2 	bl	8001758 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe feee 	bl	8001758 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e0b5      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ee      	bne.n	8002978 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a0:	4b39      	ldr	r3, [pc, #228]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	4a38      	ldr	r2, [pc, #224]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a1 	beq.w	8002af8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b6:	4b34      	ldr	r3, [pc, #208]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d05c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d141      	bne.n	8002a4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b31      	ldr	r3, [pc, #196]	@ (8002a90 <HAL_RCC_OscConfig+0x478>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe fec2 	bl	8001758 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe febe 	bl	8001758 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e087      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	4b27      	ldr	r3, [pc, #156]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	491b      	ldr	r1, [pc, #108]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x478>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe fe97 	bl	8001758 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe fe93 	bl	8001758 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e05c      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x416>
 8002a4c:	e054      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_RCC_OscConfig+0x478>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe fe80 	bl	8001758 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fe7c 	bl	8001758 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e045      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x444>
 8002a7a:	e03d      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e038      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_RCC_OscConfig+0x4ec>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d028      	beq.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d121      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d111      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b68      	ldr	r3, [pc, #416]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d90c      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b65      	ldr	r3, [pc, #404]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b63      	ldr	r3, [pc, #396]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0b8      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b5c:	4b59      	ldr	r3, [pc, #356]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a58      	ldr	r2, [pc, #352]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b74:	4b53      	ldr	r3, [pc, #332]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a52      	ldr	r2, [pc, #328]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b50      	ldr	r3, [pc, #320]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	494d      	ldr	r1, [pc, #308]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d044      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d119      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e07f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e067      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b37      	ldr	r3, [pc, #220]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4934      	ldr	r1, [pc, #208]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fdae 	bl	8001758 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fe fdaa 	bl	8001758 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e04f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b25      	ldr	r3, [pc, #148]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d20c      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b22      	ldr	r3, [pc, #136]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e032      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4916      	ldr	r1, [pc, #88]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7a:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	490e      	ldr	r1, [pc, #56]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8e:	f000 f821 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490a      	ldr	r1, [pc, #40]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a09      	ldr	r2, [pc, #36]	@ (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002caa:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe fd0e 	bl	80016d0 <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08005924 	.word	0x08005924
 8002ccc:	20000044 	.word	0x20000044
 8002cd0:	20000048 	.word	0x20000048

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd8:	b090      	sub	sp, #64	@ 0x40
 8002cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cec:	4b59      	ldr	r3, [pc, #356]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d00d      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x40>
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	f200 80a1 	bhi.w	8002e40 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x34>
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d06:	e09b      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b53      	ldr	r3, [pc, #332]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002d0c:	e09b      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d0e:	4b53      	ldr	r3, [pc, #332]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d12:	e098      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d14:	4b4f      	ldr	r3, [pc, #316]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d028      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	2200      	movs	r2, #0
 8002d32:	623b      	str	r3, [r7, #32]
 8002d34:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4b47      	ldr	r3, [pc, #284]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d40:	fb03 f201 	mul.w	r2, r3, r1
 8002d44:	2300      	movs	r3, #0
 8002d46:	fb00 f303 	mul.w	r3, r0, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4a43      	ldr	r2, [pc, #268]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d4e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d54:	460a      	mov	r2, r1
 8002d56:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d5a:	4413      	add	r3, r2
 8002d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d60:	2200      	movs	r2, #0
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	61fa      	str	r2, [r7, #28]
 8002d66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d6e:	f7fd fa87 	bl	8000280 <__aeabi_uldivmod>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4613      	mov	r3, r2
 8002d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d7a:	e053      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7c:	4b35      	ldr	r3, [pc, #212]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	2200      	movs	r2, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	617a      	str	r2, [r7, #20]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d8e:	f04f 0b00 	mov.w	fp, #0
 8002d92:	4652      	mov	r2, sl
 8002d94:	465b      	mov	r3, fp
 8002d96:	f04f 0000 	mov.w	r0, #0
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	0159      	lsls	r1, r3, #5
 8002da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da4:	0150      	lsls	r0, r2, #5
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	ebb2 080a 	subs.w	r8, r2, sl
 8002dae:	eb63 090b 	sbc.w	r9, r3, fp
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dc6:	ebb2 0408 	subs.w	r4, r2, r8
 8002dca:	eb63 0509 	sbc.w	r5, r3, r9
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	00eb      	lsls	r3, r5, #3
 8002dd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ddc:	00e2      	lsls	r2, r4, #3
 8002dde:	4614      	mov	r4, r2
 8002de0:	461d      	mov	r5, r3
 8002de2:	eb14 030a 	adds.w	r3, r4, sl
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	eb45 030b 	adc.w	r3, r5, fp
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	028b      	lsls	r3, r1, #10
 8002dfe:	4621      	mov	r1, r4
 8002e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e04:	4621      	mov	r1, r4
 8002e06:	028a      	lsls	r2, r1, #10
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	60fa      	str	r2, [r7, #12]
 8002e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e18:	f7fd fa32 	bl	8000280 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002e34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3740      	adds	r7, #64	@ 0x40
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	017d7840 	.word	0x017d7840

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000044 	.word	0x20000044

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e7c:	f7ff fff0 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0a9b      	lsrs	r3, r3, #10
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4903      	ldr	r1, [pc, #12]	@ (8002e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	08005934 	.word	0x08005934

08002ea0 <siprintf>:
 8002ea0:	b40e      	push	{r1, r2, r3}
 8002ea2:	b500      	push	{lr}
 8002ea4:	b09c      	sub	sp, #112	@ 0x70
 8002ea6:	ab1d      	add	r3, sp, #116	@ 0x74
 8002ea8:	9002      	str	r0, [sp, #8]
 8002eaa:	9006      	str	r0, [sp, #24]
 8002eac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002eb0:	4809      	ldr	r0, [pc, #36]	@ (8002ed8 <siprintf+0x38>)
 8002eb2:	9107      	str	r1, [sp, #28]
 8002eb4:	9104      	str	r1, [sp, #16]
 8002eb6:	4909      	ldr	r1, [pc, #36]	@ (8002edc <siprintf+0x3c>)
 8002eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ebc:	9105      	str	r1, [sp, #20]
 8002ebe:	6800      	ldr	r0, [r0, #0]
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	a902      	add	r1, sp, #8
 8002ec4:	f000 f9bc 	bl	8003240 <_svfiprintf_r>
 8002ec8:	9b02      	ldr	r3, [sp, #8]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	b01c      	add	sp, #112	@ 0x70
 8002ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ed4:	b003      	add	sp, #12
 8002ed6:	4770      	bx	lr
 8002ed8:	20000050 	.word	0x20000050
 8002edc:	ffff0208 	.word	0xffff0208

08002ee0 <memmove>:
 8002ee0:	4288      	cmp	r0, r1
 8002ee2:	b510      	push	{r4, lr}
 8002ee4:	eb01 0402 	add.w	r4, r1, r2
 8002ee8:	d902      	bls.n	8002ef0 <memmove+0x10>
 8002eea:	4284      	cmp	r4, r0
 8002eec:	4623      	mov	r3, r4
 8002eee:	d807      	bhi.n	8002f00 <memmove+0x20>
 8002ef0:	1e43      	subs	r3, r0, #1
 8002ef2:	42a1      	cmp	r1, r4
 8002ef4:	d008      	beq.n	8002f08 <memmove+0x28>
 8002ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002efa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002efe:	e7f8      	b.n	8002ef2 <memmove+0x12>
 8002f00:	4402      	add	r2, r0
 8002f02:	4601      	mov	r1, r0
 8002f04:	428a      	cmp	r2, r1
 8002f06:	d100      	bne.n	8002f0a <memmove+0x2a>
 8002f08:	bd10      	pop	{r4, pc}
 8002f0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f12:	e7f7      	b.n	8002f04 <memmove+0x24>

08002f14 <memset>:
 8002f14:	4402      	add	r2, r0
 8002f16:	4603      	mov	r3, r0
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <memset+0xa>
 8002f1c:	4770      	bx	lr
 8002f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f22:	e7f9      	b.n	8002f18 <memset+0x4>

08002f24 <__errno>:
 8002f24:	4b01      	ldr	r3, [pc, #4]	@ (8002f2c <__errno+0x8>)
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000050 	.word	0x20000050

08002f30 <__libc_init_array>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	4d0d      	ldr	r5, [pc, #52]	@ (8002f68 <__libc_init_array+0x38>)
 8002f34:	4c0d      	ldr	r4, [pc, #52]	@ (8002f6c <__libc_init_array+0x3c>)
 8002f36:	1b64      	subs	r4, r4, r5
 8002f38:	10a4      	asrs	r4, r4, #2
 8002f3a:	2600      	movs	r6, #0
 8002f3c:	42a6      	cmp	r6, r4
 8002f3e:	d109      	bne.n	8002f54 <__libc_init_array+0x24>
 8002f40:	4d0b      	ldr	r5, [pc, #44]	@ (8002f70 <__libc_init_array+0x40>)
 8002f42:	4c0c      	ldr	r4, [pc, #48]	@ (8002f74 <__libc_init_array+0x44>)
 8002f44:	f000 fc4c 	bl	80037e0 <_init>
 8002f48:	1b64      	subs	r4, r4, r5
 8002f4a:	10a4      	asrs	r4, r4, #2
 8002f4c:	2600      	movs	r6, #0
 8002f4e:	42a6      	cmp	r6, r4
 8002f50:	d105      	bne.n	8002f5e <__libc_init_array+0x2e>
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
 8002f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f58:	4798      	blx	r3
 8002f5a:	3601      	adds	r6, #1
 8002f5c:	e7ee      	b.n	8002f3c <__libc_init_array+0xc>
 8002f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f62:	4798      	blx	r3
 8002f64:	3601      	adds	r6, #1
 8002f66:	e7f2      	b.n	8002f4e <__libc_init_array+0x1e>
 8002f68:	08005978 	.word	0x08005978
 8002f6c:	08005978 	.word	0x08005978
 8002f70:	08005978 	.word	0x08005978
 8002f74:	0800597c 	.word	0x0800597c

08002f78 <__retarget_lock_acquire_recursive>:
 8002f78:	4770      	bx	lr

08002f7a <__retarget_lock_release_recursive>:
 8002f7a:	4770      	bx	lr

08002f7c <memcpy>:
 8002f7c:	440a      	add	r2, r1
 8002f7e:	4291      	cmp	r1, r2
 8002f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f84:	d100      	bne.n	8002f88 <memcpy+0xc>
 8002f86:	4770      	bx	lr
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f92:	4291      	cmp	r1, r2
 8002f94:	d1f9      	bne.n	8002f8a <memcpy+0xe>
 8002f96:	bd10      	pop	{r4, pc}

08002f98 <_free_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	2900      	cmp	r1, #0
 8002f9e:	d041      	beq.n	8003024 <_free_r+0x8c>
 8002fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa4:	1f0c      	subs	r4, r1, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bfb8      	it	lt
 8002faa:	18e4      	addlt	r4, r4, r3
 8002fac:	f000 f8e0 	bl	8003170 <__malloc_lock>
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003028 <_free_r+0x90>)
 8002fb2:	6813      	ldr	r3, [r2, #0]
 8002fb4:	b933      	cbnz	r3, 8002fc4 <_free_r+0x2c>
 8002fb6:	6063      	str	r3, [r4, #4]
 8002fb8:	6014      	str	r4, [r2, #0]
 8002fba:	4628      	mov	r0, r5
 8002fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fc0:	f000 b8dc 	b.w	800317c <__malloc_unlock>
 8002fc4:	42a3      	cmp	r3, r4
 8002fc6:	d908      	bls.n	8002fda <_free_r+0x42>
 8002fc8:	6820      	ldr	r0, [r4, #0]
 8002fca:	1821      	adds	r1, r4, r0
 8002fcc:	428b      	cmp	r3, r1
 8002fce:	bf01      	itttt	eq
 8002fd0:	6819      	ldreq	r1, [r3, #0]
 8002fd2:	685b      	ldreq	r3, [r3, #4]
 8002fd4:	1809      	addeq	r1, r1, r0
 8002fd6:	6021      	streq	r1, [r4, #0]
 8002fd8:	e7ed      	b.n	8002fb6 <_free_r+0x1e>
 8002fda:	461a      	mov	r2, r3
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	b10b      	cbz	r3, 8002fe4 <_free_r+0x4c>
 8002fe0:	42a3      	cmp	r3, r4
 8002fe2:	d9fa      	bls.n	8002fda <_free_r+0x42>
 8002fe4:	6811      	ldr	r1, [r2, #0]
 8002fe6:	1850      	adds	r0, r2, r1
 8002fe8:	42a0      	cmp	r0, r4
 8002fea:	d10b      	bne.n	8003004 <_free_r+0x6c>
 8002fec:	6820      	ldr	r0, [r4, #0]
 8002fee:	4401      	add	r1, r0
 8002ff0:	1850      	adds	r0, r2, r1
 8002ff2:	4283      	cmp	r3, r0
 8002ff4:	6011      	str	r1, [r2, #0]
 8002ff6:	d1e0      	bne.n	8002fba <_free_r+0x22>
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	6053      	str	r3, [r2, #4]
 8002ffe:	4408      	add	r0, r1
 8003000:	6010      	str	r0, [r2, #0]
 8003002:	e7da      	b.n	8002fba <_free_r+0x22>
 8003004:	d902      	bls.n	800300c <_free_r+0x74>
 8003006:	230c      	movs	r3, #12
 8003008:	602b      	str	r3, [r5, #0]
 800300a:	e7d6      	b.n	8002fba <_free_r+0x22>
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	1821      	adds	r1, r4, r0
 8003010:	428b      	cmp	r3, r1
 8003012:	bf04      	itt	eq
 8003014:	6819      	ldreq	r1, [r3, #0]
 8003016:	685b      	ldreq	r3, [r3, #4]
 8003018:	6063      	str	r3, [r4, #4]
 800301a:	bf04      	itt	eq
 800301c:	1809      	addeq	r1, r1, r0
 800301e:	6021      	streq	r1, [r4, #0]
 8003020:	6054      	str	r4, [r2, #4]
 8003022:	e7ca      	b.n	8002fba <_free_r+0x22>
 8003024:	bd38      	pop	{r3, r4, r5, pc}
 8003026:	bf00      	nop
 8003028:	2000067c 	.word	0x2000067c

0800302c <sbrk_aligned>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	4e0f      	ldr	r6, [pc, #60]	@ (800306c <sbrk_aligned+0x40>)
 8003030:	460c      	mov	r4, r1
 8003032:	6831      	ldr	r1, [r6, #0]
 8003034:	4605      	mov	r5, r0
 8003036:	b911      	cbnz	r1, 800303e <sbrk_aligned+0x12>
 8003038:	f000 fb8c 	bl	8003754 <_sbrk_r>
 800303c:	6030      	str	r0, [r6, #0]
 800303e:	4621      	mov	r1, r4
 8003040:	4628      	mov	r0, r5
 8003042:	f000 fb87 	bl	8003754 <_sbrk_r>
 8003046:	1c43      	adds	r3, r0, #1
 8003048:	d103      	bne.n	8003052 <sbrk_aligned+0x26>
 800304a:	f04f 34ff 	mov.w	r4, #4294967295
 800304e:	4620      	mov	r0, r4
 8003050:	bd70      	pop	{r4, r5, r6, pc}
 8003052:	1cc4      	adds	r4, r0, #3
 8003054:	f024 0403 	bic.w	r4, r4, #3
 8003058:	42a0      	cmp	r0, r4
 800305a:	d0f8      	beq.n	800304e <sbrk_aligned+0x22>
 800305c:	1a21      	subs	r1, r4, r0
 800305e:	4628      	mov	r0, r5
 8003060:	f000 fb78 	bl	8003754 <_sbrk_r>
 8003064:	3001      	adds	r0, #1
 8003066:	d1f2      	bne.n	800304e <sbrk_aligned+0x22>
 8003068:	e7ef      	b.n	800304a <sbrk_aligned+0x1e>
 800306a:	bf00      	nop
 800306c:	20000678 	.word	0x20000678

08003070 <_malloc_r>:
 8003070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003074:	1ccd      	adds	r5, r1, #3
 8003076:	f025 0503 	bic.w	r5, r5, #3
 800307a:	3508      	adds	r5, #8
 800307c:	2d0c      	cmp	r5, #12
 800307e:	bf38      	it	cc
 8003080:	250c      	movcc	r5, #12
 8003082:	2d00      	cmp	r5, #0
 8003084:	4606      	mov	r6, r0
 8003086:	db01      	blt.n	800308c <_malloc_r+0x1c>
 8003088:	42a9      	cmp	r1, r5
 800308a:	d904      	bls.n	8003096 <_malloc_r+0x26>
 800308c:	230c      	movs	r3, #12
 800308e:	6033      	str	r3, [r6, #0]
 8003090:	2000      	movs	r0, #0
 8003092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800316c <_malloc_r+0xfc>
 800309a:	f000 f869 	bl	8003170 <__malloc_lock>
 800309e:	f8d8 3000 	ldr.w	r3, [r8]
 80030a2:	461c      	mov	r4, r3
 80030a4:	bb44      	cbnz	r4, 80030f8 <_malloc_r+0x88>
 80030a6:	4629      	mov	r1, r5
 80030a8:	4630      	mov	r0, r6
 80030aa:	f7ff ffbf 	bl	800302c <sbrk_aligned>
 80030ae:	1c43      	adds	r3, r0, #1
 80030b0:	4604      	mov	r4, r0
 80030b2:	d158      	bne.n	8003166 <_malloc_r+0xf6>
 80030b4:	f8d8 4000 	ldr.w	r4, [r8]
 80030b8:	4627      	mov	r7, r4
 80030ba:	2f00      	cmp	r7, #0
 80030bc:	d143      	bne.n	8003146 <_malloc_r+0xd6>
 80030be:	2c00      	cmp	r4, #0
 80030c0:	d04b      	beq.n	800315a <_malloc_r+0xea>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	4639      	mov	r1, r7
 80030c6:	4630      	mov	r0, r6
 80030c8:	eb04 0903 	add.w	r9, r4, r3
 80030cc:	f000 fb42 	bl	8003754 <_sbrk_r>
 80030d0:	4581      	cmp	r9, r0
 80030d2:	d142      	bne.n	800315a <_malloc_r+0xea>
 80030d4:	6821      	ldr	r1, [r4, #0]
 80030d6:	1a6d      	subs	r5, r5, r1
 80030d8:	4629      	mov	r1, r5
 80030da:	4630      	mov	r0, r6
 80030dc:	f7ff ffa6 	bl	800302c <sbrk_aligned>
 80030e0:	3001      	adds	r0, #1
 80030e2:	d03a      	beq.n	800315a <_malloc_r+0xea>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	442b      	add	r3, r5
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	f8d8 3000 	ldr.w	r3, [r8]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	bb62      	cbnz	r2, 800314c <_malloc_r+0xdc>
 80030f2:	f8c8 7000 	str.w	r7, [r8]
 80030f6:	e00f      	b.n	8003118 <_malloc_r+0xa8>
 80030f8:	6822      	ldr	r2, [r4, #0]
 80030fa:	1b52      	subs	r2, r2, r5
 80030fc:	d420      	bmi.n	8003140 <_malloc_r+0xd0>
 80030fe:	2a0b      	cmp	r2, #11
 8003100:	d917      	bls.n	8003132 <_malloc_r+0xc2>
 8003102:	1961      	adds	r1, r4, r5
 8003104:	42a3      	cmp	r3, r4
 8003106:	6025      	str	r5, [r4, #0]
 8003108:	bf18      	it	ne
 800310a:	6059      	strne	r1, [r3, #4]
 800310c:	6863      	ldr	r3, [r4, #4]
 800310e:	bf08      	it	eq
 8003110:	f8c8 1000 	streq.w	r1, [r8]
 8003114:	5162      	str	r2, [r4, r5]
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	4630      	mov	r0, r6
 800311a:	f000 f82f 	bl	800317c <__malloc_unlock>
 800311e:	f104 000b 	add.w	r0, r4, #11
 8003122:	1d23      	adds	r3, r4, #4
 8003124:	f020 0007 	bic.w	r0, r0, #7
 8003128:	1ac2      	subs	r2, r0, r3
 800312a:	bf1c      	itt	ne
 800312c:	1a1b      	subne	r3, r3, r0
 800312e:	50a3      	strne	r3, [r4, r2]
 8003130:	e7af      	b.n	8003092 <_malloc_r+0x22>
 8003132:	6862      	ldr	r2, [r4, #4]
 8003134:	42a3      	cmp	r3, r4
 8003136:	bf0c      	ite	eq
 8003138:	f8c8 2000 	streq.w	r2, [r8]
 800313c:	605a      	strne	r2, [r3, #4]
 800313e:	e7eb      	b.n	8003118 <_malloc_r+0xa8>
 8003140:	4623      	mov	r3, r4
 8003142:	6864      	ldr	r4, [r4, #4]
 8003144:	e7ae      	b.n	80030a4 <_malloc_r+0x34>
 8003146:	463c      	mov	r4, r7
 8003148:	687f      	ldr	r7, [r7, #4]
 800314a:	e7b6      	b.n	80030ba <_malloc_r+0x4a>
 800314c:	461a      	mov	r2, r3
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	42a3      	cmp	r3, r4
 8003152:	d1fb      	bne.n	800314c <_malloc_r+0xdc>
 8003154:	2300      	movs	r3, #0
 8003156:	6053      	str	r3, [r2, #4]
 8003158:	e7de      	b.n	8003118 <_malloc_r+0xa8>
 800315a:	230c      	movs	r3, #12
 800315c:	6033      	str	r3, [r6, #0]
 800315e:	4630      	mov	r0, r6
 8003160:	f000 f80c 	bl	800317c <__malloc_unlock>
 8003164:	e794      	b.n	8003090 <_malloc_r+0x20>
 8003166:	6005      	str	r5, [r0, #0]
 8003168:	e7d6      	b.n	8003118 <_malloc_r+0xa8>
 800316a:	bf00      	nop
 800316c:	2000067c 	.word	0x2000067c

08003170 <__malloc_lock>:
 8003170:	4801      	ldr	r0, [pc, #4]	@ (8003178 <__malloc_lock+0x8>)
 8003172:	f7ff bf01 	b.w	8002f78 <__retarget_lock_acquire_recursive>
 8003176:	bf00      	nop
 8003178:	20000674 	.word	0x20000674

0800317c <__malloc_unlock>:
 800317c:	4801      	ldr	r0, [pc, #4]	@ (8003184 <__malloc_unlock+0x8>)
 800317e:	f7ff befc 	b.w	8002f7a <__retarget_lock_release_recursive>
 8003182:	bf00      	nop
 8003184:	20000674 	.word	0x20000674

08003188 <__ssputs_r>:
 8003188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	688e      	ldr	r6, [r1, #8]
 800318e:	461f      	mov	r7, r3
 8003190:	42be      	cmp	r6, r7
 8003192:	680b      	ldr	r3, [r1, #0]
 8003194:	4682      	mov	sl, r0
 8003196:	460c      	mov	r4, r1
 8003198:	4690      	mov	r8, r2
 800319a:	d82d      	bhi.n	80031f8 <__ssputs_r+0x70>
 800319c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80031a4:	d026      	beq.n	80031f4 <__ssputs_r+0x6c>
 80031a6:	6965      	ldr	r5, [r4, #20]
 80031a8:	6909      	ldr	r1, [r1, #16]
 80031aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031ae:	eba3 0901 	sub.w	r9, r3, r1
 80031b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031b6:	1c7b      	adds	r3, r7, #1
 80031b8:	444b      	add	r3, r9
 80031ba:	106d      	asrs	r5, r5, #1
 80031bc:	429d      	cmp	r5, r3
 80031be:	bf38      	it	cc
 80031c0:	461d      	movcc	r5, r3
 80031c2:	0553      	lsls	r3, r2, #21
 80031c4:	d527      	bpl.n	8003216 <__ssputs_r+0x8e>
 80031c6:	4629      	mov	r1, r5
 80031c8:	f7ff ff52 	bl	8003070 <_malloc_r>
 80031cc:	4606      	mov	r6, r0
 80031ce:	b360      	cbz	r0, 800322a <__ssputs_r+0xa2>
 80031d0:	6921      	ldr	r1, [r4, #16]
 80031d2:	464a      	mov	r2, r9
 80031d4:	f7ff fed2 	bl	8002f7c <memcpy>
 80031d8:	89a3      	ldrh	r3, [r4, #12]
 80031da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80031de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e2:	81a3      	strh	r3, [r4, #12]
 80031e4:	6126      	str	r6, [r4, #16]
 80031e6:	6165      	str	r5, [r4, #20]
 80031e8:	444e      	add	r6, r9
 80031ea:	eba5 0509 	sub.w	r5, r5, r9
 80031ee:	6026      	str	r6, [r4, #0]
 80031f0:	60a5      	str	r5, [r4, #8]
 80031f2:	463e      	mov	r6, r7
 80031f4:	42be      	cmp	r6, r7
 80031f6:	d900      	bls.n	80031fa <__ssputs_r+0x72>
 80031f8:	463e      	mov	r6, r7
 80031fa:	6820      	ldr	r0, [r4, #0]
 80031fc:	4632      	mov	r2, r6
 80031fe:	4641      	mov	r1, r8
 8003200:	f7ff fe6e 	bl	8002ee0 <memmove>
 8003204:	68a3      	ldr	r3, [r4, #8]
 8003206:	1b9b      	subs	r3, r3, r6
 8003208:	60a3      	str	r3, [r4, #8]
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	4433      	add	r3, r6
 800320e:	6023      	str	r3, [r4, #0]
 8003210:	2000      	movs	r0, #0
 8003212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003216:	462a      	mov	r2, r5
 8003218:	f000 faac 	bl	8003774 <_realloc_r>
 800321c:	4606      	mov	r6, r0
 800321e:	2800      	cmp	r0, #0
 8003220:	d1e0      	bne.n	80031e4 <__ssputs_r+0x5c>
 8003222:	6921      	ldr	r1, [r4, #16]
 8003224:	4650      	mov	r0, sl
 8003226:	f7ff feb7 	bl	8002f98 <_free_r>
 800322a:	230c      	movs	r3, #12
 800322c:	f8ca 3000 	str.w	r3, [sl]
 8003230:	89a3      	ldrh	r3, [r4, #12]
 8003232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003236:	81a3      	strh	r3, [r4, #12]
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	e7e9      	b.n	8003212 <__ssputs_r+0x8a>
	...

08003240 <_svfiprintf_r>:
 8003240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003244:	4698      	mov	r8, r3
 8003246:	898b      	ldrh	r3, [r1, #12]
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	b09d      	sub	sp, #116	@ 0x74
 800324c:	4607      	mov	r7, r0
 800324e:	460d      	mov	r5, r1
 8003250:	4614      	mov	r4, r2
 8003252:	d510      	bpl.n	8003276 <_svfiprintf_r+0x36>
 8003254:	690b      	ldr	r3, [r1, #16]
 8003256:	b973      	cbnz	r3, 8003276 <_svfiprintf_r+0x36>
 8003258:	2140      	movs	r1, #64	@ 0x40
 800325a:	f7ff ff09 	bl	8003070 <_malloc_r>
 800325e:	6028      	str	r0, [r5, #0]
 8003260:	6128      	str	r0, [r5, #16]
 8003262:	b930      	cbnz	r0, 8003272 <_svfiprintf_r+0x32>
 8003264:	230c      	movs	r3, #12
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	b01d      	add	sp, #116	@ 0x74
 800326e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003272:	2340      	movs	r3, #64	@ 0x40
 8003274:	616b      	str	r3, [r5, #20]
 8003276:	2300      	movs	r3, #0
 8003278:	9309      	str	r3, [sp, #36]	@ 0x24
 800327a:	2320      	movs	r3, #32
 800327c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003280:	f8cd 800c 	str.w	r8, [sp, #12]
 8003284:	2330      	movs	r3, #48	@ 0x30
 8003286:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003424 <_svfiprintf_r+0x1e4>
 800328a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800328e:	f04f 0901 	mov.w	r9, #1
 8003292:	4623      	mov	r3, r4
 8003294:	469a      	mov	sl, r3
 8003296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800329a:	b10a      	cbz	r2, 80032a0 <_svfiprintf_r+0x60>
 800329c:	2a25      	cmp	r2, #37	@ 0x25
 800329e:	d1f9      	bne.n	8003294 <_svfiprintf_r+0x54>
 80032a0:	ebba 0b04 	subs.w	fp, sl, r4
 80032a4:	d00b      	beq.n	80032be <_svfiprintf_r+0x7e>
 80032a6:	465b      	mov	r3, fp
 80032a8:	4622      	mov	r2, r4
 80032aa:	4629      	mov	r1, r5
 80032ac:	4638      	mov	r0, r7
 80032ae:	f7ff ff6b 	bl	8003188 <__ssputs_r>
 80032b2:	3001      	adds	r0, #1
 80032b4:	f000 80a7 	beq.w	8003406 <_svfiprintf_r+0x1c6>
 80032b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032ba:	445a      	add	r2, fp
 80032bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80032be:	f89a 3000 	ldrb.w	r3, [sl]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 809f 	beq.w	8003406 <_svfiprintf_r+0x1c6>
 80032c8:	2300      	movs	r3, #0
 80032ca:	f04f 32ff 	mov.w	r2, #4294967295
 80032ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032d2:	f10a 0a01 	add.w	sl, sl, #1
 80032d6:	9304      	str	r3, [sp, #16]
 80032d8:	9307      	str	r3, [sp, #28]
 80032da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032de:	931a      	str	r3, [sp, #104]	@ 0x68
 80032e0:	4654      	mov	r4, sl
 80032e2:	2205      	movs	r2, #5
 80032e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e8:	484e      	ldr	r0, [pc, #312]	@ (8003424 <_svfiprintf_r+0x1e4>)
 80032ea:	f7fc ff79 	bl	80001e0 <memchr>
 80032ee:	9a04      	ldr	r2, [sp, #16]
 80032f0:	b9d8      	cbnz	r0, 800332a <_svfiprintf_r+0xea>
 80032f2:	06d0      	lsls	r0, r2, #27
 80032f4:	bf44      	itt	mi
 80032f6:	2320      	movmi	r3, #32
 80032f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032fc:	0711      	lsls	r1, r2, #28
 80032fe:	bf44      	itt	mi
 8003300:	232b      	movmi	r3, #43	@ 0x2b
 8003302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003306:	f89a 3000 	ldrb.w	r3, [sl]
 800330a:	2b2a      	cmp	r3, #42	@ 0x2a
 800330c:	d015      	beq.n	800333a <_svfiprintf_r+0xfa>
 800330e:	9a07      	ldr	r2, [sp, #28]
 8003310:	4654      	mov	r4, sl
 8003312:	2000      	movs	r0, #0
 8003314:	f04f 0c0a 	mov.w	ip, #10
 8003318:	4621      	mov	r1, r4
 800331a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800331e:	3b30      	subs	r3, #48	@ 0x30
 8003320:	2b09      	cmp	r3, #9
 8003322:	d94b      	bls.n	80033bc <_svfiprintf_r+0x17c>
 8003324:	b1b0      	cbz	r0, 8003354 <_svfiprintf_r+0x114>
 8003326:	9207      	str	r2, [sp, #28]
 8003328:	e014      	b.n	8003354 <_svfiprintf_r+0x114>
 800332a:	eba0 0308 	sub.w	r3, r0, r8
 800332e:	fa09 f303 	lsl.w	r3, r9, r3
 8003332:	4313      	orrs	r3, r2
 8003334:	9304      	str	r3, [sp, #16]
 8003336:	46a2      	mov	sl, r4
 8003338:	e7d2      	b.n	80032e0 <_svfiprintf_r+0xa0>
 800333a:	9b03      	ldr	r3, [sp, #12]
 800333c:	1d19      	adds	r1, r3, #4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	9103      	str	r1, [sp, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	bfbb      	ittet	lt
 8003346:	425b      	neglt	r3, r3
 8003348:	f042 0202 	orrlt.w	r2, r2, #2
 800334c:	9307      	strge	r3, [sp, #28]
 800334e:	9307      	strlt	r3, [sp, #28]
 8003350:	bfb8      	it	lt
 8003352:	9204      	strlt	r2, [sp, #16]
 8003354:	7823      	ldrb	r3, [r4, #0]
 8003356:	2b2e      	cmp	r3, #46	@ 0x2e
 8003358:	d10a      	bne.n	8003370 <_svfiprintf_r+0x130>
 800335a:	7863      	ldrb	r3, [r4, #1]
 800335c:	2b2a      	cmp	r3, #42	@ 0x2a
 800335e:	d132      	bne.n	80033c6 <_svfiprintf_r+0x186>
 8003360:	9b03      	ldr	r3, [sp, #12]
 8003362:	1d1a      	adds	r2, r3, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	9203      	str	r2, [sp, #12]
 8003368:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800336c:	3402      	adds	r4, #2
 800336e:	9305      	str	r3, [sp, #20]
 8003370:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003434 <_svfiprintf_r+0x1f4>
 8003374:	7821      	ldrb	r1, [r4, #0]
 8003376:	2203      	movs	r2, #3
 8003378:	4650      	mov	r0, sl
 800337a:	f7fc ff31 	bl	80001e0 <memchr>
 800337e:	b138      	cbz	r0, 8003390 <_svfiprintf_r+0x150>
 8003380:	9b04      	ldr	r3, [sp, #16]
 8003382:	eba0 000a 	sub.w	r0, r0, sl
 8003386:	2240      	movs	r2, #64	@ 0x40
 8003388:	4082      	lsls	r2, r0
 800338a:	4313      	orrs	r3, r2
 800338c:	3401      	adds	r4, #1
 800338e:	9304      	str	r3, [sp, #16]
 8003390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003394:	4824      	ldr	r0, [pc, #144]	@ (8003428 <_svfiprintf_r+0x1e8>)
 8003396:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800339a:	2206      	movs	r2, #6
 800339c:	f7fc ff20 	bl	80001e0 <memchr>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d036      	beq.n	8003412 <_svfiprintf_r+0x1d2>
 80033a4:	4b21      	ldr	r3, [pc, #132]	@ (800342c <_svfiprintf_r+0x1ec>)
 80033a6:	bb1b      	cbnz	r3, 80033f0 <_svfiprintf_r+0x1b0>
 80033a8:	9b03      	ldr	r3, [sp, #12]
 80033aa:	3307      	adds	r3, #7
 80033ac:	f023 0307 	bic.w	r3, r3, #7
 80033b0:	3308      	adds	r3, #8
 80033b2:	9303      	str	r3, [sp, #12]
 80033b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033b6:	4433      	add	r3, r6
 80033b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80033ba:	e76a      	b.n	8003292 <_svfiprintf_r+0x52>
 80033bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80033c0:	460c      	mov	r4, r1
 80033c2:	2001      	movs	r0, #1
 80033c4:	e7a8      	b.n	8003318 <_svfiprintf_r+0xd8>
 80033c6:	2300      	movs	r3, #0
 80033c8:	3401      	adds	r4, #1
 80033ca:	9305      	str	r3, [sp, #20]
 80033cc:	4619      	mov	r1, r3
 80033ce:	f04f 0c0a 	mov.w	ip, #10
 80033d2:	4620      	mov	r0, r4
 80033d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033d8:	3a30      	subs	r2, #48	@ 0x30
 80033da:	2a09      	cmp	r2, #9
 80033dc:	d903      	bls.n	80033e6 <_svfiprintf_r+0x1a6>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0c6      	beq.n	8003370 <_svfiprintf_r+0x130>
 80033e2:	9105      	str	r1, [sp, #20]
 80033e4:	e7c4      	b.n	8003370 <_svfiprintf_r+0x130>
 80033e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80033ea:	4604      	mov	r4, r0
 80033ec:	2301      	movs	r3, #1
 80033ee:	e7f0      	b.n	80033d2 <_svfiprintf_r+0x192>
 80033f0:	ab03      	add	r3, sp, #12
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	462a      	mov	r2, r5
 80033f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003430 <_svfiprintf_r+0x1f0>)
 80033f8:	a904      	add	r1, sp, #16
 80033fa:	4638      	mov	r0, r7
 80033fc:	f3af 8000 	nop.w
 8003400:	1c42      	adds	r2, r0, #1
 8003402:	4606      	mov	r6, r0
 8003404:	d1d6      	bne.n	80033b4 <_svfiprintf_r+0x174>
 8003406:	89ab      	ldrh	r3, [r5, #12]
 8003408:	065b      	lsls	r3, r3, #25
 800340a:	f53f af2d 	bmi.w	8003268 <_svfiprintf_r+0x28>
 800340e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003410:	e72c      	b.n	800326c <_svfiprintf_r+0x2c>
 8003412:	ab03      	add	r3, sp, #12
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	462a      	mov	r2, r5
 8003418:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <_svfiprintf_r+0x1f0>)
 800341a:	a904      	add	r1, sp, #16
 800341c:	4638      	mov	r0, r7
 800341e:	f000 f879 	bl	8003514 <_printf_i>
 8003422:	e7ed      	b.n	8003400 <_svfiprintf_r+0x1c0>
 8003424:	0800593c 	.word	0x0800593c
 8003428:	08005946 	.word	0x08005946
 800342c:	00000000 	.word	0x00000000
 8003430:	08003189 	.word	0x08003189
 8003434:	08005942 	.word	0x08005942

08003438 <_printf_common>:
 8003438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800343c:	4616      	mov	r6, r2
 800343e:	4698      	mov	r8, r3
 8003440:	688a      	ldr	r2, [r1, #8]
 8003442:	690b      	ldr	r3, [r1, #16]
 8003444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003448:	4293      	cmp	r3, r2
 800344a:	bfb8      	it	lt
 800344c:	4613      	movlt	r3, r2
 800344e:	6033      	str	r3, [r6, #0]
 8003450:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003454:	4607      	mov	r7, r0
 8003456:	460c      	mov	r4, r1
 8003458:	b10a      	cbz	r2, 800345e <_printf_common+0x26>
 800345a:	3301      	adds	r3, #1
 800345c:	6033      	str	r3, [r6, #0]
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	0699      	lsls	r1, r3, #26
 8003462:	bf42      	ittt	mi
 8003464:	6833      	ldrmi	r3, [r6, #0]
 8003466:	3302      	addmi	r3, #2
 8003468:	6033      	strmi	r3, [r6, #0]
 800346a:	6825      	ldr	r5, [r4, #0]
 800346c:	f015 0506 	ands.w	r5, r5, #6
 8003470:	d106      	bne.n	8003480 <_printf_common+0x48>
 8003472:	f104 0a19 	add.w	sl, r4, #25
 8003476:	68e3      	ldr	r3, [r4, #12]
 8003478:	6832      	ldr	r2, [r6, #0]
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	42ab      	cmp	r3, r5
 800347e:	dc26      	bgt.n	80034ce <_printf_common+0x96>
 8003480:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	3b00      	subs	r3, #0
 8003488:	bf18      	it	ne
 800348a:	2301      	movne	r3, #1
 800348c:	0692      	lsls	r2, r2, #26
 800348e:	d42b      	bmi.n	80034e8 <_printf_common+0xb0>
 8003490:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003494:	4641      	mov	r1, r8
 8003496:	4638      	mov	r0, r7
 8003498:	47c8      	blx	r9
 800349a:	3001      	adds	r0, #1
 800349c:	d01e      	beq.n	80034dc <_printf_common+0xa4>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	6922      	ldr	r2, [r4, #16]
 80034a2:	f003 0306 	and.w	r3, r3, #6
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	bf02      	ittt	eq
 80034aa:	68e5      	ldreq	r5, [r4, #12]
 80034ac:	6833      	ldreq	r3, [r6, #0]
 80034ae:	1aed      	subeq	r5, r5, r3
 80034b0:	68a3      	ldr	r3, [r4, #8]
 80034b2:	bf0c      	ite	eq
 80034b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034b8:	2500      	movne	r5, #0
 80034ba:	4293      	cmp	r3, r2
 80034bc:	bfc4      	itt	gt
 80034be:	1a9b      	subgt	r3, r3, r2
 80034c0:	18ed      	addgt	r5, r5, r3
 80034c2:	2600      	movs	r6, #0
 80034c4:	341a      	adds	r4, #26
 80034c6:	42b5      	cmp	r5, r6
 80034c8:	d11a      	bne.n	8003500 <_printf_common+0xc8>
 80034ca:	2000      	movs	r0, #0
 80034cc:	e008      	b.n	80034e0 <_printf_common+0xa8>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4652      	mov	r2, sl
 80034d2:	4641      	mov	r1, r8
 80034d4:	4638      	mov	r0, r7
 80034d6:	47c8      	blx	r9
 80034d8:	3001      	adds	r0, #1
 80034da:	d103      	bne.n	80034e4 <_printf_common+0xac>
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e4:	3501      	adds	r5, #1
 80034e6:	e7c6      	b.n	8003476 <_printf_common+0x3e>
 80034e8:	18e1      	adds	r1, r4, r3
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	2030      	movs	r0, #48	@ 0x30
 80034ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034f2:	4422      	add	r2, r4
 80034f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034fc:	3302      	adds	r3, #2
 80034fe:	e7c7      	b.n	8003490 <_printf_common+0x58>
 8003500:	2301      	movs	r3, #1
 8003502:	4622      	mov	r2, r4
 8003504:	4641      	mov	r1, r8
 8003506:	4638      	mov	r0, r7
 8003508:	47c8      	blx	r9
 800350a:	3001      	adds	r0, #1
 800350c:	d0e6      	beq.n	80034dc <_printf_common+0xa4>
 800350e:	3601      	adds	r6, #1
 8003510:	e7d9      	b.n	80034c6 <_printf_common+0x8e>
	...

08003514 <_printf_i>:
 8003514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003518:	7e0f      	ldrb	r7, [r1, #24]
 800351a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800351c:	2f78      	cmp	r7, #120	@ 0x78
 800351e:	4691      	mov	r9, r2
 8003520:	4680      	mov	r8, r0
 8003522:	460c      	mov	r4, r1
 8003524:	469a      	mov	sl, r3
 8003526:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800352a:	d807      	bhi.n	800353c <_printf_i+0x28>
 800352c:	2f62      	cmp	r7, #98	@ 0x62
 800352e:	d80a      	bhi.n	8003546 <_printf_i+0x32>
 8003530:	2f00      	cmp	r7, #0
 8003532:	f000 80d2 	beq.w	80036da <_printf_i+0x1c6>
 8003536:	2f58      	cmp	r7, #88	@ 0x58
 8003538:	f000 80b9 	beq.w	80036ae <_printf_i+0x19a>
 800353c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003540:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003544:	e03a      	b.n	80035bc <_printf_i+0xa8>
 8003546:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800354a:	2b15      	cmp	r3, #21
 800354c:	d8f6      	bhi.n	800353c <_printf_i+0x28>
 800354e:	a101      	add	r1, pc, #4	@ (adr r1, 8003554 <_printf_i+0x40>)
 8003550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035c1 	.word	0x080035c1
 800355c:	0800353d 	.word	0x0800353d
 8003560:	0800353d 	.word	0x0800353d
 8003564:	0800353d 	.word	0x0800353d
 8003568:	0800353d 	.word	0x0800353d
 800356c:	080035c1 	.word	0x080035c1
 8003570:	0800353d 	.word	0x0800353d
 8003574:	0800353d 	.word	0x0800353d
 8003578:	0800353d 	.word	0x0800353d
 800357c:	0800353d 	.word	0x0800353d
 8003580:	080036c1 	.word	0x080036c1
 8003584:	080035eb 	.word	0x080035eb
 8003588:	0800367b 	.word	0x0800367b
 800358c:	0800353d 	.word	0x0800353d
 8003590:	0800353d 	.word	0x0800353d
 8003594:	080036e3 	.word	0x080036e3
 8003598:	0800353d 	.word	0x0800353d
 800359c:	080035eb 	.word	0x080035eb
 80035a0:	0800353d 	.word	0x0800353d
 80035a4:	0800353d 	.word	0x0800353d
 80035a8:	08003683 	.word	0x08003683
 80035ac:	6833      	ldr	r3, [r6, #0]
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6032      	str	r2, [r6, #0]
 80035b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035bc:	2301      	movs	r3, #1
 80035be:	e09d      	b.n	80036fc <_printf_i+0x1e8>
 80035c0:	6833      	ldr	r3, [r6, #0]
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	1d19      	adds	r1, r3, #4
 80035c6:	6031      	str	r1, [r6, #0]
 80035c8:	0606      	lsls	r6, r0, #24
 80035ca:	d501      	bpl.n	80035d0 <_printf_i+0xbc>
 80035cc:	681d      	ldr	r5, [r3, #0]
 80035ce:	e003      	b.n	80035d8 <_printf_i+0xc4>
 80035d0:	0645      	lsls	r5, r0, #25
 80035d2:	d5fb      	bpl.n	80035cc <_printf_i+0xb8>
 80035d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035d8:	2d00      	cmp	r5, #0
 80035da:	da03      	bge.n	80035e4 <_printf_i+0xd0>
 80035dc:	232d      	movs	r3, #45	@ 0x2d
 80035de:	426d      	negs	r5, r5
 80035e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035e4:	4859      	ldr	r0, [pc, #356]	@ (800374c <_printf_i+0x238>)
 80035e6:	230a      	movs	r3, #10
 80035e8:	e011      	b.n	800360e <_printf_i+0xfa>
 80035ea:	6821      	ldr	r1, [r4, #0]
 80035ec:	6833      	ldr	r3, [r6, #0]
 80035ee:	0608      	lsls	r0, r1, #24
 80035f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80035f4:	d402      	bmi.n	80035fc <_printf_i+0xe8>
 80035f6:	0649      	lsls	r1, r1, #25
 80035f8:	bf48      	it	mi
 80035fa:	b2ad      	uxthmi	r5, r5
 80035fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80035fe:	4853      	ldr	r0, [pc, #332]	@ (800374c <_printf_i+0x238>)
 8003600:	6033      	str	r3, [r6, #0]
 8003602:	bf14      	ite	ne
 8003604:	230a      	movne	r3, #10
 8003606:	2308      	moveq	r3, #8
 8003608:	2100      	movs	r1, #0
 800360a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800360e:	6866      	ldr	r6, [r4, #4]
 8003610:	60a6      	str	r6, [r4, #8]
 8003612:	2e00      	cmp	r6, #0
 8003614:	bfa2      	ittt	ge
 8003616:	6821      	ldrge	r1, [r4, #0]
 8003618:	f021 0104 	bicge.w	r1, r1, #4
 800361c:	6021      	strge	r1, [r4, #0]
 800361e:	b90d      	cbnz	r5, 8003624 <_printf_i+0x110>
 8003620:	2e00      	cmp	r6, #0
 8003622:	d04b      	beq.n	80036bc <_printf_i+0x1a8>
 8003624:	4616      	mov	r6, r2
 8003626:	fbb5 f1f3 	udiv	r1, r5, r3
 800362a:	fb03 5711 	mls	r7, r3, r1, r5
 800362e:	5dc7      	ldrb	r7, [r0, r7]
 8003630:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003634:	462f      	mov	r7, r5
 8003636:	42bb      	cmp	r3, r7
 8003638:	460d      	mov	r5, r1
 800363a:	d9f4      	bls.n	8003626 <_printf_i+0x112>
 800363c:	2b08      	cmp	r3, #8
 800363e:	d10b      	bne.n	8003658 <_printf_i+0x144>
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	07df      	lsls	r7, r3, #31
 8003644:	d508      	bpl.n	8003658 <_printf_i+0x144>
 8003646:	6923      	ldr	r3, [r4, #16]
 8003648:	6861      	ldr	r1, [r4, #4]
 800364a:	4299      	cmp	r1, r3
 800364c:	bfde      	ittt	le
 800364e:	2330      	movle	r3, #48	@ 0x30
 8003650:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003654:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003658:	1b92      	subs	r2, r2, r6
 800365a:	6122      	str	r2, [r4, #16]
 800365c:	f8cd a000 	str.w	sl, [sp]
 8003660:	464b      	mov	r3, r9
 8003662:	aa03      	add	r2, sp, #12
 8003664:	4621      	mov	r1, r4
 8003666:	4640      	mov	r0, r8
 8003668:	f7ff fee6 	bl	8003438 <_printf_common>
 800366c:	3001      	adds	r0, #1
 800366e:	d14a      	bne.n	8003706 <_printf_i+0x1f2>
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	b004      	add	sp, #16
 8003676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	f043 0320 	orr.w	r3, r3, #32
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	4833      	ldr	r0, [pc, #204]	@ (8003750 <_printf_i+0x23c>)
 8003684:	2778      	movs	r7, #120	@ 0x78
 8003686:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	6831      	ldr	r1, [r6, #0]
 800368e:	061f      	lsls	r7, r3, #24
 8003690:	f851 5b04 	ldr.w	r5, [r1], #4
 8003694:	d402      	bmi.n	800369c <_printf_i+0x188>
 8003696:	065f      	lsls	r7, r3, #25
 8003698:	bf48      	it	mi
 800369a:	b2ad      	uxthmi	r5, r5
 800369c:	6031      	str	r1, [r6, #0]
 800369e:	07d9      	lsls	r1, r3, #31
 80036a0:	bf44      	itt	mi
 80036a2:	f043 0320 	orrmi.w	r3, r3, #32
 80036a6:	6023      	strmi	r3, [r4, #0]
 80036a8:	b11d      	cbz	r5, 80036b2 <_printf_i+0x19e>
 80036aa:	2310      	movs	r3, #16
 80036ac:	e7ac      	b.n	8003608 <_printf_i+0xf4>
 80036ae:	4827      	ldr	r0, [pc, #156]	@ (800374c <_printf_i+0x238>)
 80036b0:	e7e9      	b.n	8003686 <_printf_i+0x172>
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	f023 0320 	bic.w	r3, r3, #32
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	e7f6      	b.n	80036aa <_printf_i+0x196>
 80036bc:	4616      	mov	r6, r2
 80036be:	e7bd      	b.n	800363c <_printf_i+0x128>
 80036c0:	6833      	ldr	r3, [r6, #0]
 80036c2:	6825      	ldr	r5, [r4, #0]
 80036c4:	6961      	ldr	r1, [r4, #20]
 80036c6:	1d18      	adds	r0, r3, #4
 80036c8:	6030      	str	r0, [r6, #0]
 80036ca:	062e      	lsls	r6, r5, #24
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	d501      	bpl.n	80036d4 <_printf_i+0x1c0>
 80036d0:	6019      	str	r1, [r3, #0]
 80036d2:	e002      	b.n	80036da <_printf_i+0x1c6>
 80036d4:	0668      	lsls	r0, r5, #25
 80036d6:	d5fb      	bpl.n	80036d0 <_printf_i+0x1bc>
 80036d8:	8019      	strh	r1, [r3, #0]
 80036da:	2300      	movs	r3, #0
 80036dc:	6123      	str	r3, [r4, #16]
 80036de:	4616      	mov	r6, r2
 80036e0:	e7bc      	b.n	800365c <_printf_i+0x148>
 80036e2:	6833      	ldr	r3, [r6, #0]
 80036e4:	1d1a      	adds	r2, r3, #4
 80036e6:	6032      	str	r2, [r6, #0]
 80036e8:	681e      	ldr	r6, [r3, #0]
 80036ea:	6862      	ldr	r2, [r4, #4]
 80036ec:	2100      	movs	r1, #0
 80036ee:	4630      	mov	r0, r6
 80036f0:	f7fc fd76 	bl	80001e0 <memchr>
 80036f4:	b108      	cbz	r0, 80036fa <_printf_i+0x1e6>
 80036f6:	1b80      	subs	r0, r0, r6
 80036f8:	6060      	str	r0, [r4, #4]
 80036fa:	6863      	ldr	r3, [r4, #4]
 80036fc:	6123      	str	r3, [r4, #16]
 80036fe:	2300      	movs	r3, #0
 8003700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003704:	e7aa      	b.n	800365c <_printf_i+0x148>
 8003706:	6923      	ldr	r3, [r4, #16]
 8003708:	4632      	mov	r2, r6
 800370a:	4649      	mov	r1, r9
 800370c:	4640      	mov	r0, r8
 800370e:	47d0      	blx	sl
 8003710:	3001      	adds	r0, #1
 8003712:	d0ad      	beq.n	8003670 <_printf_i+0x15c>
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	079b      	lsls	r3, r3, #30
 8003718:	d413      	bmi.n	8003742 <_printf_i+0x22e>
 800371a:	68e0      	ldr	r0, [r4, #12]
 800371c:	9b03      	ldr	r3, [sp, #12]
 800371e:	4298      	cmp	r0, r3
 8003720:	bfb8      	it	lt
 8003722:	4618      	movlt	r0, r3
 8003724:	e7a6      	b.n	8003674 <_printf_i+0x160>
 8003726:	2301      	movs	r3, #1
 8003728:	4632      	mov	r2, r6
 800372a:	4649      	mov	r1, r9
 800372c:	4640      	mov	r0, r8
 800372e:	47d0      	blx	sl
 8003730:	3001      	adds	r0, #1
 8003732:	d09d      	beq.n	8003670 <_printf_i+0x15c>
 8003734:	3501      	adds	r5, #1
 8003736:	68e3      	ldr	r3, [r4, #12]
 8003738:	9903      	ldr	r1, [sp, #12]
 800373a:	1a5b      	subs	r3, r3, r1
 800373c:	42ab      	cmp	r3, r5
 800373e:	dcf2      	bgt.n	8003726 <_printf_i+0x212>
 8003740:	e7eb      	b.n	800371a <_printf_i+0x206>
 8003742:	2500      	movs	r5, #0
 8003744:	f104 0619 	add.w	r6, r4, #25
 8003748:	e7f5      	b.n	8003736 <_printf_i+0x222>
 800374a:	bf00      	nop
 800374c:	0800594d 	.word	0x0800594d
 8003750:	0800595e 	.word	0x0800595e

08003754 <_sbrk_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4d06      	ldr	r5, [pc, #24]	@ (8003770 <_sbrk_r+0x1c>)
 8003758:	2300      	movs	r3, #0
 800375a:	4604      	mov	r4, r0
 800375c:	4608      	mov	r0, r1
 800375e:	602b      	str	r3, [r5, #0]
 8003760:	f7fd ff22 	bl	80015a8 <_sbrk>
 8003764:	1c43      	adds	r3, r0, #1
 8003766:	d102      	bne.n	800376e <_sbrk_r+0x1a>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	b103      	cbz	r3, 800376e <_sbrk_r+0x1a>
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	bd38      	pop	{r3, r4, r5, pc}
 8003770:	20000670 	.word	0x20000670

08003774 <_realloc_r>:
 8003774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003778:	4680      	mov	r8, r0
 800377a:	4615      	mov	r5, r2
 800377c:	460c      	mov	r4, r1
 800377e:	b921      	cbnz	r1, 800378a <_realloc_r+0x16>
 8003780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003784:	4611      	mov	r1, r2
 8003786:	f7ff bc73 	b.w	8003070 <_malloc_r>
 800378a:	b92a      	cbnz	r2, 8003798 <_realloc_r+0x24>
 800378c:	f7ff fc04 	bl	8002f98 <_free_r>
 8003790:	2400      	movs	r4, #0
 8003792:	4620      	mov	r0, r4
 8003794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003798:	f000 f81a 	bl	80037d0 <_malloc_usable_size_r>
 800379c:	4285      	cmp	r5, r0
 800379e:	4606      	mov	r6, r0
 80037a0:	d802      	bhi.n	80037a8 <_realloc_r+0x34>
 80037a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80037a6:	d8f4      	bhi.n	8003792 <_realloc_r+0x1e>
 80037a8:	4629      	mov	r1, r5
 80037aa:	4640      	mov	r0, r8
 80037ac:	f7ff fc60 	bl	8003070 <_malloc_r>
 80037b0:	4607      	mov	r7, r0
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d0ec      	beq.n	8003790 <_realloc_r+0x1c>
 80037b6:	42b5      	cmp	r5, r6
 80037b8:	462a      	mov	r2, r5
 80037ba:	4621      	mov	r1, r4
 80037bc:	bf28      	it	cs
 80037be:	4632      	movcs	r2, r6
 80037c0:	f7ff fbdc 	bl	8002f7c <memcpy>
 80037c4:	4621      	mov	r1, r4
 80037c6:	4640      	mov	r0, r8
 80037c8:	f7ff fbe6 	bl	8002f98 <_free_r>
 80037cc:	463c      	mov	r4, r7
 80037ce:	e7e0      	b.n	8003792 <_realloc_r+0x1e>

080037d0 <_malloc_usable_size_r>:
 80037d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d4:	1f18      	subs	r0, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bfbc      	itt	lt
 80037da:	580b      	ldrlt	r3, [r1, r0]
 80037dc:	18c0      	addlt	r0, r0, r3
 80037de:	4770      	bx	lr

080037e0 <_init>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr

080037ec <_fini>:
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	bf00      	nop
 80037f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f2:	bc08      	pop	{r3}
 80037f4:	469e      	mov	lr, r3
 80037f6:	4770      	bx	lr
